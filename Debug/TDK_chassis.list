
TDK_chassis.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000062a4  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e8  0800646c  0800646c  0001646c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006854  08006854  00020130  2**0
                  CONTENTS
  4 .ARM          00000008  08006854  08006854  00016854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800685c  0800685c  00020130  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800685c  0800685c  0001685c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006864  08006864  00016864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000130  20000000  08006868  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000310  20000130  08006998  00020130  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  08006998  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014a91  00000000  00000000  00020160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c2e  00000000  00000000  00034bf1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ef0  00000000  00000000  00037820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e10  00000000  00000000  00038710  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026a45  00000000  00000000  00039520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d30  00000000  00000000  0005ff65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dfef8  00000000  00000000  00073c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00153b8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000041b0  00000000  00000000  00153be0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000130 	.word	0x20000130
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08006454 	.word	0x08006454

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000134 	.word	0x20000134
 8000204:	08006454 	.word	0x08006454

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2f>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000abc:	bf24      	itt	cs
 8000abe:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ac2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac6:	d90d      	bls.n	8000ae4 <__aeabi_d2f+0x30>
 8000ac8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000acc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ad0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000adc:	bf08      	it	eq
 8000ade:	f020 0001 	biceq.w	r0, r0, #1
 8000ae2:	4770      	bx	lr
 8000ae4:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae8:	d121      	bne.n	8000b2e <__aeabi_d2f+0x7a>
 8000aea:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aee:	bfbc      	itt	lt
 8000af0:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	4770      	bxlt	lr
 8000af6:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000afa:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afe:	f1c2 0218 	rsb	r2, r2, #24
 8000b02:	f1c2 0c20 	rsb	ip, r2, #32
 8000b06:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b0a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0e:	bf18      	it	ne
 8000b10:	f040 0001 	orrne.w	r0, r0, #1
 8000b14:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b18:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b1c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b20:	ea40 000c 	orr.w	r0, r0, ip
 8000b24:	fa23 f302 	lsr.w	r3, r3, r2
 8000b28:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b2c:	e7cc      	b.n	8000ac8 <__aeabi_d2f+0x14>
 8000b2e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b32:	d107      	bne.n	8000b44 <__aeabi_d2f+0x90>
 8000b34:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b38:	bf1e      	ittt	ne
 8000b3a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b42:	4770      	bxne	lr
 8000b44:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b50:	4770      	bx	lr
 8000b52:	bf00      	nop

08000b54 <__aeabi_uldivmod>:
 8000b54:	b953      	cbnz	r3, 8000b6c <__aeabi_uldivmod+0x18>
 8000b56:	b94a      	cbnz	r2, 8000b6c <__aeabi_uldivmod+0x18>
 8000b58:	2900      	cmp	r1, #0
 8000b5a:	bf08      	it	eq
 8000b5c:	2800      	cmpeq	r0, #0
 8000b5e:	bf1c      	itt	ne
 8000b60:	f04f 31ff 	movne.w	r1, #4294967295
 8000b64:	f04f 30ff 	movne.w	r0, #4294967295
 8000b68:	f000 b974 	b.w	8000e54 <__aeabi_idiv0>
 8000b6c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b70:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b74:	f000 f806 	bl	8000b84 <__udivmoddi4>
 8000b78:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b7c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b80:	b004      	add	sp, #16
 8000b82:	4770      	bx	lr

08000b84 <__udivmoddi4>:
 8000b84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b88:	9d08      	ldr	r5, [sp, #32]
 8000b8a:	4604      	mov	r4, r0
 8000b8c:	468e      	mov	lr, r1
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d14d      	bne.n	8000c2e <__udivmoddi4+0xaa>
 8000b92:	428a      	cmp	r2, r1
 8000b94:	4694      	mov	ip, r2
 8000b96:	d969      	bls.n	8000c6c <__udivmoddi4+0xe8>
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	b152      	cbz	r2, 8000bb4 <__udivmoddi4+0x30>
 8000b9e:	fa01 f302 	lsl.w	r3, r1, r2
 8000ba2:	f1c2 0120 	rsb	r1, r2, #32
 8000ba6:	fa20 f101 	lsr.w	r1, r0, r1
 8000baa:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bae:	ea41 0e03 	orr.w	lr, r1, r3
 8000bb2:	4094      	lsls	r4, r2
 8000bb4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bb8:	0c21      	lsrs	r1, r4, #16
 8000bba:	fbbe f6f8 	udiv	r6, lr, r8
 8000bbe:	fa1f f78c 	uxth.w	r7, ip
 8000bc2:	fb08 e316 	mls	r3, r8, r6, lr
 8000bc6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bca:	fb06 f107 	mul.w	r1, r6, r7
 8000bce:	4299      	cmp	r1, r3
 8000bd0:	d90a      	bls.n	8000be8 <__udivmoddi4+0x64>
 8000bd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bd6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bda:	f080 811f 	bcs.w	8000e1c <__udivmoddi4+0x298>
 8000bde:	4299      	cmp	r1, r3
 8000be0:	f240 811c 	bls.w	8000e1c <__udivmoddi4+0x298>
 8000be4:	3e02      	subs	r6, #2
 8000be6:	4463      	add	r3, ip
 8000be8:	1a5b      	subs	r3, r3, r1
 8000bea:	b2a4      	uxth	r4, r4
 8000bec:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bf0:	fb08 3310 	mls	r3, r8, r0, r3
 8000bf4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bf8:	fb00 f707 	mul.w	r7, r0, r7
 8000bfc:	42a7      	cmp	r7, r4
 8000bfe:	d90a      	bls.n	8000c16 <__udivmoddi4+0x92>
 8000c00:	eb1c 0404 	adds.w	r4, ip, r4
 8000c04:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c08:	f080 810a 	bcs.w	8000e20 <__udivmoddi4+0x29c>
 8000c0c:	42a7      	cmp	r7, r4
 8000c0e:	f240 8107 	bls.w	8000e20 <__udivmoddi4+0x29c>
 8000c12:	4464      	add	r4, ip
 8000c14:	3802      	subs	r0, #2
 8000c16:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c1a:	1be4      	subs	r4, r4, r7
 8000c1c:	2600      	movs	r6, #0
 8000c1e:	b11d      	cbz	r5, 8000c28 <__udivmoddi4+0xa4>
 8000c20:	40d4      	lsrs	r4, r2
 8000c22:	2300      	movs	r3, #0
 8000c24:	e9c5 4300 	strd	r4, r3, [r5]
 8000c28:	4631      	mov	r1, r6
 8000c2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c2e:	428b      	cmp	r3, r1
 8000c30:	d909      	bls.n	8000c46 <__udivmoddi4+0xc2>
 8000c32:	2d00      	cmp	r5, #0
 8000c34:	f000 80ef 	beq.w	8000e16 <__udivmoddi4+0x292>
 8000c38:	2600      	movs	r6, #0
 8000c3a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c3e:	4630      	mov	r0, r6
 8000c40:	4631      	mov	r1, r6
 8000c42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c46:	fab3 f683 	clz	r6, r3
 8000c4a:	2e00      	cmp	r6, #0
 8000c4c:	d14a      	bne.n	8000ce4 <__udivmoddi4+0x160>
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d302      	bcc.n	8000c58 <__udivmoddi4+0xd4>
 8000c52:	4282      	cmp	r2, r0
 8000c54:	f200 80f9 	bhi.w	8000e4a <__udivmoddi4+0x2c6>
 8000c58:	1a84      	subs	r4, r0, r2
 8000c5a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c5e:	2001      	movs	r0, #1
 8000c60:	469e      	mov	lr, r3
 8000c62:	2d00      	cmp	r5, #0
 8000c64:	d0e0      	beq.n	8000c28 <__udivmoddi4+0xa4>
 8000c66:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c6a:	e7dd      	b.n	8000c28 <__udivmoddi4+0xa4>
 8000c6c:	b902      	cbnz	r2, 8000c70 <__udivmoddi4+0xec>
 8000c6e:	deff      	udf	#255	; 0xff
 8000c70:	fab2 f282 	clz	r2, r2
 8000c74:	2a00      	cmp	r2, #0
 8000c76:	f040 8092 	bne.w	8000d9e <__udivmoddi4+0x21a>
 8000c7a:	eba1 010c 	sub.w	r1, r1, ip
 8000c7e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c82:	fa1f fe8c 	uxth.w	lr, ip
 8000c86:	2601      	movs	r6, #1
 8000c88:	0c20      	lsrs	r0, r4, #16
 8000c8a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c8e:	fb07 1113 	mls	r1, r7, r3, r1
 8000c92:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c96:	fb0e f003 	mul.w	r0, lr, r3
 8000c9a:	4288      	cmp	r0, r1
 8000c9c:	d908      	bls.n	8000cb0 <__udivmoddi4+0x12c>
 8000c9e:	eb1c 0101 	adds.w	r1, ip, r1
 8000ca2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000ca6:	d202      	bcs.n	8000cae <__udivmoddi4+0x12a>
 8000ca8:	4288      	cmp	r0, r1
 8000caa:	f200 80cb 	bhi.w	8000e44 <__udivmoddi4+0x2c0>
 8000cae:	4643      	mov	r3, r8
 8000cb0:	1a09      	subs	r1, r1, r0
 8000cb2:	b2a4      	uxth	r4, r4
 8000cb4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cb8:	fb07 1110 	mls	r1, r7, r0, r1
 8000cbc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000cc0:	fb0e fe00 	mul.w	lr, lr, r0
 8000cc4:	45a6      	cmp	lr, r4
 8000cc6:	d908      	bls.n	8000cda <__udivmoddi4+0x156>
 8000cc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ccc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cd0:	d202      	bcs.n	8000cd8 <__udivmoddi4+0x154>
 8000cd2:	45a6      	cmp	lr, r4
 8000cd4:	f200 80bb 	bhi.w	8000e4e <__udivmoddi4+0x2ca>
 8000cd8:	4608      	mov	r0, r1
 8000cda:	eba4 040e 	sub.w	r4, r4, lr
 8000cde:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000ce2:	e79c      	b.n	8000c1e <__udivmoddi4+0x9a>
 8000ce4:	f1c6 0720 	rsb	r7, r6, #32
 8000ce8:	40b3      	lsls	r3, r6
 8000cea:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cee:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cf2:	fa20 f407 	lsr.w	r4, r0, r7
 8000cf6:	fa01 f306 	lsl.w	r3, r1, r6
 8000cfa:	431c      	orrs	r4, r3
 8000cfc:	40f9      	lsrs	r1, r7
 8000cfe:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d02:	fa00 f306 	lsl.w	r3, r0, r6
 8000d06:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d0a:	0c20      	lsrs	r0, r4, #16
 8000d0c:	fa1f fe8c 	uxth.w	lr, ip
 8000d10:	fb09 1118 	mls	r1, r9, r8, r1
 8000d14:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d18:	fb08 f00e 	mul.w	r0, r8, lr
 8000d1c:	4288      	cmp	r0, r1
 8000d1e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d22:	d90b      	bls.n	8000d3c <__udivmoddi4+0x1b8>
 8000d24:	eb1c 0101 	adds.w	r1, ip, r1
 8000d28:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d2c:	f080 8088 	bcs.w	8000e40 <__udivmoddi4+0x2bc>
 8000d30:	4288      	cmp	r0, r1
 8000d32:	f240 8085 	bls.w	8000e40 <__udivmoddi4+0x2bc>
 8000d36:	f1a8 0802 	sub.w	r8, r8, #2
 8000d3a:	4461      	add	r1, ip
 8000d3c:	1a09      	subs	r1, r1, r0
 8000d3e:	b2a4      	uxth	r4, r4
 8000d40:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d44:	fb09 1110 	mls	r1, r9, r0, r1
 8000d48:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d50:	458e      	cmp	lr, r1
 8000d52:	d908      	bls.n	8000d66 <__udivmoddi4+0x1e2>
 8000d54:	eb1c 0101 	adds.w	r1, ip, r1
 8000d58:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d5c:	d26c      	bcs.n	8000e38 <__udivmoddi4+0x2b4>
 8000d5e:	458e      	cmp	lr, r1
 8000d60:	d96a      	bls.n	8000e38 <__udivmoddi4+0x2b4>
 8000d62:	3802      	subs	r0, #2
 8000d64:	4461      	add	r1, ip
 8000d66:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d6a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d6e:	eba1 010e 	sub.w	r1, r1, lr
 8000d72:	42a1      	cmp	r1, r4
 8000d74:	46c8      	mov	r8, r9
 8000d76:	46a6      	mov	lr, r4
 8000d78:	d356      	bcc.n	8000e28 <__udivmoddi4+0x2a4>
 8000d7a:	d053      	beq.n	8000e24 <__udivmoddi4+0x2a0>
 8000d7c:	b15d      	cbz	r5, 8000d96 <__udivmoddi4+0x212>
 8000d7e:	ebb3 0208 	subs.w	r2, r3, r8
 8000d82:	eb61 010e 	sbc.w	r1, r1, lr
 8000d86:	fa01 f707 	lsl.w	r7, r1, r7
 8000d8a:	fa22 f306 	lsr.w	r3, r2, r6
 8000d8e:	40f1      	lsrs	r1, r6
 8000d90:	431f      	orrs	r7, r3
 8000d92:	e9c5 7100 	strd	r7, r1, [r5]
 8000d96:	2600      	movs	r6, #0
 8000d98:	4631      	mov	r1, r6
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	f1c2 0320 	rsb	r3, r2, #32
 8000da2:	40d8      	lsrs	r0, r3
 8000da4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000da8:	fa21 f303 	lsr.w	r3, r1, r3
 8000dac:	4091      	lsls	r1, r2
 8000dae:	4301      	orrs	r1, r0
 8000db0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db4:	fa1f fe8c 	uxth.w	lr, ip
 8000db8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000dbc:	fb07 3610 	mls	r6, r7, r0, r3
 8000dc0:	0c0b      	lsrs	r3, r1, #16
 8000dc2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000dc6:	fb00 f60e 	mul.w	r6, r0, lr
 8000dca:	429e      	cmp	r6, r3
 8000dcc:	fa04 f402 	lsl.w	r4, r4, r2
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x260>
 8000dd2:	eb1c 0303 	adds.w	r3, ip, r3
 8000dd6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dda:	d22f      	bcs.n	8000e3c <__udivmoddi4+0x2b8>
 8000ddc:	429e      	cmp	r6, r3
 8000dde:	d92d      	bls.n	8000e3c <__udivmoddi4+0x2b8>
 8000de0:	3802      	subs	r0, #2
 8000de2:	4463      	add	r3, ip
 8000de4:	1b9b      	subs	r3, r3, r6
 8000de6:	b289      	uxth	r1, r1
 8000de8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000dec:	fb07 3316 	mls	r3, r7, r6, r3
 8000df0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000df4:	fb06 f30e 	mul.w	r3, r6, lr
 8000df8:	428b      	cmp	r3, r1
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x28a>
 8000dfc:	eb1c 0101 	adds.w	r1, ip, r1
 8000e00:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e04:	d216      	bcs.n	8000e34 <__udivmoddi4+0x2b0>
 8000e06:	428b      	cmp	r3, r1
 8000e08:	d914      	bls.n	8000e34 <__udivmoddi4+0x2b0>
 8000e0a:	3e02      	subs	r6, #2
 8000e0c:	4461      	add	r1, ip
 8000e0e:	1ac9      	subs	r1, r1, r3
 8000e10:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e14:	e738      	b.n	8000c88 <__udivmoddi4+0x104>
 8000e16:	462e      	mov	r6, r5
 8000e18:	4628      	mov	r0, r5
 8000e1a:	e705      	b.n	8000c28 <__udivmoddi4+0xa4>
 8000e1c:	4606      	mov	r6, r0
 8000e1e:	e6e3      	b.n	8000be8 <__udivmoddi4+0x64>
 8000e20:	4618      	mov	r0, r3
 8000e22:	e6f8      	b.n	8000c16 <__udivmoddi4+0x92>
 8000e24:	454b      	cmp	r3, r9
 8000e26:	d2a9      	bcs.n	8000d7c <__udivmoddi4+0x1f8>
 8000e28:	ebb9 0802 	subs.w	r8, r9, r2
 8000e2c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e30:	3801      	subs	r0, #1
 8000e32:	e7a3      	b.n	8000d7c <__udivmoddi4+0x1f8>
 8000e34:	4646      	mov	r6, r8
 8000e36:	e7ea      	b.n	8000e0e <__udivmoddi4+0x28a>
 8000e38:	4620      	mov	r0, r4
 8000e3a:	e794      	b.n	8000d66 <__udivmoddi4+0x1e2>
 8000e3c:	4640      	mov	r0, r8
 8000e3e:	e7d1      	b.n	8000de4 <__udivmoddi4+0x260>
 8000e40:	46d0      	mov	r8, sl
 8000e42:	e77b      	b.n	8000d3c <__udivmoddi4+0x1b8>
 8000e44:	3b02      	subs	r3, #2
 8000e46:	4461      	add	r1, ip
 8000e48:	e732      	b.n	8000cb0 <__udivmoddi4+0x12c>
 8000e4a:	4630      	mov	r0, r6
 8000e4c:	e709      	b.n	8000c62 <__udivmoddi4+0xde>
 8000e4e:	4464      	add	r4, ip
 8000e50:	3802      	subs	r0, #2
 8000e52:	e742      	b.n	8000cda <__udivmoddi4+0x156>

08000e54 <__aeabi_idiv0>:
 8000e54:	4770      	bx	lr
 8000e56:	bf00      	nop

08000e58 <_ZSt3absf>:
  abs(double __x)
  { return __builtin_fabs(__x); }

  inline _GLIBCXX_CONSTEXPR float
  abs(float __x)
  { return __builtin_fabsf(__x); }
 8000e58:	b480      	push	{r7}
 8000e5a:	b083      	sub	sp, #12
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e62:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e66:	eef0 7ae7 	vabs.f32	s15, s15
 8000e6a:	eeb0 0a67 	vmov.f32	s0, s15
 8000e6e:	370c      	adds	r7, #12
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <_ZSt3cosf>:
  using ::cos;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  cos(float __x)
  { return __builtin_cosf(__x); }
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b082      	sub	sp, #8
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000e82:	ed97 0a01 	vldr	s0, [r7, #4]
 8000e86:	f004 fce1 	bl	800584c <cosf>
 8000e8a:	eef0 7a40 	vmov.f32	s15, s0
 8000e8e:	eeb0 0a67 	vmov.f32	s0, s15
 8000e92:	3708      	adds	r7, #8
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}

08000e98 <_ZSt3sinf>:
  using ::sin;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sin(float __x)
  { return __builtin_sinf(__x); }
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ea2:	ed97 0a01 	vldr	s0, [r7, #4]
 8000ea6:	f004 fd4d 	bl	8005944 <sinf>
 8000eaa:	eef0 7a40 	vmov.f32	s15, s0
 8000eae:	eeb0 0a67 	vmov.f32	s0, s15
 8000eb2:	3708      	adds	r7, #8
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <_ZSt4fminff>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  fmin(float __x, float __y)
  { return __builtin_fminf(__x, __y); }
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	ed87 0a01 	vstr	s0, [r7, #4]
 8000ec2:	edc7 0a00 	vstr	s1, [r7]
 8000ec6:	edd7 0a00 	vldr	s1, [r7]
 8000eca:	ed97 0a01 	vldr	s0, [r7, #4]
 8000ece:	f004 fd01 	bl	80058d4 <fminf>
 8000ed2:	eef0 7a40 	vmov.f32	s15, s0
 8000ed6:	eeb0 0a67 	vmov.f32	s0, s15
 8000eda:	3708      	adds	r7, #8
 8000edc:	46bd      	mov	sp, r7
 8000ede:	bd80      	pop	{r7, pc}

08000ee0 <_Z23cis_speedTransfer_modlev>:
int check_a = 0;
int check_e = 0;

bool arrive = 0;

void cis_speedTransfer_modle(){
 8000ee0:	b5b0      	push	{r4, r5, r7, lr}
 8000ee2:	af00      	add	r7, sp, #0

	//rps
	encodersp(encRead);
 8000ee4:	482e      	ldr	r0, [pc, #184]	; (8000fa0 <_Z23cis_speedTransfer_modlev+0xc0>)
 8000ee6:	f001 fa77 	bl	80023d8 <_Z9encoderspPf>

	// 0:right, 1:left
	//cm/s
	chassis_speed 	 = ((encRead[0] + encRead[1]) / 2) * (2 * pi * wheel_radius) / 2;
 8000eea:	4b2d      	ldr	r3, [pc, #180]	; (8000fa0 <_Z23cis_speedTransfer_modlev+0xc0>)
 8000eec:	ed93 7a00 	vldr	s14, [r3]
 8000ef0:	4b2b      	ldr	r3, [pc, #172]	; (8000fa0 <_Z23cis_speedTransfer_modlev+0xc0>)
 8000ef2:	edd3 7a01 	vldr	s15, [r3, #4]
 8000ef6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000efa:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8000efe:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8000f02:	ee16 0a90 	vmov	r0, s13
 8000f06:	f7ff fae3 	bl	80004d0 <__aeabi_f2d>
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	460d      	mov	r5, r1
 8000f0e:	4b25      	ldr	r3, [pc, #148]	; (8000fa4 <_Z23cis_speedTransfer_modlev+0xc4>)
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f7ff fadc 	bl	80004d0 <__aeabi_f2d>
 8000f18:	a31f      	add	r3, pc, #124	; (adr r3, 8000f98 <_Z23cis_speedTransfer_modlev+0xb8>)
 8000f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f1e:	f7ff fb2f 	bl	8000580 <__aeabi_dmul>
 8000f22:	4602      	mov	r2, r0
 8000f24:	460b      	mov	r3, r1
 8000f26:	4620      	mov	r0, r4
 8000f28:	4629      	mov	r1, r5
 8000f2a:	f7ff fb29 	bl	8000580 <__aeabi_dmul>
 8000f2e:	4602      	mov	r2, r0
 8000f30:	460b      	mov	r3, r1
 8000f32:	4610      	mov	r0, r2
 8000f34:	4619      	mov	r1, r3
 8000f36:	f04f 0200 	mov.w	r2, #0
 8000f3a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8000f3e:	f7ff fc49 	bl	80007d4 <__aeabi_ddiv>
 8000f42:	4602      	mov	r2, r0
 8000f44:	460b      	mov	r3, r1
 8000f46:	4610      	mov	r0, r2
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f7ff fdb3 	bl	8000ab4 <__aeabi_d2f>
 8000f4e:	4603      	mov	r3, r0
 8000f50:	4a15      	ldr	r2, [pc, #84]	; (8000fa8 <_Z23cis_speedTransfer_modlev+0xc8>)
 8000f52:	6013      	str	r3, [r2, #0]

	//rps
	chassis_angspeed = ((encRead[0] - encRead[1]) / 2) * wheel_radius / chassis_radius / 2;
 8000f54:	4b12      	ldr	r3, [pc, #72]	; (8000fa0 <_Z23cis_speedTransfer_modlev+0xc0>)
 8000f56:	ed93 7a00 	vldr	s14, [r3]
 8000f5a:	4b11      	ldr	r3, [pc, #68]	; (8000fa0 <_Z23cis_speedTransfer_modlev+0xc0>)
 8000f5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f60:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000f64:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000f68:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <_Z23cis_speedTransfer_modlev+0xc4>)
 8000f6e:	edd3 7a00 	vldr	s15, [r3]
 8000f72:	ee67 6a27 	vmul.f32	s13, s14, s15
 8000f76:	4b0d      	ldr	r3, [pc, #52]	; (8000fac <_Z23cis_speedTransfer_modlev+0xcc>)
 8000f78:	edd3 7a00 	vldr	s15, [r3]
 8000f7c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000f80:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000f84:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000f88:	4b09      	ldr	r3, [pc, #36]	; (8000fb0 <_Z23cis_speedTransfer_modlev+0xd0>)
 8000f8a:	edc3 7a00 	vstr	s15, [r3]
}
 8000f8e:	bf00      	nop
 8000f90:	bdb0      	pop	{r4, r5, r7, pc}
 8000f92:	bf00      	nop
 8000f94:	f3af 8000 	nop.w
 8000f98:	f01b866e 	.word	0xf01b866e
 8000f9c:	401921f9 	.word	0x401921f9
 8000fa0:	2000015c 	.word	0x2000015c
 8000fa4:	20000000 	.word	0x20000000
 8000fa8:	20000154 	.word	0x20000154
 8000fac:	20000004 	.word	0x20000004
 8000fb0:	20000158 	.word	0x20000158
 8000fb4:	00000000 	.word	0x00000000

08000fb8 <_Z13location_datai>:
	chassis_left_wheel_angspeed = 0;

	arrive = 0;
}
//update location info 0 path, 1 integral, 2 stop
void location_data(int MODE){
 8000fb8:	b5b0      	push	{r4, r5, r7, lr}
 8000fba:	ed2d 8b02 	vpush	{d8}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]

	cis_speedTransfer_modle();
 8000fc4:	f7ff ff8c 	bl	8000ee0 <_Z23cis_speedTransfer_modlev>

	//integral location
	if(MODE == 1){
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	2b01      	cmp	r3, #1
 8000fcc:	f040 80ef 	bne.w	80011ae <_Z13location_datai+0x1f6>
		last_x = goal_x - map_x;
 8000fd0:	4b9f      	ldr	r3, [pc, #636]	; (8001250 <_Z13location_datai+0x298>)
 8000fd2:	ed93 7a00 	vldr	s14, [r3]
 8000fd6:	4b9f      	ldr	r3, [pc, #636]	; (8001254 <_Z13location_datai+0x29c>)
 8000fd8:	edd3 7a00 	vldr	s15, [r3]
 8000fdc:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000fe0:	4b9d      	ldr	r3, [pc, #628]	; (8001258 <_Z13location_datai+0x2a0>)
 8000fe2:	edc3 7a00 	vstr	s15, [r3]
		last_y = goal_y - map_y;
 8000fe6:	4b9d      	ldr	r3, [pc, #628]	; (800125c <_Z13location_datai+0x2a4>)
 8000fe8:	ed93 7a00 	vldr	s14, [r3]
 8000fec:	4b9c      	ldr	r3, [pc, #624]	; (8001260 <_Z13location_datai+0x2a8>)
 8000fee:	edd3 7a00 	vldr	s15, [r3]
 8000ff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000ff6:	4b9b      	ldr	r3, [pc, #620]	; (8001264 <_Z13location_datai+0x2ac>)
 8000ff8:	edc3 7a00 	vstr	s15, [r3]
		last_theta = std::fmin(std::abs(goal_theta - map_theta_front), std::abs(goal_theta - map_theta_back));
 8000ffc:	4b9a      	ldr	r3, [pc, #616]	; (8001268 <_Z13location_datai+0x2b0>)
 8000ffe:	ed93 7a00 	vldr	s14, [r3]
 8001002:	4b9a      	ldr	r3, [pc, #616]	; (800126c <_Z13location_datai+0x2b4>)
 8001004:	edd3 7a00 	vldr	s15, [r3]
 8001008:	ee77 7a67 	vsub.f32	s15, s14, s15
 800100c:	eeb0 0a67 	vmov.f32	s0, s15
 8001010:	f7ff ff22 	bl	8000e58 <_ZSt3absf>
 8001014:	eeb0 8a40 	vmov.f32	s16, s0
 8001018:	4b93      	ldr	r3, [pc, #588]	; (8001268 <_Z13location_datai+0x2b0>)
 800101a:	ed93 7a00 	vldr	s14, [r3]
 800101e:	4b94      	ldr	r3, [pc, #592]	; (8001270 <_Z13location_datai+0x2b8>)
 8001020:	edd3 7a00 	vldr	s15, [r3]
 8001024:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001028:	eeb0 0a67 	vmov.f32	s0, s15
 800102c:	f7ff ff14 	bl	8000e58 <_ZSt3absf>
 8001030:	eef0 7a40 	vmov.f32	s15, s0
 8001034:	eef0 0a67 	vmov.f32	s1, s15
 8001038:	eeb0 0a48 	vmov.f32	s0, s16
 800103c:	f7ff ff3c 	bl	8000eb8 <_ZSt4fminff>
 8001040:	eef0 7a40 	vmov.f32	s15, s0
 8001044:	4b8b      	ldr	r3, [pc, #556]	; (8001274 <_Z13location_datai+0x2bc>)
 8001046:	edc3 7a00 	vstr	s15, [r3]

		map_x += chassis_speed * timer_span * std::cos(map_theta_front);
 800104a:	4b8b      	ldr	r3, [pc, #556]	; (8001278 <_Z13location_datai+0x2c0>)
 800104c:	ed93 7a00 	vldr	s14, [r3]
 8001050:	4b8a      	ldr	r3, [pc, #552]	; (800127c <_Z13location_datai+0x2c4>)
 8001052:	edd3 7a00 	vldr	s15, [r3]
 8001056:	ee27 8a27 	vmul.f32	s16, s14, s15
 800105a:	4b84      	ldr	r3, [pc, #528]	; (800126c <_Z13location_datai+0x2b4>)
 800105c:	edd3 7a00 	vldr	s15, [r3]
 8001060:	eeb0 0a67 	vmov.f32	s0, s15
 8001064:	f7ff ff08 	bl	8000e78 <_ZSt3cosf>
 8001068:	eef0 7a40 	vmov.f32	s15, s0
 800106c:	ee28 7a27 	vmul.f32	s14, s16, s15
 8001070:	4b78      	ldr	r3, [pc, #480]	; (8001254 <_Z13location_datai+0x29c>)
 8001072:	edd3 7a00 	vldr	s15, [r3]
 8001076:	ee77 7a27 	vadd.f32	s15, s14, s15
 800107a:	4b76      	ldr	r3, [pc, #472]	; (8001254 <_Z13location_datai+0x29c>)
 800107c:	edc3 7a00 	vstr	s15, [r3]
		map_y += chassis_speed * timer_span * std::sin(map_theta_front);
 8001080:	4b7d      	ldr	r3, [pc, #500]	; (8001278 <_Z13location_datai+0x2c0>)
 8001082:	ed93 7a00 	vldr	s14, [r3]
 8001086:	4b7d      	ldr	r3, [pc, #500]	; (800127c <_Z13location_datai+0x2c4>)
 8001088:	edd3 7a00 	vldr	s15, [r3]
 800108c:	ee27 8a27 	vmul.f32	s16, s14, s15
 8001090:	4b76      	ldr	r3, [pc, #472]	; (800126c <_Z13location_datai+0x2b4>)
 8001092:	edd3 7a00 	vldr	s15, [r3]
 8001096:	eeb0 0a67 	vmov.f32	s0, s15
 800109a:	f7ff fefd 	bl	8000e98 <_ZSt3sinf>
 800109e:	eef0 7a40 	vmov.f32	s15, s0
 80010a2:	ee28 7a27 	vmul.f32	s14, s16, s15
 80010a6:	4b6e      	ldr	r3, [pc, #440]	; (8001260 <_Z13location_datai+0x2a8>)
 80010a8:	edd3 7a00 	vldr	s15, [r3]
 80010ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010b0:	4b6b      	ldr	r3, [pc, #428]	; (8001260 <_Z13location_datai+0x2a8>)
 80010b2:	edc3 7a00 	vstr	s15, [r3]

		//record orientation change(rad)
		map_theta_front += chassis_angspeed * timer_span * 2 * pi;
 80010b6:	4b6d      	ldr	r3, [pc, #436]	; (800126c <_Z13location_datai+0x2b4>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fa08 	bl	80004d0 <__aeabi_f2d>
 80010c0:	4604      	mov	r4, r0
 80010c2:	460d      	mov	r5, r1
 80010c4:	4b6e      	ldr	r3, [pc, #440]	; (8001280 <_Z13location_datai+0x2c8>)
 80010c6:	ed93 7a00 	vldr	s14, [r3]
 80010ca:	4b6c      	ldr	r3, [pc, #432]	; (800127c <_Z13location_datai+0x2c4>)
 80010cc:	edd3 7a00 	vldr	s15, [r3]
 80010d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80010d4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80010d8:	ee17 0a90 	vmov	r0, s15
 80010dc:	f7ff f9f8 	bl	80004d0 <__aeabi_f2d>
 80010e0:	a357      	add	r3, pc, #348	; (adr r3, 8001240 <_Z13location_datai+0x288>)
 80010e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e6:	f7ff fa4b 	bl	8000580 <__aeabi_dmul>
 80010ea:	4602      	mov	r2, r0
 80010ec:	460b      	mov	r3, r1
 80010ee:	4620      	mov	r0, r4
 80010f0:	4629      	mov	r1, r5
 80010f2:	f7ff f88f 	bl	8000214 <__adddf3>
 80010f6:	4602      	mov	r2, r0
 80010f8:	460b      	mov	r3, r1
 80010fa:	4610      	mov	r0, r2
 80010fc:	4619      	mov	r1, r3
 80010fe:	f7ff fcd9 	bl	8000ab4 <__aeabi_d2f>
 8001102:	4603      	mov	r3, r0
 8001104:	4a59      	ldr	r2, [pc, #356]	; (800126c <_Z13location_datai+0x2b4>)
 8001106:	6013      	str	r3, [r2, #0]

		if(map_theta_front > 0)
 8001108:	4b58      	ldr	r3, [pc, #352]	; (800126c <_Z13location_datai+0x2b4>)
 800110a:	edd3 7a00 	vldr	s15, [r3]
 800110e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001112:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001116:	dd13      	ble.n	8001140 <_Z13location_datai+0x188>
			map_theta_back = map_theta_front - pi;
 8001118:	4b54      	ldr	r3, [pc, #336]	; (800126c <_Z13location_datai+0x2b4>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	4618      	mov	r0, r3
 800111e:	f7ff f9d7 	bl	80004d0 <__aeabi_f2d>
 8001122:	a347      	add	r3, pc, #284	; (adr r3, 8001240 <_Z13location_datai+0x288>)
 8001124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001128:	f7ff f872 	bl	8000210 <__aeabi_dsub>
 800112c:	4602      	mov	r2, r0
 800112e:	460b      	mov	r3, r1
 8001130:	4610      	mov	r0, r2
 8001132:	4619      	mov	r1, r3
 8001134:	f7ff fcbe 	bl	8000ab4 <__aeabi_d2f>
 8001138:	4603      	mov	r3, r0
 800113a:	4a4d      	ldr	r2, [pc, #308]	; (8001270 <_Z13location_datai+0x2b8>)
 800113c:	6013      	str	r3, [r2, #0]
 800113e:	e012      	b.n	8001166 <_Z13location_datai+0x1ae>
		else
			map_theta_back = map_theta_front + pi;
 8001140:	4b4a      	ldr	r3, [pc, #296]	; (800126c <_Z13location_datai+0x2b4>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4618      	mov	r0, r3
 8001146:	f7ff f9c3 	bl	80004d0 <__aeabi_f2d>
 800114a:	a33d      	add	r3, pc, #244	; (adr r3, 8001240 <_Z13location_datai+0x288>)
 800114c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001150:	f7ff f860 	bl	8000214 <__adddf3>
 8001154:	4602      	mov	r2, r0
 8001156:	460b      	mov	r3, r1
 8001158:	4610      	mov	r0, r2
 800115a:	4619      	mov	r1, r3
 800115c:	f7ff fcaa 	bl	8000ab4 <__aeabi_d2f>
 8001160:	4603      	mov	r3, r0
 8001162:	4a43      	ldr	r2, [pc, #268]	; (8001270 <_Z13location_datai+0x2b8>)
 8001164:	6013      	str	r3, [r2, #0]

		//rad:+pi ~ -pi
		if(map_theta_front >= pi || map_theta_front <= -1 * pi)
 8001166:	4b41      	ldr	r3, [pc, #260]	; (800126c <_Z13location_datai+0x2b4>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff f9b0 	bl	80004d0 <__aeabi_f2d>
 8001170:	a333      	add	r3, pc, #204	; (adr r3, 8001240 <_Z13location_datai+0x288>)
 8001172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001176:	f7ff fc89 	bl	8000a8c <__aeabi_dcmpge>
 800117a:	4603      	mov	r3, r0
 800117c:	2b00      	cmp	r3, #0
 800117e:	d10d      	bne.n	800119c <_Z13location_datai+0x1e4>
 8001180:	4b3a      	ldr	r3, [pc, #232]	; (800126c <_Z13location_datai+0x2b4>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4618      	mov	r0, r3
 8001186:	f7ff f9a3 	bl	80004d0 <__aeabi_f2d>
 800118a:	a32f      	add	r3, pc, #188	; (adr r3, 8001248 <_Z13location_datai+0x290>)
 800118c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001190:	f7ff fc72 	bl	8000a78 <__aeabi_dcmple>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d100      	bne.n	800119c <_Z13location_datai+0x1e4>
		if(!path_dis_x)
			map_x += chassis_speed * timer_span;
		else
			map_y += chassis_speed * timer_span;
	}
}
 800119a:	e04a      	b.n	8001232 <_Z13location_datai+0x27a>
			map_theta_front *= -1;
 800119c:	4b33      	ldr	r3, [pc, #204]	; (800126c <_Z13location_datai+0x2b4>)
 800119e:	edd3 7a00 	vldr	s15, [r3]
 80011a2:	eef1 7a67 	vneg.f32	s15, s15
 80011a6:	4b31      	ldr	r3, [pc, #196]	; (800126c <_Z13location_datai+0x2b4>)
 80011a8:	edc3 7a00 	vstr	s15, [r3]
}
 80011ac:	e041      	b.n	8001232 <_Z13location_datai+0x27a>
	else if(MODE == 0){
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d13e      	bne.n	8001232 <_Z13location_datai+0x27a>
		last_x = path_dis_x - map_x;
 80011b4:	4b33      	ldr	r3, [pc, #204]	; (8001284 <_Z13location_datai+0x2cc>)
 80011b6:	ed93 7a00 	vldr	s14, [r3]
 80011ba:	4b26      	ldr	r3, [pc, #152]	; (8001254 <_Z13location_datai+0x29c>)
 80011bc:	edd3 7a00 	vldr	s15, [r3]
 80011c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011c4:	4b24      	ldr	r3, [pc, #144]	; (8001258 <_Z13location_datai+0x2a0>)
 80011c6:	edc3 7a00 	vstr	s15, [r3]
		last_y = path_dis_y - map_y;
 80011ca:	4b2f      	ldr	r3, [pc, #188]	; (8001288 <_Z13location_datai+0x2d0>)
 80011cc:	ed93 7a00 	vldr	s14, [r3]
 80011d0:	4b23      	ldr	r3, [pc, #140]	; (8001260 <_Z13location_datai+0x2a8>)
 80011d2:	edd3 7a00 	vldr	s15, [r3]
 80011d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011da:	4b22      	ldr	r3, [pc, #136]	; (8001264 <_Z13location_datai+0x2ac>)
 80011dc:	edc3 7a00 	vstr	s15, [r3]
		if(!path_dis_x)
 80011e0:	4b28      	ldr	r3, [pc, #160]	; (8001284 <_Z13location_datai+0x2cc>)
 80011e2:	edd3 7a00 	vldr	s15, [r3]
 80011e6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80011ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ee:	d110      	bne.n	8001212 <_Z13location_datai+0x25a>
			map_x += chassis_speed * timer_span;
 80011f0:	4b21      	ldr	r3, [pc, #132]	; (8001278 <_Z13location_datai+0x2c0>)
 80011f2:	ed93 7a00 	vldr	s14, [r3]
 80011f6:	4b21      	ldr	r3, [pc, #132]	; (800127c <_Z13location_datai+0x2c4>)
 80011f8:	edd3 7a00 	vldr	s15, [r3]
 80011fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001200:	4b14      	ldr	r3, [pc, #80]	; (8001254 <_Z13location_datai+0x29c>)
 8001202:	edd3 7a00 	vldr	s15, [r3]
 8001206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <_Z13location_datai+0x29c>)
 800120c:	edc3 7a00 	vstr	s15, [r3]
}
 8001210:	e00f      	b.n	8001232 <_Z13location_datai+0x27a>
			map_y += chassis_speed * timer_span;
 8001212:	4b19      	ldr	r3, [pc, #100]	; (8001278 <_Z13location_datai+0x2c0>)
 8001214:	ed93 7a00 	vldr	s14, [r3]
 8001218:	4b18      	ldr	r3, [pc, #96]	; (800127c <_Z13location_datai+0x2c4>)
 800121a:	edd3 7a00 	vldr	s15, [r3]
 800121e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001222:	4b0f      	ldr	r3, [pc, #60]	; (8001260 <_Z13location_datai+0x2a8>)
 8001224:	edd3 7a00 	vldr	s15, [r3]
 8001228:	ee77 7a27 	vadd.f32	s15, s14, s15
 800122c:	4b0c      	ldr	r3, [pc, #48]	; (8001260 <_Z13location_datai+0x2a8>)
 800122e:	edc3 7a00 	vstr	s15, [r3]
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	ecbd 8b02 	vpop	{d8}
 800123c:	bdb0      	pop	{r4, r5, r7, pc}
 800123e:	bf00      	nop
 8001240:	f01b866e 	.word	0xf01b866e
 8001244:	400921f9 	.word	0x400921f9
 8001248:	f01b866e 	.word	0xf01b866e
 800124c:	c00921f9 	.word	0xc00921f9
 8001250:	20000170 	.word	0x20000170
 8001254:	20000164 	.word	0x20000164
 8001258:	2000017c 	.word	0x2000017c
 800125c:	20000174 	.word	0x20000174
 8001260:	20000168 	.word	0x20000168
 8001264:	20000180 	.word	0x20000180
 8001268:	20000178 	.word	0x20000178
 800126c:	2000000c 	.word	0x2000000c
 8001270:	2000016c 	.word	0x2000016c
 8001274:	20000184 	.word	0x20000184
 8001278:	20000154 	.word	0x20000154
 800127c:	20000008 	.word	0x20000008
 8001280:	20000158 	.word	0x20000158
 8001284:	20000434 	.word	0x20000434
 8001288:	20000438 	.word	0x20000438
 800128c:	00000000 	.word	0x00000000

08001290 <_Z12speed_changei>:
			arrive = 1;
		}
	}
}
//0 path, 1 integral, 2 stop
void speed_change(int MODE){
 8001290:	b580      	push	{r7, lr}
 8001292:	b082      	sub	sp, #8
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]

	//integral
	if(MODE == 1){
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	2b01      	cmp	r3, #1
 800129c:	f040 80d3 	bne.w	8001446 <_Z12speed_changei+0x1b6>
		//speed up
		if(mode == 2 && last_x > 15 && last_y > 15 && SP <= 80)
 80012a0:	4b9f      	ldr	r3, [pc, #636]	; (8001520 <_Z12speed_changei+0x290>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d131      	bne.n	800130c <_Z12speed_changei+0x7c>
 80012a8:	4b9e      	ldr	r3, [pc, #632]	; (8001524 <_Z12speed_changei+0x294>)
 80012aa:	edd3 7a00 	vldr	s15, [r3]
 80012ae:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80012b2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ba:	dd27      	ble.n	800130c <_Z12speed_changei+0x7c>
 80012bc:	4b9a      	ldr	r3, [pc, #616]	; (8001528 <_Z12speed_changei+0x298>)
 80012be:	edd3 7a00 	vldr	s15, [r3]
 80012c2:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80012c6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012ce:	dd1d      	ble.n	800130c <_Z12speed_changei+0x7c>
 80012d0:	4b96      	ldr	r3, [pc, #600]	; (800152c <_Z12speed_changei+0x29c>)
 80012d2:	edd3 7a00 	vldr	s15, [r3]
 80012d6:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8001530 <_Z12speed_changei+0x2a0>
 80012da:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e2:	d813      	bhi.n	800130c <_Z12speed_changei+0x7c>
			SP += 0.02;
 80012e4:	4b91      	ldr	r3, [pc, #580]	; (800152c <_Z12speed_changei+0x29c>)
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	4618      	mov	r0, r3
 80012ea:	f7ff f8f1 	bl	80004d0 <__aeabi_f2d>
 80012ee:	a384      	add	r3, pc, #528	; (adr r3, 8001500 <_Z12speed_changei+0x270>)
 80012f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f4:	f7fe ff8e 	bl	8000214 <__adddf3>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fbd8 	bl	8000ab4 <__aeabi_d2f>
 8001304:	4603      	mov	r3, r0
 8001306:	4a89      	ldr	r2, [pc, #548]	; (800152c <_Z12speed_changei+0x29c>)
 8001308:	6013      	str	r3, [r2, #0]
 800130a:	e1f5      	b.n	80016f8 <_Z12speed_changei+0x468>
		//slow down
		else if(mode == 2 && last_x < 15 && last_y < 15 && SP >= 1)
 800130c:	4b84      	ldr	r3, [pc, #528]	; (8001520 <_Z12speed_changei+0x290>)
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	2b02      	cmp	r3, #2
 8001312:	d131      	bne.n	8001378 <_Z12speed_changei+0xe8>
 8001314:	4b83      	ldr	r3, [pc, #524]	; (8001524 <_Z12speed_changei+0x294>)
 8001316:	edd3 7a00 	vldr	s15, [r3]
 800131a:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800131e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001326:	d527      	bpl.n	8001378 <_Z12speed_changei+0xe8>
 8001328:	4b7f      	ldr	r3, [pc, #508]	; (8001528 <_Z12speed_changei+0x298>)
 800132a:	edd3 7a00 	vldr	s15, [r3]
 800132e:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001332:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001336:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800133a:	d51d      	bpl.n	8001378 <_Z12speed_changei+0xe8>
 800133c:	4b7b      	ldr	r3, [pc, #492]	; (800152c <_Z12speed_changei+0x29c>)
 800133e:	edd3 7a00 	vldr	s15, [r3]
 8001342:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001346:	eef4 7ac7 	vcmpe.f32	s15, s14
 800134a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800134e:	db13      	blt.n	8001378 <_Z12speed_changei+0xe8>
			SP -= 0.02;
 8001350:	4b76      	ldr	r3, [pc, #472]	; (800152c <_Z12speed_changei+0x29c>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4618      	mov	r0, r3
 8001356:	f7ff f8bb 	bl	80004d0 <__aeabi_f2d>
 800135a:	a369      	add	r3, pc, #420	; (adr r3, 8001500 <_Z12speed_changei+0x270>)
 800135c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001360:	f7fe ff56 	bl	8000210 <__aeabi_dsub>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4610      	mov	r0, r2
 800136a:	4619      	mov	r1, r3
 800136c:	f7ff fba2 	bl	8000ab4 <__aeabi_d2f>
 8001370:	4603      	mov	r3, r0
 8001372:	4a6e      	ldr	r2, [pc, #440]	; (800152c <_Z12speed_changei+0x29c>)
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	e1bf      	b.n	80016f8 <_Z12speed_changei+0x468>
		//angular speed up
		else if(mode == 1 && last_theta > pi / 35 && spin <= 0.3)
 8001378:	4b69      	ldr	r3, [pc, #420]	; (8001520 <_Z12speed_changei+0x290>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	2b01      	cmp	r3, #1
 800137e:	d12d      	bne.n	80013dc <_Z12speed_changei+0x14c>
 8001380:	4b6c      	ldr	r3, [pc, #432]	; (8001534 <_Z12speed_changei+0x2a4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	4618      	mov	r0, r3
 8001386:	f7ff f8a3 	bl	80004d0 <__aeabi_f2d>
 800138a:	a35f      	add	r3, pc, #380	; (adr r3, 8001508 <_Z12speed_changei+0x278>)
 800138c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001390:	f7ff fb86 	bl	8000aa0 <__aeabi_dcmpgt>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d020      	beq.n	80013dc <_Z12speed_changei+0x14c>
 800139a:	4b67      	ldr	r3, [pc, #412]	; (8001538 <_Z12speed_changei+0x2a8>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4618      	mov	r0, r3
 80013a0:	f7ff f896 	bl	80004d0 <__aeabi_f2d>
 80013a4:	a35a      	add	r3, pc, #360	; (adr r3, 8001510 <_Z12speed_changei+0x280>)
 80013a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013aa:	f7ff fb65 	bl	8000a78 <__aeabi_dcmple>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d013      	beq.n	80013dc <_Z12speed_changei+0x14c>
			spin += 0.01;
 80013b4:	4b60      	ldr	r3, [pc, #384]	; (8001538 <_Z12speed_changei+0x2a8>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f889 	bl	80004d0 <__aeabi_f2d>
 80013be:	a356      	add	r3, pc, #344	; (adr r3, 8001518 <_Z12speed_changei+0x288>)
 80013c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013c4:	f7fe ff26 	bl	8000214 <__adddf3>
 80013c8:	4602      	mov	r2, r0
 80013ca:	460b      	mov	r3, r1
 80013cc:	4610      	mov	r0, r2
 80013ce:	4619      	mov	r1, r3
 80013d0:	f7ff fb70 	bl	8000ab4 <__aeabi_d2f>
 80013d4:	4603      	mov	r3, r0
 80013d6:	4a58      	ldr	r2, [pc, #352]	; (8001538 <_Z12speed_changei+0x2a8>)
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e18d      	b.n	80016f8 <_Z12speed_changei+0x468>
		//angular slow down
		else if(mode == 1 && last_theta < pi / 35 && spin >= 0.01)
 80013dc:	4b50      	ldr	r3, [pc, #320]	; (8001520 <_Z12speed_changei+0x290>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	2b01      	cmp	r3, #1
 80013e2:	f040 8189 	bne.w	80016f8 <_Z12speed_changei+0x468>
 80013e6:	4b53      	ldr	r3, [pc, #332]	; (8001534 <_Z12speed_changei+0x2a4>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f870 	bl	80004d0 <__aeabi_f2d>
 80013f0:	a345      	add	r3, pc, #276	; (adr r3, 8001508 <_Z12speed_changei+0x278>)
 80013f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013f6:	f7ff fb35 	bl	8000a64 <__aeabi_dcmplt>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d100      	bne.n	8001402 <_Z12speed_changei+0x172>
	//stop
	else{
		chassis_right_wheel_angspeed = 0;
		chassis_left_wheel_angspeed  = 0;
	}
}
 8001400:	e17a      	b.n	80016f8 <_Z12speed_changei+0x468>
		else if(mode == 1 && last_theta < pi / 35 && spin >= 0.01)
 8001402:	4b4d      	ldr	r3, [pc, #308]	; (8001538 <_Z12speed_changei+0x2a8>)
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	4618      	mov	r0, r3
 8001408:	f7ff f862 	bl	80004d0 <__aeabi_f2d>
 800140c:	a342      	add	r3, pc, #264	; (adr r3, 8001518 <_Z12speed_changei+0x288>)
 800140e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001412:	f7ff fb3b 	bl	8000a8c <__aeabi_dcmpge>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d100      	bne.n	800141e <_Z12speed_changei+0x18e>
}
 800141c:	e16c      	b.n	80016f8 <_Z12speed_changei+0x468>
			spin -= 0.01;
 800141e:	4b46      	ldr	r3, [pc, #280]	; (8001538 <_Z12speed_changei+0x2a8>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4618      	mov	r0, r3
 8001424:	f7ff f854 	bl	80004d0 <__aeabi_f2d>
 8001428:	a33b      	add	r3, pc, #236	; (adr r3, 8001518 <_Z12speed_changei+0x288>)
 800142a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142e:	f7fe feef 	bl	8000210 <__aeabi_dsub>
 8001432:	4602      	mov	r2, r0
 8001434:	460b      	mov	r3, r1
 8001436:	4610      	mov	r0, r2
 8001438:	4619      	mov	r1, r3
 800143a:	f7ff fb3b 	bl	8000ab4 <__aeabi_d2f>
 800143e:	4603      	mov	r3, r0
 8001440:	4a3d      	ldr	r2, [pc, #244]	; (8001538 <_Z12speed_changei+0x2a8>)
 8001442:	6013      	str	r3, [r2, #0]
}
 8001444:	e158      	b.n	80016f8 <_Z12speed_changei+0x468>
	else if(MODE == 0){
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	2b00      	cmp	r3, #0
 800144a:	f040 814c 	bne.w	80016e6 <_Z12speed_changei+0x456>
		arrive = 0;
 800144e:	4b3b      	ldr	r3, [pc, #236]	; (800153c <_Z12speed_changei+0x2ac>)
 8001450:	2200      	movs	r2, #0
 8001452:	701a      	strb	r2, [r3, #0]
		if(path_motor_speed[0] * path_motor_speed[1] < 0){
 8001454:	4b3a      	ldr	r3, [pc, #232]	; (8001540 <_Z12speed_changei+0x2b0>)
 8001456:	ed93 7a00 	vldr	s14, [r3]
 800145a:	4b39      	ldr	r3, [pc, #228]	; (8001540 <_Z12speed_changei+0x2b0>)
 800145c:	edd3 7a01 	vldr	s15, [r3, #4]
 8001460:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001464:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800146c:	d508      	bpl.n	8001480 <_Z12speed_changei+0x1f0>
			chassis_right_wheel_angspeed = path_motor_speed[0];
 800146e:	4b34      	ldr	r3, [pc, #208]	; (8001540 <_Z12speed_changei+0x2b0>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a34      	ldr	r2, [pc, #208]	; (8001544 <_Z12speed_changei+0x2b4>)
 8001474:	6013      	str	r3, [r2, #0]
			chassis_left_wheel_angspeed  = path_motor_speed[1];
 8001476:	4b32      	ldr	r3, [pc, #200]	; (8001540 <_Z12speed_changei+0x2b0>)
 8001478:	685b      	ldr	r3, [r3, #4]
 800147a:	4a33      	ldr	r2, [pc, #204]	; (8001548 <_Z12speed_changei+0x2b8>)
 800147c:	6013      	str	r3, [r2, #0]
}
 800147e:	e13b      	b.n	80016f8 <_Z12speed_changei+0x468>
		else if(path_motor_speed[0] * path_motor_speed[1] == 0 || (std::abs(last_x) < 1 && std::abs(last_y) < 1)){
 8001480:	4b2f      	ldr	r3, [pc, #188]	; (8001540 <_Z12speed_changei+0x2b0>)
 8001482:	ed93 7a00 	vldr	s14, [r3]
 8001486:	4b2e      	ldr	r3, [pc, #184]	; (8001540 <_Z12speed_changei+0x2b0>)
 8001488:	edd3 7a01 	vldr	s15, [r3, #4]
 800148c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001490:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001494:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001498:	d01f      	beq.n	80014da <_Z12speed_changei+0x24a>
 800149a:	4b22      	ldr	r3, [pc, #136]	; (8001524 <_Z12speed_changei+0x294>)
 800149c:	edd3 7a00 	vldr	s15, [r3]
 80014a0:	eeb0 0a67 	vmov.f32	s0, s15
 80014a4:	f7ff fcd8 	bl	8000e58 <_ZSt3absf>
 80014a8:	eef0 7a40 	vmov.f32	s15, s0
 80014ac:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014b0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014b8:	d511      	bpl.n	80014de <_Z12speed_changei+0x24e>
 80014ba:	4b1b      	ldr	r3, [pc, #108]	; (8001528 <_Z12speed_changei+0x298>)
 80014bc:	edd3 7a00 	vldr	s15, [r3]
 80014c0:	eeb0 0a67 	vmov.f32	s0, s15
 80014c4:	f7ff fcc8 	bl	8000e58 <_ZSt3absf>
 80014c8:	eef0 7a40 	vmov.f32	s15, s0
 80014cc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80014d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014d8:	d501      	bpl.n	80014de <_Z12speed_changei+0x24e>
 80014da:	2301      	movs	r3, #1
 80014dc:	e000      	b.n	80014e0 <_Z12speed_changei+0x250>
 80014de:	2300      	movs	r3, #0
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d033      	beq.n	800154c <_Z12speed_changei+0x2bc>
			chassis_right_wheel_angspeed = 0;
 80014e4:	4b17      	ldr	r3, [pc, #92]	; (8001544 <_Z12speed_changei+0x2b4>)
 80014e6:	f04f 0200 	mov.w	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
			chassis_left_wheel_angspeed  = 0;
 80014ec:	4b16      	ldr	r3, [pc, #88]	; (8001548 <_Z12speed_changei+0x2b8>)
 80014ee:	f04f 0200 	mov.w	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
			arrive = 1;
 80014f4:	4b11      	ldr	r3, [pc, #68]	; (800153c <_Z12speed_changei+0x2ac>)
 80014f6:	2201      	movs	r2, #1
 80014f8:	701a      	strb	r2, [r3, #0]
}
 80014fa:	e0fd      	b.n	80016f8 <_Z12speed_changei+0x468>
 80014fc:	f3af 8000 	nop.w
 8001500:	47ae147b 	.word	0x47ae147b
 8001504:	3f947ae1 	.word	0x3f947ae1
 8001508:	1d5afe90 	.word	0x1d5afe90
 800150c:	3fb6fa7e 	.word	0x3fb6fa7e
 8001510:	33333333 	.word	0x33333333
 8001514:	3fd33333 	.word	0x3fd33333
 8001518:	47ae147b 	.word	0x47ae147b
 800151c:	3f847ae1 	.word	0x3f847ae1
 8001520:	20000190 	.word	0x20000190
 8001524:	2000017c 	.word	0x2000017c
 8001528:	20000180 	.word	0x20000180
 800152c:	20000188 	.word	0x20000188
 8001530:	42a00000 	.word	0x42a00000
 8001534:	20000184 	.word	0x20000184
 8001538:	2000018c 	.word	0x2000018c
 800153c:	20000194 	.word	0x20000194
 8001540:	2000042c 	.word	0x2000042c
 8001544:	2000014c 	.word	0x2000014c
 8001548:	20000150 	.word	0x20000150
		else if((!path_dis_x && last_y > 15) || (!path_dis_y && last_x > 15)){
 800154c:	4b6e      	ldr	r3, [pc, #440]	; (8001708 <_Z12speed_changei+0x478>)
 800154e:	edd3 7a00 	vldr	s15, [r3]
 8001552:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800155a:	d109      	bne.n	8001570 <_Z12speed_changei+0x2e0>
 800155c:	4b6b      	ldr	r3, [pc, #428]	; (800170c <_Z12speed_changei+0x47c>)
 800155e:	edd3 7a00 	vldr	s15, [r3]
 8001562:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 8001566:	eef4 7ac7 	vcmpe.f32	s15, s14
 800156a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800156e:	dc11      	bgt.n	8001594 <_Z12speed_changei+0x304>
 8001570:	4b67      	ldr	r3, [pc, #412]	; (8001710 <_Z12speed_changei+0x480>)
 8001572:	edd3 7a00 	vldr	s15, [r3]
 8001576:	eef5 7a40 	vcmp.f32	s15, #0.0
 800157a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800157e:	d147      	bne.n	8001610 <_Z12speed_changei+0x380>
 8001580:	4b64      	ldr	r3, [pc, #400]	; (8001714 <_Z12speed_changei+0x484>)
 8001582:	edd3 7a00 	vldr	s15, [r3]
 8001586:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800158a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800158e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001592:	dd3d      	ble.n	8001610 <_Z12speed_changei+0x380>
			if(chassis_right_wheel_angspeed <= path_motor_speed[0])
 8001594:	4b60      	ldr	r3, [pc, #384]	; (8001718 <_Z12speed_changei+0x488>)
 8001596:	ed93 7a00 	vldr	s14, [r3]
 800159a:	4b60      	ldr	r3, [pc, #384]	; (800171c <_Z12speed_changei+0x48c>)
 800159c:	edd3 7a00 	vldr	s15, [r3]
 80015a0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015a8:	db12      	blt.n	80015d0 <_Z12speed_changei+0x340>
				chassis_right_wheel_angspeed += 0.001;
 80015aa:	4b5c      	ldr	r3, [pc, #368]	; (800171c <_Z12speed_changei+0x48c>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f7fe ff8e 	bl	80004d0 <__aeabi_f2d>
 80015b4:	a352      	add	r3, pc, #328	; (adr r3, 8001700 <_Z12speed_changei+0x470>)
 80015b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015ba:	f7fe fe2b 	bl	8000214 <__adddf3>
 80015be:	4602      	mov	r2, r0
 80015c0:	460b      	mov	r3, r1
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	f7ff fa75 	bl	8000ab4 <__aeabi_d2f>
 80015ca:	4603      	mov	r3, r0
 80015cc:	4a53      	ldr	r2, [pc, #332]	; (800171c <_Z12speed_changei+0x48c>)
 80015ce:	6013      	str	r3, [r2, #0]
			if(chassis_left_wheel_angspeed <= path_motor_speed[1])
 80015d0:	4b51      	ldr	r3, [pc, #324]	; (8001718 <_Z12speed_changei+0x488>)
 80015d2:	ed93 7a01 	vldr	s14, [r3, #4]
 80015d6:	4b52      	ldr	r3, [pc, #328]	; (8001720 <_Z12speed_changei+0x490>)
 80015d8:	edd3 7a00 	vldr	s15, [r3]
 80015dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015e4:	f2c0 8088 	blt.w	80016f8 <_Z12speed_changei+0x468>
				chassis_left_wheel_angspeed += 0.001;
 80015e8:	4b4d      	ldr	r3, [pc, #308]	; (8001720 <_Z12speed_changei+0x490>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4618      	mov	r0, r3
 80015ee:	f7fe ff6f 	bl	80004d0 <__aeabi_f2d>
 80015f2:	a343      	add	r3, pc, #268	; (adr r3, 8001700 <_Z12speed_changei+0x470>)
 80015f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015f8:	f7fe fe0c 	bl	8000214 <__adddf3>
 80015fc:	4602      	mov	r2, r0
 80015fe:	460b      	mov	r3, r1
 8001600:	4610      	mov	r0, r2
 8001602:	4619      	mov	r1, r3
 8001604:	f7ff fa56 	bl	8000ab4 <__aeabi_d2f>
 8001608:	4603      	mov	r3, r0
 800160a:	4a45      	ldr	r2, [pc, #276]	; (8001720 <_Z12speed_changei+0x490>)
 800160c:	6013      	str	r3, [r2, #0]
			if(chassis_left_wheel_angspeed <= path_motor_speed[1])
 800160e:	e073      	b.n	80016f8 <_Z12speed_changei+0x468>
		else if((!path_dis_x && last_y < 15) || (!path_dis_y && last_x < 15)){
 8001610:	4b3d      	ldr	r3, [pc, #244]	; (8001708 <_Z12speed_changei+0x478>)
 8001612:	edd3 7a00 	vldr	s15, [r3]
 8001616:	eef5 7a40 	vcmp.f32	s15, #0.0
 800161a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800161e:	d109      	bne.n	8001634 <_Z12speed_changei+0x3a4>
 8001620:	4b3a      	ldr	r3, [pc, #232]	; (800170c <_Z12speed_changei+0x47c>)
 8001622:	edd3 7a00 	vldr	s15, [r3]
 8001626:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800162a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800162e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001632:	d412      	bmi.n	800165a <_Z12speed_changei+0x3ca>
 8001634:	4b36      	ldr	r3, [pc, #216]	; (8001710 <_Z12speed_changei+0x480>)
 8001636:	edd3 7a00 	vldr	s15, [r3]
 800163a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800163e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001642:	d159      	bne.n	80016f8 <_Z12speed_changei+0x468>
 8001644:	4b33      	ldr	r3, [pc, #204]	; (8001714 <_Z12speed_changei+0x484>)
 8001646:	edd3 7a00 	vldr	s15, [r3]
 800164a:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 800164e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001652:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001656:	d400      	bmi.n	800165a <_Z12speed_changei+0x3ca>
}
 8001658:	e04e      	b.n	80016f8 <_Z12speed_changei+0x468>
			if(chassis_right_wheel_angspeed >= path_motor_speed[0] / 5)
 800165a:	4b2f      	ldr	r3, [pc, #188]	; (8001718 <_Z12speed_changei+0x488>)
 800165c:	edd3 7a00 	vldr	s15, [r3]
 8001660:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 8001664:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001668:	4b2c      	ldr	r3, [pc, #176]	; (800171c <_Z12speed_changei+0x48c>)
 800166a:	edd3 7a00 	vldr	s15, [r3]
 800166e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001672:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001676:	d812      	bhi.n	800169e <_Z12speed_changei+0x40e>
				chassis_right_wheel_angspeed -= 0.001;
 8001678:	4b28      	ldr	r3, [pc, #160]	; (800171c <_Z12speed_changei+0x48c>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4618      	mov	r0, r3
 800167e:	f7fe ff27 	bl	80004d0 <__aeabi_f2d>
 8001682:	a31f      	add	r3, pc, #124	; (adr r3, 8001700 <_Z12speed_changei+0x470>)
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	f7fe fdc2 	bl	8000210 <__aeabi_dsub>
 800168c:	4602      	mov	r2, r0
 800168e:	460b      	mov	r3, r1
 8001690:	4610      	mov	r0, r2
 8001692:	4619      	mov	r1, r3
 8001694:	f7ff fa0e 	bl	8000ab4 <__aeabi_d2f>
 8001698:	4603      	mov	r3, r0
 800169a:	4a20      	ldr	r2, [pc, #128]	; (800171c <_Z12speed_changei+0x48c>)
 800169c:	6013      	str	r3, [r2, #0]
			if(chassis_left_wheel_angspeed >= path_motor_speed[1] / 5)
 800169e:	4b1e      	ldr	r3, [pc, #120]	; (8001718 <_Z12speed_changei+0x488>)
 80016a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80016a4:	eef1 6a04 	vmov.f32	s13, #20	; 0x40a00000  5.0
 80016a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016ac:	4b1c      	ldr	r3, [pc, #112]	; (8001720 <_Z12speed_changei+0x490>)
 80016ae:	edd3 7a00 	vldr	s15, [r3]
 80016b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80016b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80016ba:	d900      	bls.n	80016be <_Z12speed_changei+0x42e>
}
 80016bc:	e01c      	b.n	80016f8 <_Z12speed_changei+0x468>
				chassis_left_wheel_angspeed -= 0.001;
 80016be:	4b18      	ldr	r3, [pc, #96]	; (8001720 <_Z12speed_changei+0x490>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4618      	mov	r0, r3
 80016c4:	f7fe ff04 	bl	80004d0 <__aeabi_f2d>
 80016c8:	a30d      	add	r3, pc, #52	; (adr r3, 8001700 <_Z12speed_changei+0x470>)
 80016ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016ce:	f7fe fd9f 	bl	8000210 <__aeabi_dsub>
 80016d2:	4602      	mov	r2, r0
 80016d4:	460b      	mov	r3, r1
 80016d6:	4610      	mov	r0, r2
 80016d8:	4619      	mov	r1, r3
 80016da:	f7ff f9eb 	bl	8000ab4 <__aeabi_d2f>
 80016de:	4603      	mov	r3, r0
 80016e0:	4a0f      	ldr	r2, [pc, #60]	; (8001720 <_Z12speed_changei+0x490>)
 80016e2:	6013      	str	r3, [r2, #0]
}
 80016e4:	e008      	b.n	80016f8 <_Z12speed_changei+0x468>
		chassis_right_wheel_angspeed = 0;
 80016e6:	4b0d      	ldr	r3, [pc, #52]	; (800171c <_Z12speed_changei+0x48c>)
 80016e8:	f04f 0200 	mov.w	r2, #0
 80016ec:	601a      	str	r2, [r3, #0]
		chassis_left_wheel_angspeed  = 0;
 80016ee:	4b0c      	ldr	r3, [pc, #48]	; (8001720 <_Z12speed_changei+0x490>)
 80016f0:	f04f 0200 	mov.w	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]
}
 80016f6:	e7ff      	b.n	80016f8 <_Z12speed_changei+0x468>
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	d2f1a9fc 	.word	0xd2f1a9fc
 8001704:	3f50624d 	.word	0x3f50624d
 8001708:	20000434 	.word	0x20000434
 800170c:	20000180 	.word	0x20000180
 8001710:	20000438 	.word	0x20000438
 8001714:	2000017c 	.word	0x2000017c
 8001718:	2000042c 	.word	0x2000042c
 800171c:	2000014c 	.word	0x2000014c
 8001720:	20000150 	.word	0x20000150

08001724 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001728:	f001 f9f6 	bl	8002b18 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800172c:	f000 f818 	bl	8001760 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001730:	f000 fbd6 	bl	8001ee0 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001734:	f000 f882 	bl	800183c <MX_ADC1_Init>
  MX_TIM1_Init();
 8001738:	f000 f926 	bl	8001988 <MX_TIM1_Init>
  MX_TIM2_Init();
 800173c:	f000 f9cc 	bl	8001ad8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001740:	f000 fa1e 	bl	8001b80 <MX_TIM3_Init>
  MX_TIM4_Init();
 8001744:	f000 fa70 	bl	8001c28 <MX_TIM4_Init>
  MX_TIM8_Init();
 8001748:	f000 faf8 	bl	8001d3c <MX_TIM8_Init>
  MX_TIM9_Init();
 800174c:	f000 fb4e 	bl	8001dec <MX_TIM9_Init>
  MX_UART4_Init();
 8001750:	f000 fb9c 	bl	8001e8c <MX_UART4_Init>
  MX_TIM7_Init();
 8001754:	f000 fabc 	bl	8001cd0 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */
  main_function();
 8001758:	f000 fc52 	bl	8002000 <main_function>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800175c:	e7fe      	b.n	800175c <main+0x38>
	...

08001760 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b094      	sub	sp, #80	; 0x50
 8001764:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001766:	f107 031c 	add.w	r3, r7, #28
 800176a:	2234      	movs	r2, #52	; 0x34
 800176c:	2100      	movs	r1, #0
 800176e:	4618      	mov	r0, r3
 8001770:	f004 fe68 	bl	8006444 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001774:	f107 0308 	add.w	r3, r7, #8
 8001778:	2200      	movs	r2, #0
 800177a:	601a      	str	r2, [r3, #0]
 800177c:	605a      	str	r2, [r3, #4]
 800177e:	609a      	str	r2, [r3, #8]
 8001780:	60da      	str	r2, [r3, #12]
 8001782:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001784:	2300      	movs	r3, #0
 8001786:	607b      	str	r3, [r7, #4]
 8001788:	4b2a      	ldr	r3, [pc, #168]	; (8001834 <SystemClock_Config+0xd4>)
 800178a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800178c:	4a29      	ldr	r2, [pc, #164]	; (8001834 <SystemClock_Config+0xd4>)
 800178e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001792:	6413      	str	r3, [r2, #64]	; 0x40
 8001794:	4b27      	ldr	r3, [pc, #156]	; (8001834 <SystemClock_Config+0xd4>)
 8001796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001798:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800179c:	607b      	str	r3, [r7, #4]
 800179e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80017a0:	2300      	movs	r3, #0
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	4b24      	ldr	r3, [pc, #144]	; (8001838 <SystemClock_Config+0xd8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80017ac:	4a22      	ldr	r2, [pc, #136]	; (8001838 <SystemClock_Config+0xd8>)
 80017ae:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b20      	ldr	r3, [pc, #128]	; (8001838 <SystemClock_Config+0xd8>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80017bc:	603b      	str	r3, [r7, #0]
 80017be:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80017c0:	2302      	movs	r3, #2
 80017c2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80017c4:	2301      	movs	r3, #1
 80017c6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80017c8:	2310      	movs	r3, #16
 80017ca:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80017cc:	2302      	movs	r3, #2
 80017ce:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80017d0:	2300      	movs	r3, #0
 80017d2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80017d4:	2310      	movs	r3, #16
 80017d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80017d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80017dc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80017de:	2304      	movs	r3, #4
 80017e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80017e2:	2302      	movs	r3, #2
 80017e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80017e6:	2302      	movs	r3, #2
 80017e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80017ea:	f107 031c 	add.w	r3, r7, #28
 80017ee:	4618      	mov	r0, r3
 80017f0:	f002 fa80 	bl	8003cf4 <HAL_RCC_OscConfig>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80017fa:	f000 fbef 	bl	8001fdc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80017fe:	230f      	movs	r3, #15
 8001800:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001802:	2302      	movs	r3, #2
 8001804:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001806:	2300      	movs	r3, #0
 8001808:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800180a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800180e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001810:	2300      	movs	r3, #0
 8001812:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001814:	f107 0308 	add.w	r3, r7, #8
 8001818:	2102      	movs	r1, #2
 800181a:	4618      	mov	r0, r3
 800181c:	f001 ff20 	bl	8003660 <HAL_RCC_ClockConfig>
 8001820:	4603      	mov	r3, r0
 8001822:	2b00      	cmp	r3, #0
 8001824:	d001      	beq.n	800182a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8001826:	f000 fbd9 	bl	8001fdc <Error_Handler>
  }
}
 800182a:	bf00      	nop
 800182c:	3750      	adds	r7, #80	; 0x50
 800182e:	46bd      	mov	sp, r7
 8001830:	bd80      	pop	{r7, pc}
 8001832:	bf00      	nop
 8001834:	40023800 	.word	0x40023800
 8001838:	40007000 	.word	0x40007000

0800183c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b084      	sub	sp, #16
 8001840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001842:	463b      	mov	r3, r7
 8001844:	2200      	movs	r2, #0
 8001846:	601a      	str	r2, [r3, #0]
 8001848:	605a      	str	r2, [r3, #4]
 800184a:	609a      	str	r2, [r3, #8]
 800184c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800184e:	4b4b      	ldr	r3, [pc, #300]	; (800197c <MX_ADC1_Init+0x140>)
 8001850:	4a4b      	ldr	r2, [pc, #300]	; (8001980 <MX_ADC1_Init+0x144>)
 8001852:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001854:	4b49      	ldr	r3, [pc, #292]	; (800197c <MX_ADC1_Init+0x140>)
 8001856:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800185a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800185c:	4b47      	ldr	r3, [pc, #284]	; (800197c <MX_ADC1_Init+0x140>)
 800185e:	2200      	movs	r2, #0
 8001860:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8001862:	4b46      	ldr	r3, [pc, #280]	; (800197c <MX_ADC1_Init+0x140>)
 8001864:	2201      	movs	r2, #1
 8001866:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001868:	4b44      	ldr	r3, [pc, #272]	; (800197c <MX_ADC1_Init+0x140>)
 800186a:	2200      	movs	r2, #0
 800186c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800186e:	4b43      	ldr	r3, [pc, #268]	; (800197c <MX_ADC1_Init+0x140>)
 8001870:	2200      	movs	r2, #0
 8001872:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001876:	4b41      	ldr	r3, [pc, #260]	; (800197c <MX_ADC1_Init+0x140>)
 8001878:	2200      	movs	r2, #0
 800187a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800187c:	4b3f      	ldr	r3, [pc, #252]	; (800197c <MX_ADC1_Init+0x140>)
 800187e:	4a41      	ldr	r2, [pc, #260]	; (8001984 <MX_ADC1_Init+0x148>)
 8001880:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001882:	4b3e      	ldr	r3, [pc, #248]	; (800197c <MX_ADC1_Init+0x140>)
 8001884:	2200      	movs	r2, #0
 8001886:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 7;
 8001888:	4b3c      	ldr	r3, [pc, #240]	; (800197c <MX_ADC1_Init+0x140>)
 800188a:	2207      	movs	r2, #7
 800188c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800188e:	4b3b      	ldr	r3, [pc, #236]	; (800197c <MX_ADC1_Init+0x140>)
 8001890:	2200      	movs	r2, #0
 8001892:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001896:	4b39      	ldr	r3, [pc, #228]	; (800197c <MX_ADC1_Init+0x140>)
 8001898:	2201      	movs	r2, #1
 800189a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800189c:	4837      	ldr	r0, [pc, #220]	; (800197c <MX_ADC1_Init+0x140>)
 800189e:	f001 f9ad 	bl	8002bfc <HAL_ADC_Init>
 80018a2:	4603      	mov	r3, r0
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d001      	beq.n	80018ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80018a8:	f000 fb98 	bl	8001fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80018ac:	2300      	movs	r3, #0
 80018ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80018b0:	2301      	movs	r3, #1
 80018b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80018b4:	2300      	movs	r3, #0
 80018b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018b8:	463b      	mov	r3, r7
 80018ba:	4619      	mov	r1, r3
 80018bc:	482f      	ldr	r0, [pc, #188]	; (800197c <MX_ADC1_Init+0x140>)
 80018be:	f001 f9e1 	bl	8002c84 <HAL_ADC_ConfigChannel>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d001      	beq.n	80018cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80018c8:	f000 fb88 	bl	8001fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80018cc:	2301      	movs	r3, #1
 80018ce:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80018d0:	2302      	movs	r3, #2
 80018d2:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018d4:	463b      	mov	r3, r7
 80018d6:	4619      	mov	r1, r3
 80018d8:	4828      	ldr	r0, [pc, #160]	; (800197c <MX_ADC1_Init+0x140>)
 80018da:	f001 f9d3 	bl	8002c84 <HAL_ADC_ConfigChannel>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 80018e4:	f000 fb7a 	bl	8001fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80018e8:	2304      	movs	r3, #4
 80018ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80018ec:	2303      	movs	r3, #3
 80018ee:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80018f0:	463b      	mov	r3, r7
 80018f2:	4619      	mov	r1, r3
 80018f4:	4821      	ldr	r0, [pc, #132]	; (800197c <MX_ADC1_Init+0x140>)
 80018f6:	f001 f9c5 	bl	8002c84 <HAL_ADC_ConfigChannel>
 80018fa:	4603      	mov	r3, r0
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8001900:	f000 fb6c 	bl	8001fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001904:	2306      	movs	r3, #6
 8001906:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8001908:	2304      	movs	r3, #4
 800190a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800190c:	463b      	mov	r3, r7
 800190e:	4619      	mov	r1, r3
 8001910:	481a      	ldr	r0, [pc, #104]	; (800197c <MX_ADC1_Init+0x140>)
 8001912:	f001 f9b7 	bl	8002c84 <HAL_ADC_ConfigChannel>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 800191c:	f000 fb5e 	bl	8001fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001920:	2307      	movs	r3, #7
 8001922:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 5;
 8001924:	2305      	movs	r3, #5
 8001926:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001928:	463b      	mov	r3, r7
 800192a:	4619      	mov	r1, r3
 800192c:	4813      	ldr	r0, [pc, #76]	; (800197c <MX_ADC1_Init+0x140>)
 800192e:	f001 f9a9 	bl	8002c84 <HAL_ADC_ConfigChannel>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_ADC1_Init+0x100>
  {
    Error_Handler();
 8001938:	f000 fb50 	bl	8001fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800193c:	2308      	movs	r3, #8
 800193e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 6;
 8001940:	2306      	movs	r3, #6
 8001942:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001944:	463b      	mov	r3, r7
 8001946:	4619      	mov	r1, r3
 8001948:	480c      	ldr	r0, [pc, #48]	; (800197c <MX_ADC1_Init+0x140>)
 800194a:	f001 f99b 	bl	8002c84 <HAL_ADC_ConfigChannel>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d001      	beq.n	8001958 <MX_ADC1_Init+0x11c>
  {
    Error_Handler();
 8001954:	f000 fb42 	bl	8001fdc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 8001958:	2309      	movs	r3, #9
 800195a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 7;
 800195c:	2307      	movs	r3, #7
 800195e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001960:	463b      	mov	r3, r7
 8001962:	4619      	mov	r1, r3
 8001964:	4805      	ldr	r0, [pc, #20]	; (800197c <MX_ADC1_Init+0x140>)
 8001966:	f001 f98d 	bl	8002c84 <HAL_ADC_ConfigChannel>
 800196a:	4603      	mov	r3, r0
 800196c:	2b00      	cmp	r3, #0
 800196e:	d001      	beq.n	8001974 <MX_ADC1_Init+0x138>
  {
    Error_Handler();
 8001970:	f000 fb34 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001974:	bf00      	nop
 8001976:	3710      	adds	r7, #16
 8001978:	46bd      	mov	sp, r7
 800197a:	bd80      	pop	{r7, pc}
 800197c:	20000198 	.word	0x20000198
 8001980:	40012000 	.word	0x40012000
 8001984:	0f000001 	.word	0x0f000001

08001988 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b092      	sub	sp, #72	; 0x48
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800198e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001998:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]
 80019a8:	615a      	str	r2, [r3, #20]
 80019aa:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80019ac:	1d3b      	adds	r3, r7, #4
 80019ae:	2220      	movs	r2, #32
 80019b0:	2100      	movs	r1, #0
 80019b2:	4618      	mov	r0, r3
 80019b4:	f004 fd46 	bl	8006444 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80019b8:	4b45      	ldr	r3, [pc, #276]	; (8001ad0 <MX_TIM1_Init+0x148>)
 80019ba:	4a46      	ldr	r2, [pc, #280]	; (8001ad4 <MX_TIM1_Init+0x14c>)
 80019bc:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80019be:	4b44      	ldr	r3, [pc, #272]	; (8001ad0 <MX_TIM1_Init+0x148>)
 80019c0:	2200      	movs	r2, #0
 80019c2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019c4:	4b42      	ldr	r3, [pc, #264]	; (8001ad0 <MX_TIM1_Init+0x148>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4199;
 80019ca:	4b41      	ldr	r3, [pc, #260]	; (8001ad0 <MX_TIM1_Init+0x148>)
 80019cc:	f241 0267 	movw	r2, #4199	; 0x1067
 80019d0:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019d2:	4b3f      	ldr	r3, [pc, #252]	; (8001ad0 <MX_TIM1_Init+0x148>)
 80019d4:	2200      	movs	r2, #0
 80019d6:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80019d8:	4b3d      	ldr	r3, [pc, #244]	; (8001ad0 <MX_TIM1_Init+0x148>)
 80019da:	2200      	movs	r2, #0
 80019dc:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019de:	4b3c      	ldr	r3, [pc, #240]	; (8001ad0 <MX_TIM1_Init+0x148>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80019e4:	483a      	ldr	r0, [pc, #232]	; (8001ad0 <MX_TIM1_Init+0x148>)
 80019e6:	f002 fce3 	bl	80043b0 <HAL_TIM_PWM_Init>
 80019ea:	4603      	mov	r3, r0
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d001      	beq.n	80019f4 <MX_TIM1_Init+0x6c>
  {
    Error_Handler();
 80019f0:	f000 faf4 	bl	8001fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80019f4:	2300      	movs	r3, #0
 80019f6:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80019f8:	2300      	movs	r3, #0
 80019fa:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80019fc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001a00:	4619      	mov	r1, r3
 8001a02:	4833      	ldr	r0, [pc, #204]	; (8001ad0 <MX_TIM1_Init+0x148>)
 8001a04:	f003 fb7e 	bl	8005104 <HAL_TIMEx_MasterConfigSynchronization>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <MX_TIM1_Init+0x8a>
  {
    Error_Handler();
 8001a0e:	f000 fae5 	bl	8001fdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a12:	2360      	movs	r3, #96	; 0x60
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001a16:	2300      	movs	r3, #0
 8001a18:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a22:	2300      	movs	r3, #0
 8001a24:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001a26:	2300      	movs	r3, #0
 8001a28:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a2e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a32:	2200      	movs	r2, #0
 8001a34:	4619      	mov	r1, r3
 8001a36:	4826      	ldr	r0, [pc, #152]	; (8001ad0 <MX_TIM1_Init+0x148>)
 8001a38:	f003 f80e 	bl	8004a58 <HAL_TIM_PWM_ConfigChannel>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <MX_TIM1_Init+0xbe>
  {
    Error_Handler();
 8001a42:	f000 facb 	bl	8001fdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001a46:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a4a:	2204      	movs	r2, #4
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4820      	ldr	r0, [pc, #128]	; (8001ad0 <MX_TIM1_Init+0x148>)
 8001a50:	f003 f802 	bl	8004a58 <HAL_TIM_PWM_ConfigChannel>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001a5a:	f000 fabf 	bl	8001fdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001a5e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a62:	2208      	movs	r2, #8
 8001a64:	4619      	mov	r1, r3
 8001a66:	481a      	ldr	r0, [pc, #104]	; (8001ad0 <MX_TIM1_Init+0x148>)
 8001a68:	f002 fff6 	bl	8004a58 <HAL_TIM_PWM_ConfigChannel>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_TIM1_Init+0xee>
  {
    Error_Handler();
 8001a72:	f000 fab3 	bl	8001fdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001a76:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7a:	220c      	movs	r2, #12
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	4814      	ldr	r0, [pc, #80]	; (8001ad0 <MX_TIM1_Init+0x148>)
 8001a80:	f002 ffea 	bl	8004a58 <HAL_TIM_PWM_ConfigChannel>
 8001a84:	4603      	mov	r3, r0
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d001      	beq.n	8001a8e <MX_TIM1_Init+0x106>
  {
    Error_Handler();
 8001a8a:	f000 faa7 	bl	8001fdc <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001a92:	2300      	movs	r3, #0
 8001a94:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001aa2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001aa6:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001aac:	1d3b      	adds	r3, r7, #4
 8001aae:	4619      	mov	r1, r3
 8001ab0:	4807      	ldr	r0, [pc, #28]	; (8001ad0 <MX_TIM1_Init+0x148>)
 8001ab2:	f003 fba3 	bl	80051fc <HAL_TIMEx_ConfigBreakDeadTime>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <MX_TIM1_Init+0x138>
  {
    Error_Handler();
 8001abc:	f000 fa8e 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001ac0:	4803      	ldr	r0, [pc, #12]	; (8001ad0 <MX_TIM1_Init+0x148>)
 8001ac2:	f000 ff11 	bl	80028e8 <HAL_TIM_MspPostInit>

}
 8001ac6:	bf00      	nop
 8001ac8:	3748      	adds	r7, #72	; 0x48
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
 8001ace:	bf00      	nop
 8001ad0:	200001e0 	.word	0x200001e0
 8001ad4:	40010000 	.word	0x40010000

08001ad8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b08c      	sub	sp, #48	; 0x30
 8001adc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001ade:	f107 030c 	add.w	r3, r7, #12
 8001ae2:	2224      	movs	r2, #36	; 0x24
 8001ae4:	2100      	movs	r1, #0
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	f004 fcac 	bl	8006444 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001aec:	1d3b      	adds	r3, r7, #4
 8001aee:	2200      	movs	r2, #0
 8001af0:	601a      	str	r2, [r3, #0]
 8001af2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001af4:	4b21      	ldr	r3, [pc, #132]	; (8001b7c <MX_TIM2_Init+0xa4>)
 8001af6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001afa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001afc:	4b1f      	ldr	r3, [pc, #124]	; (8001b7c <MX_TIM2_Init+0xa4>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b02:	4b1e      	ldr	r3, [pc, #120]	; (8001b7c <MX_TIM2_Init+0xa4>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001b08:	4b1c      	ldr	r3, [pc, #112]	; (8001b7c <MX_TIM2_Init+0xa4>)
 8001b0a:	f04f 32ff 	mov.w	r2, #4294967295
 8001b0e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b10:	4b1a      	ldr	r3, [pc, #104]	; (8001b7c <MX_TIM2_Init+0xa4>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b16:	4b19      	ldr	r3, [pc, #100]	; (8001b7c <MX_TIM2_Init+0xa4>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001b1c:	2303      	movs	r3, #3
 8001b1e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001b20:	2300      	movs	r3, #0
 8001b22:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001b24:	2301      	movs	r3, #1
 8001b26:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001b28:	2300      	movs	r3, #0
 8001b2a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001b30:	2300      	movs	r3, #0
 8001b32:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001b34:	2301      	movs	r3, #1
 8001b36:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001b40:	f107 030c 	add.w	r3, r7, #12
 8001b44:	4619      	mov	r1, r3
 8001b46:	480d      	ldr	r0, [pc, #52]	; (8001b7c <MX_TIM2_Init+0xa4>)
 8001b48:	f002 fd4a 	bl	80045e0 <HAL_TIM_Encoder_Init>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001b52:	f000 fa43 	bl	8001fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b56:	2300      	movs	r3, #0
 8001b58:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b5e:	1d3b      	adds	r3, r7, #4
 8001b60:	4619      	mov	r1, r3
 8001b62:	4806      	ldr	r0, [pc, #24]	; (8001b7c <MX_TIM2_Init+0xa4>)
 8001b64:	f003 face 	bl	8005104 <HAL_TIMEx_MasterConfigSynchronization>
 8001b68:	4603      	mov	r3, r0
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d001      	beq.n	8001b72 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001b6e:	f000 fa35 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b72:	bf00      	nop
 8001b74:	3730      	adds	r7, #48	; 0x30
 8001b76:	46bd      	mov	sp, r7
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000228 	.word	0x20000228

08001b80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	b08c      	sub	sp, #48	; 0x30
 8001b84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001b86:	f107 030c 	add.w	r3, r7, #12
 8001b8a:	2224      	movs	r2, #36	; 0x24
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f004 fc58 	bl	8006444 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b94:	1d3b      	adds	r3, r7, #4
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
 8001b9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001b9c:	4b20      	ldr	r3, [pc, #128]	; (8001c20 <MX_TIM3_Init+0xa0>)
 8001b9e:	4a21      	ldr	r2, [pc, #132]	; (8001c24 <MX_TIM3_Init+0xa4>)
 8001ba0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ba2:	4b1f      	ldr	r3, [pc, #124]	; (8001c20 <MX_TIM3_Init+0xa0>)
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ba8:	4b1d      	ldr	r3, [pc, #116]	; (8001c20 <MX_TIM3_Init+0xa0>)
 8001baa:	2200      	movs	r2, #0
 8001bac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001bae:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <MX_TIM3_Init+0xa0>)
 8001bb0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001bb4:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <MX_TIM3_Init+0xa0>)
 8001bb8:	2200      	movs	r2, #0
 8001bba:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001bbc:	4b18      	ldr	r3, [pc, #96]	; (8001c20 <MX_TIM3_Init+0xa0>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001bca:	2301      	movs	r3, #1
 8001bcc:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001bce:	2300      	movs	r3, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001bd2:	2300      	movs	r3, #0
 8001bd4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001bde:	2300      	movs	r3, #0
 8001be0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001be2:	2300      	movs	r3, #0
 8001be4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001be6:	f107 030c 	add.w	r3, r7, #12
 8001bea:	4619      	mov	r1, r3
 8001bec:	480c      	ldr	r0, [pc, #48]	; (8001c20 <MX_TIM3_Init+0xa0>)
 8001bee:	f002 fcf7 	bl	80045e0 <HAL_TIM_Encoder_Init>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d001      	beq.n	8001bfc <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001bf8:	f000 f9f0 	bl	8001fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c04:	1d3b      	adds	r3, r7, #4
 8001c06:	4619      	mov	r1, r3
 8001c08:	4805      	ldr	r0, [pc, #20]	; (8001c20 <MX_TIM3_Init+0xa0>)
 8001c0a:	f003 fa7b 	bl	8005104 <HAL_TIMEx_MasterConfigSynchronization>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d001      	beq.n	8001c18 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001c14:	f000 f9e2 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001c18:	bf00      	nop
 8001c1a:	3730      	adds	r7, #48	; 0x30
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	20000270 	.word	0x20000270
 8001c24:	40000400 	.word	0x40000400

08001c28 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b08c      	sub	sp, #48	; 0x30
 8001c2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001c2e:	f107 030c 	add.w	r3, r7, #12
 8001c32:	2224      	movs	r2, #36	; 0x24
 8001c34:	2100      	movs	r1, #0
 8001c36:	4618      	mov	r0, r3
 8001c38:	f004 fc04 	bl	8006444 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c3c:	1d3b      	adds	r3, r7, #4
 8001c3e:	2200      	movs	r2, #0
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001c44:	4b20      	ldr	r3, [pc, #128]	; (8001cc8 <MX_TIM4_Init+0xa0>)
 8001c46:	4a21      	ldr	r2, [pc, #132]	; (8001ccc <MX_TIM4_Init+0xa4>)
 8001c48:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001c4a:	4b1f      	ldr	r3, [pc, #124]	; (8001cc8 <MX_TIM4_Init+0xa0>)
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c50:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <MX_TIM4_Init+0xa0>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001c56:	4b1c      	ldr	r3, [pc, #112]	; (8001cc8 <MX_TIM4_Init+0xa0>)
 8001c58:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001c5c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c5e:	4b1a      	ldr	r3, [pc, #104]	; (8001cc8 <MX_TIM4_Init+0xa0>)
 8001c60:	2200      	movs	r2, #0
 8001c62:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c64:	4b18      	ldr	r3, [pc, #96]	; (8001cc8 <MX_TIM4_Init+0xa0>)
 8001c66:	2200      	movs	r2, #0
 8001c68:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001c72:	2301      	movs	r3, #1
 8001c74:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001c76:	2300      	movs	r3, #0
 8001c78:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001c82:	2301      	movs	r3, #1
 8001c84:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001c86:	2300      	movs	r3, #0
 8001c88:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001c8e:	f107 030c 	add.w	r3, r7, #12
 8001c92:	4619      	mov	r1, r3
 8001c94:	480c      	ldr	r0, [pc, #48]	; (8001cc8 <MX_TIM4_Init+0xa0>)
 8001c96:	f002 fca3 	bl	80045e0 <HAL_TIM_Encoder_Init>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM4_Init+0x7c>
  {
    Error_Handler();
 8001ca0:	f000 f99c 	bl	8001fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ca8:	2300      	movs	r3, #0
 8001caa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001cac:	1d3b      	adds	r3, r7, #4
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4805      	ldr	r0, [pc, #20]	; (8001cc8 <MX_TIM4_Init+0xa0>)
 8001cb2:	f003 fa27 	bl	8005104 <HAL_TIMEx_MasterConfigSynchronization>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d001      	beq.n	8001cc0 <MX_TIM4_Init+0x98>
  {
    Error_Handler();
 8001cbc:	f000 f98e 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001cc0:	bf00      	nop
 8001cc2:	3730      	adds	r7, #48	; 0x30
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}
 8001cc8:	200002b8 	.word	0x200002b8
 8001ccc:	40000800 	.word	0x40000800

08001cd0 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd6:	463b      	mov	r3, r7
 8001cd8:	2200      	movs	r2, #0
 8001cda:	601a      	str	r2, [r3, #0]
 8001cdc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001cde:	4b15      	ldr	r3, [pc, #84]	; (8001d34 <MX_TIM7_Init+0x64>)
 8001ce0:	4a15      	ldr	r2, [pc, #84]	; (8001d38 <MX_TIM7_Init+0x68>)
 8001ce2:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 83;
 8001ce4:	4b13      	ldr	r3, [pc, #76]	; (8001d34 <MX_TIM7_Init+0x64>)
 8001ce6:	2253      	movs	r2, #83	; 0x53
 8001ce8:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cea:	4b12      	ldr	r3, [pc, #72]	; (8001d34 <MX_TIM7_Init+0x64>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 999;
 8001cf0:	4b10      	ldr	r3, [pc, #64]	; (8001d34 <MX_TIM7_Init+0x64>)
 8001cf2:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001cf6:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cf8:	4b0e      	ldr	r3, [pc, #56]	; (8001d34 <MX_TIM7_Init+0x64>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001cfe:	480d      	ldr	r0, [pc, #52]	; (8001d34 <MX_TIM7_Init+0x64>)
 8001d00:	f002 fa96 	bl	8004230 <HAL_TIM_Base_Init>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM7_Init+0x3e>
  {
    Error_Handler();
 8001d0a:	f000 f967 	bl	8001fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001d16:	463b      	mov	r3, r7
 8001d18:	4619      	mov	r1, r3
 8001d1a:	4806      	ldr	r0, [pc, #24]	; (8001d34 <MX_TIM7_Init+0x64>)
 8001d1c:	f003 f9f2 	bl	8005104 <HAL_TIMEx_MasterConfigSynchronization>
 8001d20:	4603      	mov	r3, r0
 8001d22:	2b00      	cmp	r3, #0
 8001d24:	d001      	beq.n	8001d2a <MX_TIM7_Init+0x5a>
  {
    Error_Handler();
 8001d26:	f000 f959 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001d2a:	bf00      	nop
 8001d2c:	3708      	adds	r7, #8
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	bd80      	pop	{r7, pc}
 8001d32:	bf00      	nop
 8001d34:	20000300 	.word	0x20000300
 8001d38:	40001400 	.word	0x40001400

08001d3c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b08c      	sub	sp, #48	; 0x30
 8001d40:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d42:	f107 030c 	add.w	r3, r7, #12
 8001d46:	2224      	movs	r2, #36	; 0x24
 8001d48:	2100      	movs	r1, #0
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f004 fb7a 	bl	8006444 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d50:	1d3b      	adds	r3, r7, #4
 8001d52:	2200      	movs	r2, #0
 8001d54:	601a      	str	r2, [r3, #0]
 8001d56:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001d58:	4b22      	ldr	r3, [pc, #136]	; (8001de4 <MX_TIM8_Init+0xa8>)
 8001d5a:	4a23      	ldr	r2, [pc, #140]	; (8001de8 <MX_TIM8_Init+0xac>)
 8001d5c:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001d5e:	4b21      	ldr	r3, [pc, #132]	; (8001de4 <MX_TIM8_Init+0xa8>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d64:	4b1f      	ldr	r3, [pc, #124]	; (8001de4 <MX_TIM8_Init+0xa8>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 8001d6a:	4b1e      	ldr	r3, [pc, #120]	; (8001de4 <MX_TIM8_Init+0xa8>)
 8001d6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001d70:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d72:	4b1c      	ldr	r3, [pc, #112]	; (8001de4 <MX_TIM8_Init+0xa8>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001d78:	4b1a      	ldr	r3, [pc, #104]	; (8001de4 <MX_TIM8_Init+0xa8>)
 8001d7a:	2200      	movs	r2, #0
 8001d7c:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d7e:	4b19      	ldr	r3, [pc, #100]	; (8001de4 <MX_TIM8_Init+0xa8>)
 8001d80:	2200      	movs	r2, #0
 8001d82:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001d84:	2303      	movs	r3, #3
 8001d86:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001d90:	2300      	movs	r3, #0
 8001d92:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001d9c:	2301      	movs	r3, #1
 8001d9e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001da0:	2300      	movs	r3, #0
 8001da2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001da4:	2300      	movs	r3, #0
 8001da6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 8001da8:	f107 030c 	add.w	r3, r7, #12
 8001dac:	4619      	mov	r1, r3
 8001dae:	480d      	ldr	r0, [pc, #52]	; (8001de4 <MX_TIM8_Init+0xa8>)
 8001db0:	f002 fc16 	bl	80045e0 <HAL_TIM_Encoder_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM8_Init+0x82>
  {
    Error_Handler();
 8001dba:	f000 f90f 	bl	8001fdc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001dc6:	1d3b      	adds	r3, r7, #4
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4806      	ldr	r0, [pc, #24]	; (8001de4 <MX_TIM8_Init+0xa8>)
 8001dcc:	f003 f99a 	bl	8005104 <HAL_TIMEx_MasterConfigSynchronization>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_TIM8_Init+0x9e>
  {
    Error_Handler();
 8001dd6:	f000 f901 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	3730      	adds	r7, #48	; 0x30
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bd80      	pop	{r7, pc}
 8001de2:	bf00      	nop
 8001de4:	20000348 	.word	0x20000348
 8001de8:	40010400 	.word	0x40010400

08001dec <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	b088      	sub	sp, #32
 8001df0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 8001df2:	1d3b      	adds	r3, r7, #4
 8001df4:	2200      	movs	r2, #0
 8001df6:	601a      	str	r2, [r3, #0]
 8001df8:	605a      	str	r2, [r3, #4]
 8001dfa:	609a      	str	r2, [r3, #8]
 8001dfc:	60da      	str	r2, [r3, #12]
 8001dfe:	611a      	str	r2, [r3, #16]
 8001e00:	615a      	str	r2, [r3, #20]
 8001e02:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001e04:	4b1f      	ldr	r3, [pc, #124]	; (8001e84 <MX_TIM9_Init+0x98>)
 8001e06:	4a20      	ldr	r2, [pc, #128]	; (8001e88 <MX_TIM9_Init+0x9c>)
 8001e08:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001e0a:	4b1e      	ldr	r3, [pc, #120]	; (8001e84 <MX_TIM9_Init+0x98>)
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e10:	4b1c      	ldr	r3, [pc, #112]	; (8001e84 <MX_TIM9_Init+0x98>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001e16:	4b1b      	ldr	r3, [pc, #108]	; (8001e84 <MX_TIM9_Init+0x98>)
 8001e18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001e1c:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e1e:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <MX_TIM9_Init+0x98>)
 8001e20:	2200      	movs	r2, #0
 8001e22:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e24:	4b17      	ldr	r3, [pc, #92]	; (8001e84 <MX_TIM9_Init+0x98>)
 8001e26:	2200      	movs	r2, #0
 8001e28:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 8001e2a:	4816      	ldr	r0, [pc, #88]	; (8001e84 <MX_TIM9_Init+0x98>)
 8001e2c:	f002 fac0 	bl	80043b0 <HAL_TIM_PWM_Init>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d001      	beq.n	8001e3a <MX_TIM9_Init+0x4e>
  {
    Error_Handler();
 8001e36:	f000 f8d1 	bl	8001fdc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001e3a:	2360      	movs	r3, #96	; 0x60
 8001e3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001e42:	2300      	movs	r3, #0
 8001e44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001e46:	2300      	movs	r3, #0
 8001e48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	4619      	mov	r1, r3
 8001e50:	480c      	ldr	r0, [pc, #48]	; (8001e84 <MX_TIM9_Init+0x98>)
 8001e52:	f002 fe01 	bl	8004a58 <HAL_TIM_PWM_ConfigChannel>
 8001e56:	4603      	mov	r3, r0
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d001      	beq.n	8001e60 <MX_TIM9_Init+0x74>
  {
    Error_Handler();
 8001e5c:	f000 f8be 	bl	8001fdc <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001e60:	1d3b      	adds	r3, r7, #4
 8001e62:	2204      	movs	r2, #4
 8001e64:	4619      	mov	r1, r3
 8001e66:	4807      	ldr	r0, [pc, #28]	; (8001e84 <MX_TIM9_Init+0x98>)
 8001e68:	f002 fdf6 	bl	8004a58 <HAL_TIM_PWM_ConfigChannel>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d001      	beq.n	8001e76 <MX_TIM9_Init+0x8a>
  {
    Error_Handler();
 8001e72:	f000 f8b3 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001e76:	4803      	ldr	r0, [pc, #12]	; (8001e84 <MX_TIM9_Init+0x98>)
 8001e78:	f000 fd36 	bl	80028e8 <HAL_TIM_MspPostInit>

}
 8001e7c:	bf00      	nop
 8001e7e:	3720      	adds	r7, #32
 8001e80:	46bd      	mov	sp, r7
 8001e82:	bd80      	pop	{r7, pc}
 8001e84:	20000390 	.word	0x20000390
 8001e88:	40014000 	.word	0x40014000

08001e8c <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8001e90:	4b11      	ldr	r3, [pc, #68]	; (8001ed8 <MX_UART4_Init+0x4c>)
 8001e92:	4a12      	ldr	r2, [pc, #72]	; (8001edc <MX_UART4_Init+0x50>)
 8001e94:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001e96:	4b10      	ldr	r3, [pc, #64]	; (8001ed8 <MX_UART4_Init+0x4c>)
 8001e98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e9c:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001e9e:	4b0e      	ldr	r3, [pc, #56]	; (8001ed8 <MX_UART4_Init+0x4c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001ea4:	4b0c      	ldr	r3, [pc, #48]	; (8001ed8 <MX_UART4_Init+0x4c>)
 8001ea6:	2200      	movs	r2, #0
 8001ea8:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001eaa:	4b0b      	ldr	r3, [pc, #44]	; (8001ed8 <MX_UART4_Init+0x4c>)
 8001eac:	2200      	movs	r2, #0
 8001eae:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001eb0:	4b09      	ldr	r3, [pc, #36]	; (8001ed8 <MX_UART4_Init+0x4c>)
 8001eb2:	220c      	movs	r2, #12
 8001eb4:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001eb6:	4b08      	ldr	r3, [pc, #32]	; (8001ed8 <MX_UART4_Init+0x4c>)
 8001eb8:	2200      	movs	r2, #0
 8001eba:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001ebc:	4b06      	ldr	r3, [pc, #24]	; (8001ed8 <MX_UART4_Init+0x4c>)
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001ec2:	4805      	ldr	r0, [pc, #20]	; (8001ed8 <MX_UART4_Init+0x4c>)
 8001ec4:	f003 fa00 	bl	80052c8 <HAL_UART_Init>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d001      	beq.n	8001ed2 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001ece:	f000 f885 	bl	8001fdc <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	200003d8 	.word	0x200003d8
 8001edc:	40004c00 	.word	0x40004c00

08001ee0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b088      	sub	sp, #32
 8001ee4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee6:	f107 030c 	add.w	r3, r7, #12
 8001eea:	2200      	movs	r2, #0
 8001eec:	601a      	str	r2, [r3, #0]
 8001eee:	605a      	str	r2, [r3, #4]
 8001ef0:	609a      	str	r2, [r3, #8]
 8001ef2:	60da      	str	r2, [r3, #12]
 8001ef4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	60bb      	str	r3, [r7, #8]
 8001efa:	4b34      	ldr	r3, [pc, #208]	; (8001fcc <MX_GPIO_Init+0xec>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a33      	ldr	r2, [pc, #204]	; (8001fcc <MX_GPIO_Init+0xec>)
 8001f00:	f043 0304 	orr.w	r3, r3, #4
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b31      	ldr	r3, [pc, #196]	; (8001fcc <MX_GPIO_Init+0xec>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0304 	and.w	r3, r3, #4
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f12:	2300      	movs	r3, #0
 8001f14:	607b      	str	r3, [r7, #4]
 8001f16:	4b2d      	ldr	r3, [pc, #180]	; (8001fcc <MX_GPIO_Init+0xec>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	4a2c      	ldr	r2, [pc, #176]	; (8001fcc <MX_GPIO_Init+0xec>)
 8001f1c:	f043 0301 	orr.w	r3, r3, #1
 8001f20:	6313      	str	r3, [r2, #48]	; 0x30
 8001f22:	4b2a      	ldr	r3, [pc, #168]	; (8001fcc <MX_GPIO_Init+0xec>)
 8001f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f26:	f003 0301 	and.w	r3, r3, #1
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f2e:	2300      	movs	r3, #0
 8001f30:	603b      	str	r3, [r7, #0]
 8001f32:	4b26      	ldr	r3, [pc, #152]	; (8001fcc <MX_GPIO_Init+0xec>)
 8001f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f36:	4a25      	ldr	r2, [pc, #148]	; (8001fcc <MX_GPIO_Init+0xec>)
 8001f38:	f043 0302 	orr.w	r3, r3, #2
 8001f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3e:	4b23      	ldr	r3, [pc, #140]	; (8001fcc <MX_GPIO_Init+0xec>)
 8001f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f42:	f003 0302 	and.w	r3, r3, #2
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13|GPIO_PIN_12, GPIO_PIN_RESET);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8001f50:	481f      	ldr	r0, [pc, #124]	; (8001fd0 <MX_GPIO_Init+0xf0>)
 8001f52:	f001 fb6b 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001f56:	2200      	movs	r2, #0
 8001f58:	2120      	movs	r1, #32
 8001f5a:	481e      	ldr	r0, [pc, #120]	; (8001fd4 <MX_GPIO_Init+0xf4>)
 8001f5c:	f001 fb66 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001f60:	2200      	movs	r2, #0
 8001f62:	f44f 4140 	mov.w	r1, #49152	; 0xc000
 8001f66:	481c      	ldr	r0, [pc, #112]	; (8001fd8 <MX_GPIO_Init+0xf8>)
 8001f68:	f001 fb60 	bl	800362c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_12;
 8001f6c:	f44f 5340 	mov.w	r3, #12288	; 0x3000
 8001f70:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f72:	2301      	movs	r3, #1
 8001f74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f7e:	f107 030c 	add.w	r3, r7, #12
 8001f82:	4619      	mov	r1, r3
 8001f84:	4812      	ldr	r0, [pc, #72]	; (8001fd0 <MX_GPIO_Init+0xf0>)
 8001f86:	f001 f9bd 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001f8a:	2320      	movs	r3, #32
 8001f8c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f96:	2300      	movs	r3, #0
 8001f98:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001f9a:	f107 030c 	add.w	r3, r7, #12
 8001f9e:	4619      	mov	r1, r3
 8001fa0:	480c      	ldr	r0, [pc, #48]	; (8001fd4 <MX_GPIO_Init+0xf4>)
 8001fa2:	f001 f9af 	bl	8003304 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB14 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001fa6:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001faa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001fac:	2301      	movs	r3, #1
 8001fae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fb8:	f107 030c 	add.w	r3, r7, #12
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	4806      	ldr	r0, [pc, #24]	; (8001fd8 <MX_GPIO_Init+0xf8>)
 8001fc0:	f001 f9a0 	bl	8003304 <HAL_GPIO_Init>

}
 8001fc4:	bf00      	nop
 8001fc6:	3720      	adds	r7, #32
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	40020800 	.word	0x40020800
 8001fd4:	40020000 	.word	0x40020000
 8001fd8:	40020400 	.word	0x40020400

08001fdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001fe0:	b672      	cpsid	i
}
 8001fe2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001fe4:	e7fe      	b.n	8001fe4 <Error_Handler+0x8>
	...

08001fe8 <setup>:
extern TIM_HandleTypeDef htim7;
extern UART_HandleTypeDef huart1;

int move_mode = 2;

void setup(){
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	af00      	add	r7, sp, #0
	//UART_setup();
	HAL_TIM_Base_Start_IT(&htim7);
 8001fec:	4803      	ldr	r0, [pc, #12]	; (8001ffc <setup+0x14>)
 8001fee:	f002 f96f 	bl	80042d0 <HAL_TIM_Base_Start_IT>
	DCmotor_setup();
 8001ff2:	f000 f823 	bl	800203c <_Z13DCmotor_setupv>
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000300 	.word	0x20000300

08002000 <main_function>:
void main_function(){
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
	//arm_run();
	//arm_script();
//    pwm2();
	setup();
 8002004:	f7ff fff0 	bl	8001fe8 <setup>
//	pwm1();
//	pwm4();
while(1){
 8002008:	e7fe      	b.n	8002008 <main_function+0x8>
	...

0800200c <HAL_TIM_PeriodElapsedCallback>:
//	move_mode = 1;
//	integral_moveto(100, 100, 1000);
}
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef*htim){
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]

	if (htim -> Instance == TIM7){
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a06      	ldr	r2, [pc, #24]	; (8002034 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d106      	bne.n	800202c <HAL_TIM_PeriodElapsedCallback+0x20>

		speedOutput(move_mode);
 800201e:	4b06      	ldr	r3, [pc, #24]	; (8002038 <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4618      	mov	r0, r3
 8002024:	f000 f9f2 	bl	800240c <_Z11speedOutputi>
		DCmotor_run();
 8002028:	f000 f996 	bl	8002358 <_Z11DCmotor_runv>


		//HAL_UART_Transmit_DMA(&huart1, buffer_TX, sizeof(buffer_TX));
		//HAL_UART_Transmit_IT(&huart1, buffer_TX, sizeof(buffer_TX));
	}
}
 800202c:	bf00      	nop
 800202e:	3708      	adds	r7, #8
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40001400 	.word	0x40001400
 8002038:	20000010 	.word	0x20000010

0800203c <_Z13DCmotor_setupv>:
	{&PID_controllers[1],&htim4,0,0,0,reduction_ratio},
	{&PID_controllers[2],&htim8,0,0,0,reduction_ratio},
	{&PID_controllers[3],&htim3,0,0,0,reduction_ratio}
};

void DCmotor_setup(){
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_2);//motor[1]
 8002040:	2104      	movs	r1, #4
 8002042:	4818      	ldr	r0, [pc, #96]	; (80020a4 <_Z13DCmotor_setupv+0x68>)
 8002044:	f002 fb72 	bl	800472c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim2, TIM_CHANNEL_1);
 8002048:	2100      	movs	r1, #0
 800204a:	4816      	ldr	r0, [pc, #88]	; (80020a4 <_Z13DCmotor_setupv+0x68>)
 800204c:	f002 fb6e 	bl	800472c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_2);//motor[2]
 8002050:	2104      	movs	r1, #4
 8002052:	4815      	ldr	r0, [pc, #84]	; (80020a8 <_Z13DCmotor_setupv+0x6c>)
 8002054:	f002 fb6a 	bl	800472c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_1);
 8002058:	2100      	movs	r1, #0
 800205a:	4813      	ldr	r0, [pc, #76]	; (80020a8 <_Z13DCmotor_setupv+0x6c>)
 800205c:	f002 fb66 	bl	800472c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_2);//motor[3]
 8002060:	2104      	movs	r1, #4
 8002062:	4812      	ldr	r0, [pc, #72]	; (80020ac <_Z13DCmotor_setupv+0x70>)
 8002064:	f002 fb62 	bl	800472c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_1);
 8002068:	2100      	movs	r1, #0
 800206a:	4810      	ldr	r0, [pc, #64]	; (80020ac <_Z13DCmotor_setupv+0x70>)
 800206c:	f002 fb5e 	bl	800472c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_2);//motor[3]
 8002070:	2104      	movs	r1, #4
 8002072:	480f      	ldr	r0, [pc, #60]	; (80020b0 <_Z13DCmotor_setupv+0x74>)
 8002074:	f002 fb5a 	bl	800472c <HAL_TIM_Encoder_Start>
	HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_1);
 8002078:	2100      	movs	r1, #0
 800207a:	480d      	ldr	r0, [pc, #52]	; (80020b0 <_Z13DCmotor_setupv+0x74>)
 800207c:	f002 fb56 	bl	800472c <HAL_TIM_Encoder_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8002080:	2100      	movs	r1, #0
 8002082:	480c      	ldr	r0, [pc, #48]	; (80020b4 <_Z13DCmotor_setupv+0x78>)
 8002084:	f002 f9e4 	bl	8004450 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8002088:	2104      	movs	r1, #4
 800208a:	480a      	ldr	r0, [pc, #40]	; (80020b4 <_Z13DCmotor_setupv+0x78>)
 800208c:	f002 f9e0 	bl	8004450 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3);
 8002090:	2108      	movs	r1, #8
 8002092:	4808      	ldr	r0, [pc, #32]	; (80020b4 <_Z13DCmotor_setupv+0x78>)
 8002094:	f002 f9dc 	bl	8004450 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8002098:	210c      	movs	r1, #12
 800209a:	4806      	ldr	r0, [pc, #24]	; (80020b4 <_Z13DCmotor_setupv+0x78>)
 800209c:	f002 f9d8 	bl	8004450 <HAL_TIM_PWM_Start>
}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	20000228 	.word	0x20000228
 80020a8:	20000270 	.word	0x20000270
 80020ac:	200002b8 	.word	0x200002b8
 80020b0:	20000348 	.word	0x20000348
 80020b4:	200001e0 	.word	0x200001e0

080020b8 <_Z14PI_control_runP8DC_motorf>:

void PI_control_run(DC_motor *motor,float sp) {
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b086      	sub	sp, #24
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	ed87 0a00 	vstr	s0, [r7]
    float error, u_a = 0;
 80020c4:	f04f 0300 	mov.w	r3, #0
 80020c8:	617b      	str	r3, [r7, #20]
    int pul = 0;
 80020ca:	2300      	movs	r3, #0
 80020cc:	613b      	str	r3, [r7, #16]
    float bound = 1 / motor->PID_Controllers->ki;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	ed93 7a01 	vldr	s14, [r3, #4]
 80020d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80020da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020de:	edc7 7a03 	vstr	s15, [r7, #12]
    motor->PID_Controllers->setpoint = sp;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	683a      	ldr	r2, [r7, #0]
 80020e8:	611a      	str	r2, [r3, #16]
    error = motor->PID_Controllers->setpoint - motor->speed;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	ed93 7a04 	vldr	s14, [r3, #16]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	edd3 7a02 	vldr	s15, [r3, #8]
 80020f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020fc:	edc7 7a02 	vstr	s15, [r7, #8]
    motor->PID_Controllers->integral += error * motor->PID_Controllers->span;
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	ed93 7a02 	vldr	s14, [r3, #8]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	edd3 6a03 	vldr	s13, [r3, #12]
 8002110:	edd7 7a02 	vldr	s15, [r7, #8]
 8002114:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002120:	edc3 7a02 	vstr	s15, [r3, #8]
    if (motor->PID_Controllers->integral
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	edd3 7a02 	vldr	s15, [r3, #8]
 800212c:	ed97 7a03 	vldr	s14, [r7, #12]
 8002130:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002138:	d504      	bpl.n	8002144 <_Z14PI_control_runP8DC_motorf+0x8c>
    		> bound) motor->PID_Controllers->integral = bound;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	68fa      	ldr	r2, [r7, #12]
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	e014      	b.n	800216e <_Z14PI_control_runP8DC_motorf+0xb6>
    else if (motor->PID_Controllers->integral
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	ed93 7a02 	vldr	s14, [r3, #8]
    		< -bound) motor->PID_Controllers->integral = -bound;
 800214c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002150:	eef1 7a67 	vneg.f32	s15, s15
    else if (motor->PID_Controllers->integral
 8002154:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002158:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800215c:	d507      	bpl.n	800216e <_Z14PI_control_runP8DC_motorf+0xb6>
    		< -bound) motor->PID_Controllers->integral = -bound;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	edd7 7a03 	vldr	s15, [r7, #12]
 8002166:	eef1 7a67 	vneg.f32	s15, s15
 800216a:	edc3 7a02 	vstr	s15, [r3, #8]
    u_a = motor->PID_Controllers->kp * error
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	ed93 7a00 	vldr	s14, [r3]
 8002176:	edd7 7a02 	vldr	s15, [r7, #8]
 800217a:	ee27 7a27 	vmul.f32	s14, s14, s15
    		+ motor->PID_Controllers->ki * motor->PID_Controllers->integral;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	edd3 6a01 	vldr	s13, [r3, #4]
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	edd3 7a02 	vldr	s15, [r3, #8]
 800218e:	ee66 7aa7 	vmul.f32	s15, s13, s15
    u_a = motor->PID_Controllers->kp * error
 8002192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002196:	edc7 7a05 	vstr	s15, [r7, #20]
    if (u_a > 1) u_a = 1;
 800219a:	edd7 7a05 	vldr	s15, [r7, #20]
 800219e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80021a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021aa:	dd03      	ble.n	80021b4 <_Z14PI_control_runP8DC_motorf+0xfc>
 80021ac:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80021b0:	617b      	str	r3, [r7, #20]
 80021b2:	e00a      	b.n	80021ca <_Z14PI_control_runP8DC_motorf+0x112>
    else if (u_a < -1) u_a = -1;
 80021b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80021b8:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80021bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80021c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021c4:	d501      	bpl.n	80021ca <_Z14PI_control_runP8DC_motorf+0x112>
 80021c6:	4b3c      	ldr	r3, [pc, #240]	; (80022b8 <_Z14PI_control_runP8DC_motorf+0x200>)
 80021c8:	617b      	str	r3, [r7, #20]

    if (u_a > 0) {
 80021ca:	edd7 7a05 	vldr	s15, [r7, #20]
 80021ce:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021d6:	dd1a      	ble.n	800220e <_Z14PI_control_runP8DC_motorf+0x156>
        pul = (int)(u_a * motor->PID_Controllers->arr);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	ee07 3a90 	vmov	s15, r3
 80021e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021e6:	edd7 7a05 	vldr	s15, [r7, #20]
 80021ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021ee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80021f2:	ee17 3a90 	vmov	r3, s15
 80021f6:	613b      	str	r3, [r7, #16]
        HAL_GPIO_WritePin(motor->PID_Controllers->gpioPort, motor->PID_Controllers->gpioPin, GPIO_PIN_SET);
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	6998      	ldr	r0, [r3, #24]
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	8b9b      	ldrh	r3, [r3, #28]
 8002204:	2201      	movs	r2, #1
 8002206:	4619      	mov	r1, r3
 8002208:	f001 fa10 	bl	800362c <HAL_GPIO_WritePin>
 800220c:	e025      	b.n	800225a <_Z14PI_control_runP8DC_motorf+0x1a2>
    } else if (u_a < 0) {
 800220e:	edd7 7a05 	vldr	s15, [r7, #20]
 8002212:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800221a:	d51c      	bpl.n	8002256 <_Z14PI_control_runP8DC_motorf+0x19e>
        pul = (int)(-u_a * motor->PID_Controllers->arr);
 800221c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002220:	eeb1 7a67 	vneg.f32	s14, s15
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	ee07 3a90 	vmov	s15, r3
 800222e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002232:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002236:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800223a:	ee17 3a90 	vmov	r3, s15
 800223e:	613b      	str	r3, [r7, #16]
        HAL_GPIO_WritePin(motor->PID_Controllers->gpioPort, motor->PID_Controllers->gpioPin, GPIO_PIN_RESET);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	6998      	ldr	r0, [r3, #24]
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	8b9b      	ldrh	r3, [r3, #28]
 800224c:	2200      	movs	r2, #0
 800224e:	4619      	mov	r1, r3
 8002250:	f001 f9ec 	bl	800362c <HAL_GPIO_WritePin>
 8002254:	e001      	b.n	800225a <_Z14PI_control_runP8DC_motorf+0x1a2>
    } else {
        pul = 0;
 8002256:	2300      	movs	r3, #0
 8002258:	613b      	str	r3, [r7, #16]
    }
    __HAL_TIM_SET_COMPARE(motor->PID_Controllers->htim, motor->PID_Controllers->TIM_CHANNEL, pul);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002260:	2b00      	cmp	r3, #0
 8002262:	d106      	bne.n	8002272 <_Z14PI_control_runP8DC_motorf+0x1ba>
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	693a      	ldr	r2, [r7, #16]
 800226e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8002270:	e01d      	b.n	80022ae <_Z14PI_control_runP8DC_motorf+0x1f6>
    __HAL_TIM_SET_COMPARE(motor->PID_Controllers->htim, motor->PID_Controllers->TIM_CHANNEL, pul);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002278:	2b04      	cmp	r3, #4
 800227a:	d106      	bne.n	800228a <_Z14PI_control_runP8DC_motorf+0x1d2>
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	6a1b      	ldr	r3, [r3, #32]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	693a      	ldr	r2, [r7, #16]
 8002286:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002288:	e011      	b.n	80022ae <_Z14PI_control_runP8DC_motorf+0x1f6>
    __HAL_TIM_SET_COMPARE(motor->PID_Controllers->htim, motor->PID_Controllers->TIM_CHANNEL, pul);
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002290:	2b08      	cmp	r3, #8
 8002292:	d106      	bne.n	80022a2 <_Z14PI_control_runP8DC_motorf+0x1ea>
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	6a1b      	ldr	r3, [r3, #32]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	63da      	str	r2, [r3, #60]	; 0x3c
}
 80022a0:	e005      	b.n	80022ae <_Z14PI_control_runP8DC_motorf+0x1f6>
    __HAL_TIM_SET_COMPARE(motor->PID_Controllers->htim, motor->PID_Controllers->TIM_CHANNEL, pul);
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	6a1b      	ldr	r3, [r3, #32]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	693a      	ldr	r2, [r7, #16]
 80022ac:	641a      	str	r2, [r3, #64]	; 0x40
}
 80022ae:	bf00      	nop
 80022b0:	3718      	adds	r7, #24
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	bf800000 	.word	0xbf800000

080022bc <_Z8getStateP8DC_motori>:

void getState(DC_motor *motor,int sign){
 80022bc:	b480      	push	{r7}
 80022be:	b085      	sub	sp, #20
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
	int16_t enc ;
	enc = __HAL_TIM_GetCounter(motor->htim);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	685b      	ldr	r3, [r3, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ce:	81fb      	strh	r3, [r7, #14]
	motor->speed = sign*(float)enc /(4*resolution*motor->reduction_ratio*span);
 80022d0:	683b      	ldr	r3, [r7, #0]
 80022d2:	ee07 3a90 	vmov	s15, r3
 80022d6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022de:	ee07 3a90 	vmov	s15, r3
 80022e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022e6:	ee67 6a27 	vmul.f32	s13, s14, s15
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	edd3 7a05 	vldr	s15, [r3, #20]
 80022f0:	ed9f 7a17 	vldr	s14, [pc, #92]	; 8002350 <_Z8getStateP8DC_motori+0x94>
 80022f4:	ee27 7a87 	vmul.f32	s14, s15, s14
 80022f8:	4b16      	ldr	r3, [pc, #88]	; (8002354 <_Z8getStateP8DC_motori+0x98>)
 80022fa:	edd3 7a00 	vldr	s15, [r3]
 80022fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002302:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	edc3 7a02 	vstr	s15, [r3, #8]
	__HAL_TIM_SetCounter(motor->htim,0);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	2200      	movs	r2, #0
 8002314:	625a      	str	r2, [r3, #36]	; 0x24
	motor->currentHeight += motor->speed*span*sign;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	ed93 7a03 	vldr	s14, [r3, #12]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	edd3 6a02 	vldr	s13, [r3, #8]
 8002322:	4b0c      	ldr	r3, [pc, #48]	; (8002354 <_Z8getStateP8DC_motori+0x98>)
 8002324:	edd3 7a00 	vldr	s15, [r3]
 8002328:	ee66 6aa7 	vmul.f32	s13, s13, s15
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	ee07 3a90 	vmov	s15, r3
 8002332:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002336:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800233a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	edc3 7a03 	vstr	s15, [r3, #12]
}
 8002344:	bf00      	nop
 8002346:	3714      	adds	r7, #20
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	45000000 	.word	0x45000000
 8002354:	20000020 	.word	0x20000020

08002358 <_Z11DCmotor_runv>:
		}
	}else{
		*velocity_sp = 0;
	}
}
void DCmotor_run(){
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
	//get speed from encoder, and calculate height
	getState(&DC_Motors[0],-1);//
 800235c:	f04f 31ff 	mov.w	r1, #4294967295
 8002360:	4818      	ldr	r0, [pc, #96]	; (80023c4 <_Z11DCmotor_runv+0x6c>)
 8002362:	f7ff ffab 	bl	80022bc <_Z8getStateP8DC_motori>
	getState(&DC_Motors[1],1);//
 8002366:	2101      	movs	r1, #1
 8002368:	4817      	ldr	r0, [pc, #92]	; (80023c8 <_Z11DCmotor_runv+0x70>)
 800236a:	f7ff ffa7 	bl	80022bc <_Z8getStateP8DC_motori>
	getState(&DC_Motors[2],1);//
 800236e:	2101      	movs	r1, #1
 8002370:	4816      	ldr	r0, [pc, #88]	; (80023cc <_Z11DCmotor_runv+0x74>)
 8002372:	f7ff ffa3 	bl	80022bc <_Z8getStateP8DC_motori>
	getState(&DC_Motors[3],-1);
 8002376:	f04f 31ff 	mov.w	r1, #4294967295
 800237a:	4815      	ldr	r0, [pc, #84]	; (80023d0 <_Z11DCmotor_runv+0x78>)
 800237c:	f7ff ff9e 	bl	80022bc <_Z8getStateP8DC_motori>
	//set goal height of cascade
//	set_goalHeight(&DC_Motors[0],goalHeight[0],&sp[0],cascade_speed);
//	set_goalHeight(&DC_Motors[1],goalHeight[1],&sp[1],cascade_speed);
    // PI control DCmotor with velocity set point
	PI_control_run(&DC_Motors[0],sp[0]);
 8002380:	4b14      	ldr	r3, [pc, #80]	; (80023d4 <_Z11DCmotor_runv+0x7c>)
 8002382:	edd3 7a00 	vldr	s15, [r3]
 8002386:	eeb0 0a67 	vmov.f32	s0, s15
 800238a:	480e      	ldr	r0, [pc, #56]	; (80023c4 <_Z11DCmotor_runv+0x6c>)
 800238c:	f7ff fe94 	bl	80020b8 <_Z14PI_control_runP8DC_motorf>
	PI_control_run(&DC_Motors[1],sp[1]);
 8002390:	4b10      	ldr	r3, [pc, #64]	; (80023d4 <_Z11DCmotor_runv+0x7c>)
 8002392:	edd3 7a01 	vldr	s15, [r3, #4]
 8002396:	eeb0 0a67 	vmov.f32	s0, s15
 800239a:	480b      	ldr	r0, [pc, #44]	; (80023c8 <_Z11DCmotor_runv+0x70>)
 800239c:	f7ff fe8c 	bl	80020b8 <_Z14PI_control_runP8DC_motorf>
	PI_control_run(&DC_Motors[2],sp[2]);
 80023a0:	4b0c      	ldr	r3, [pc, #48]	; (80023d4 <_Z11DCmotor_runv+0x7c>)
 80023a2:	edd3 7a02 	vldr	s15, [r3, #8]
 80023a6:	eeb0 0a67 	vmov.f32	s0, s15
 80023aa:	4808      	ldr	r0, [pc, #32]	; (80023cc <_Z11DCmotor_runv+0x74>)
 80023ac:	f7ff fe84 	bl	80020b8 <_Z14PI_control_runP8DC_motorf>
	PI_control_run(&DC_Motors[3],sp[3]);
 80023b0:	4b08      	ldr	r3, [pc, #32]	; (80023d4 <_Z11DCmotor_runv+0x7c>)
 80023b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80023b6:	eeb0 0a67 	vmov.f32	s0, s15
 80023ba:	4805      	ldr	r0, [pc, #20]	; (80023d0 <_Z11DCmotor_runv+0x78>)
 80023bc:	f7ff fe7c 	bl	80020b8 <_Z14PI_control_runP8DC_motorf>

	//motor_run++;
	}
 80023c0:	bf00      	nop
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	200000c4 	.word	0x200000c4
 80023c8:	200000dc 	.word	0x200000dc
 80023cc:	200000f4 	.word	0x200000f4
 80023d0:	2000010c 	.word	0x2000010c
 80023d4:	2000041c 	.word	0x2000041c

080023d8 <_Z9encoderspPf>:

//read encoder
void encodersp(float *encsp){
 80023d8:	b480      	push	{r7}
 80023da:	b083      	sub	sp, #12
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]

	encsp[0] = DC_Motors[3].speed;
 80023e0:	4b09      	ldr	r3, [pc, #36]	; (8002408 <_Z9encoderspPf+0x30>)
 80023e2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	601a      	str	r2, [r3, #0]
	encsp[1] = -1 * DC_Motors[2].speed;
 80023e8:	4b07      	ldr	r3, [pc, #28]	; (8002408 <_Z9encoderspPf+0x30>)
 80023ea:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	3304      	adds	r3, #4
 80023f2:	eef1 7a67 	vneg.f32	s15, s15
 80023f6:	edc3 7a00 	vstr	s15, [r3]
}
 80023fa:	bf00      	nop
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	200000c4 	.word	0x200000c4

0800240c <_Z11speedOutputi>:
//adjust speed, 0 path, 1 integral, 2 stop
void speedOutput(int m){
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]

	speed_change(m);
 8002414:	6878      	ldr	r0, [r7, #4]
 8002416:	f7fe ff3b 	bl	8001290 <_Z12speed_changei>
	location_data(m);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7fe fdcc 	bl	8000fb8 <_Z13location_datai>

//	sp[3] = chassis_right_wheel_angspeed;
//	sp[2] = chassis_left_wheel_angspeed;//給負速度往前
}
 8002420:	bf00      	nop
 8002422:	3708      	adds	r7, #8
 8002424:	46bd      	mov	sp, r7
 8002426:	bd80      	pop	{r7, pc}

08002428 <_Z41__static_initialization_and_destruction_0ii>:
 8002428:	b480      	push	{r7}
 800242a:	b083      	sub	sp, #12
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b01      	cmp	r3, #1
 8002436:	d146      	bne.n	80024c6 <_Z41__static_initialization_and_destruction_0ii+0x9e>
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800243e:	4293      	cmp	r3, r2
 8002440:	d141      	bne.n	80024c6 <_Z41__static_initialization_and_destruction_0ii+0x9e>
};
 8002442:	4b24      	ldr	r3, [pc, #144]	; (80024d4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4a24      	ldr	r2, [pc, #144]	; (80024d8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8002448:	6013      	str	r3, [r2, #0]
 800244a:	4b24      	ldr	r3, [pc, #144]	; (80024dc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	4a22      	ldr	r2, [pc, #136]	; (80024d8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8002450:	6053      	str	r3, [r2, #4]
 8002452:	4b23      	ldr	r3, [pc, #140]	; (80024e0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4a20      	ldr	r2, [pc, #128]	; (80024d8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8002458:	60d3      	str	r3, [r2, #12]
 800245a:	4b22      	ldr	r3, [pc, #136]	; (80024e4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a1e      	ldr	r2, [pc, #120]	; (80024d8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8002460:	6153      	str	r3, [r2, #20]
 8002462:	4b1c      	ldr	r3, [pc, #112]	; (80024d4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a1c      	ldr	r2, [pc, #112]	; (80024d8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8002468:	6293      	str	r3, [r2, #40]	; 0x28
 800246a:	4b1c      	ldr	r3, [pc, #112]	; (80024dc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4a1a      	ldr	r2, [pc, #104]	; (80024d8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8002470:	62d3      	str	r3, [r2, #44]	; 0x2c
 8002472:	4b1b      	ldr	r3, [pc, #108]	; (80024e0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4a18      	ldr	r2, [pc, #96]	; (80024d8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8002478:	6353      	str	r3, [r2, #52]	; 0x34
 800247a:	4b1a      	ldr	r3, [pc, #104]	; (80024e4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a16      	ldr	r2, [pc, #88]	; (80024d8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8002480:	63d3      	str	r3, [r2, #60]	; 0x3c
 8002482:	4b14      	ldr	r3, [pc, #80]	; (80024d4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a14      	ldr	r2, [pc, #80]	; (80024d8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8002488:	6513      	str	r3, [r2, #80]	; 0x50
 800248a:	4b14      	ldr	r3, [pc, #80]	; (80024dc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	4a12      	ldr	r2, [pc, #72]	; (80024d8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8002490:	6553      	str	r3, [r2, #84]	; 0x54
 8002492:	4b13      	ldr	r3, [pc, #76]	; (80024e0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a10      	ldr	r2, [pc, #64]	; (80024d8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 8002498:	65d3      	str	r3, [r2, #92]	; 0x5c
 800249a:	4b12      	ldr	r3, [pc, #72]	; (80024e4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	4a0e      	ldr	r2, [pc, #56]	; (80024d8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80024a0:	6653      	str	r3, [r2, #100]	; 0x64
 80024a2:	4b0c      	ldr	r3, [pc, #48]	; (80024d4 <_Z41__static_initialization_and_destruction_0ii+0xac>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4a0c      	ldr	r2, [pc, #48]	; (80024d8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80024a8:	6793      	str	r3, [r2, #120]	; 0x78
 80024aa:	4b0c      	ldr	r3, [pc, #48]	; (80024dc <_Z41__static_initialization_and_destruction_0ii+0xb4>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a0a      	ldr	r2, [pc, #40]	; (80024d8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80024b0:	67d3      	str	r3, [r2, #124]	; 0x7c
 80024b2:	4b0b      	ldr	r3, [pc, #44]	; (80024e0 <_Z41__static_initialization_and_destruction_0ii+0xb8>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a08      	ldr	r2, [pc, #32]	; (80024d8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80024b8:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
 80024bc:	4b09      	ldr	r3, [pc, #36]	; (80024e4 <_Z41__static_initialization_and_destruction_0ii+0xbc>)
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4a05      	ldr	r2, [pc, #20]	; (80024d8 <_Z41__static_initialization_and_destruction_0ii+0xb0>)
 80024c2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000018 	.word	0x20000018
 80024d8:	20000024 	.word	0x20000024
 80024dc:	20000014 	.word	0x20000014
 80024e0:	20000020 	.word	0x20000020
 80024e4:	2000001c 	.word	0x2000001c

080024e8 <_GLOBAL__sub_I_enc_a>:
 80024e8:	b580      	push	{r7, lr}
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80024f0:	2001      	movs	r0, #1
 80024f2:	f7ff ff99 	bl	8002428 <_Z41__static_initialization_and_destruction_0ii>
 80024f6:	bd80      	pop	{r7, pc}

080024f8 <HAL_TIM_PWM_PulseFinishedCallback>:
//	servo_move(&servo[0],goalAngle,responseTime);
//	servo_run(&servo[0] ,1000);
//	//t++;
//	}
//}
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim) {
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM4) {

    }
}
 8002500:	bf00      	nop
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	607b      	str	r3, [r7, #4]
 8002516:	4b10      	ldr	r3, [pc, #64]	; (8002558 <HAL_MspInit+0x4c>)
 8002518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251a:	4a0f      	ldr	r2, [pc, #60]	; (8002558 <HAL_MspInit+0x4c>)
 800251c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002520:	6453      	str	r3, [r2, #68]	; 0x44
 8002522:	4b0d      	ldr	r3, [pc, #52]	; (8002558 <HAL_MspInit+0x4c>)
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800252a:	607b      	str	r3, [r7, #4]
 800252c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	603b      	str	r3, [r7, #0]
 8002532:	4b09      	ldr	r3, [pc, #36]	; (8002558 <HAL_MspInit+0x4c>)
 8002534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002536:	4a08      	ldr	r2, [pc, #32]	; (8002558 <HAL_MspInit+0x4c>)
 8002538:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800253c:	6413      	str	r3, [r2, #64]	; 0x40
 800253e:	4b06      	ldr	r3, [pc, #24]	; (8002558 <HAL_MspInit+0x4c>)
 8002540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002542:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002546:	603b      	str	r3, [r7, #0]
 8002548:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800254a:	2007      	movs	r0, #7
 800254c:	f000 fe98 	bl	8003280 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002550:	bf00      	nop
 8002552:	3708      	adds	r7, #8
 8002554:	46bd      	mov	sp, r7
 8002556:	bd80      	pop	{r7, pc}
 8002558:	40023800 	.word	0x40023800

0800255c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800255c:	b580      	push	{r7, lr}
 800255e:	b08a      	sub	sp, #40	; 0x28
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002564:	f107 0314 	add.w	r3, r7, #20
 8002568:	2200      	movs	r2, #0
 800256a:	601a      	str	r2, [r3, #0]
 800256c:	605a      	str	r2, [r3, #4]
 800256e:	609a      	str	r2, [r3, #8]
 8002570:	60da      	str	r2, [r3, #12]
 8002572:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a24      	ldr	r2, [pc, #144]	; (800260c <HAL_ADC_MspInit+0xb0>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d141      	bne.n	8002602 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800257e:	2300      	movs	r3, #0
 8002580:	613b      	str	r3, [r7, #16]
 8002582:	4b23      	ldr	r3, [pc, #140]	; (8002610 <HAL_ADC_MspInit+0xb4>)
 8002584:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002586:	4a22      	ldr	r2, [pc, #136]	; (8002610 <HAL_ADC_MspInit+0xb4>)
 8002588:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800258c:	6453      	str	r3, [r2, #68]	; 0x44
 800258e:	4b20      	ldr	r3, [pc, #128]	; (8002610 <HAL_ADC_MspInit+0xb4>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002596:	613b      	str	r3, [r7, #16]
 8002598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800259a:	2300      	movs	r3, #0
 800259c:	60fb      	str	r3, [r7, #12]
 800259e:	4b1c      	ldr	r3, [pc, #112]	; (8002610 <HAL_ADC_MspInit+0xb4>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	4a1b      	ldr	r2, [pc, #108]	; (8002610 <HAL_ADC_MspInit+0xb4>)
 80025a4:	f043 0301 	orr.w	r3, r3, #1
 80025a8:	6313      	str	r3, [r2, #48]	; 0x30
 80025aa:	4b19      	ldr	r3, [pc, #100]	; (8002610 <HAL_ADC_MspInit+0xb4>)
 80025ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ae:	f003 0301 	and.w	r3, r3, #1
 80025b2:	60fb      	str	r3, [r7, #12]
 80025b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	60bb      	str	r3, [r7, #8]
 80025ba:	4b15      	ldr	r3, [pc, #84]	; (8002610 <HAL_ADC_MspInit+0xb4>)
 80025bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025be:	4a14      	ldr	r2, [pc, #80]	; (8002610 <HAL_ADC_MspInit+0xb4>)
 80025c0:	f043 0302 	orr.w	r3, r3, #2
 80025c4:	6313      	str	r3, [r2, #48]	; 0x30
 80025c6:	4b12      	ldr	r3, [pc, #72]	; (8002610 <HAL_ADC_MspInit+0xb4>)
 80025c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	60bb      	str	r3, [r7, #8]
 80025d0:	68bb      	ldr	r3, [r7, #8]
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_6
 80025d2:	23d3      	movs	r3, #211	; 0xd3
 80025d4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025d6:	2303      	movs	r3, #3
 80025d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025da:	2300      	movs	r3, #0
 80025dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025de:	f107 0314 	add.w	r3, r7, #20
 80025e2:	4619      	mov	r1, r3
 80025e4:	480b      	ldr	r0, [pc, #44]	; (8002614 <HAL_ADC_MspInit+0xb8>)
 80025e6:	f000 fe8d 	bl	8003304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80025ea:	2303      	movs	r3, #3
 80025ec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80025ee:	2303      	movs	r3, #3
 80025f0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f2:	2300      	movs	r3, #0
 80025f4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80025f6:	f107 0314 	add.w	r3, r7, #20
 80025fa:	4619      	mov	r1, r3
 80025fc:	4806      	ldr	r0, [pc, #24]	; (8002618 <HAL_ADC_MspInit+0xbc>)
 80025fe:	f000 fe81 	bl	8003304 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002602:	bf00      	nop
 8002604:	3728      	adds	r7, #40	; 0x28
 8002606:	46bd      	mov	sp, r7
 8002608:	bd80      	pop	{r7, pc}
 800260a:	bf00      	nop
 800260c:	40012000 	.word	0x40012000
 8002610:	40023800 	.word	0x40023800
 8002614:	40020000 	.word	0x40020000
 8002618:	40020400 	.word	0x40020400

0800261c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	4a15      	ldr	r2, [pc, #84]	; (8002680 <HAL_TIM_PWM_MspInit+0x64>)
 800262a:	4293      	cmp	r3, r2
 800262c:	d10e      	bne.n	800264c <HAL_TIM_PWM_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800262e:	2300      	movs	r3, #0
 8002630:	60fb      	str	r3, [r7, #12]
 8002632:	4b14      	ldr	r3, [pc, #80]	; (8002684 <HAL_TIM_PWM_MspInit+0x68>)
 8002634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002636:	4a13      	ldr	r2, [pc, #76]	; (8002684 <HAL_TIM_PWM_MspInit+0x68>)
 8002638:	f043 0301 	orr.w	r3, r3, #1
 800263c:	6453      	str	r3, [r2, #68]	; 0x44
 800263e:	4b11      	ldr	r3, [pc, #68]	; (8002684 <HAL_TIM_PWM_MspInit+0x68>)
 8002640:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002642:	f003 0301 	and.w	r3, r3, #1
 8002646:	60fb      	str	r3, [r7, #12]
 8002648:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800264a:	e012      	b.n	8002672 <HAL_TIM_PWM_MspInit+0x56>
  else if(htim_pwm->Instance==TIM9)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a0d      	ldr	r2, [pc, #52]	; (8002688 <HAL_TIM_PWM_MspInit+0x6c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d10d      	bne.n	8002672 <HAL_TIM_PWM_MspInit+0x56>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002656:	2300      	movs	r3, #0
 8002658:	60bb      	str	r3, [r7, #8]
 800265a:	4b0a      	ldr	r3, [pc, #40]	; (8002684 <HAL_TIM_PWM_MspInit+0x68>)
 800265c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265e:	4a09      	ldr	r2, [pc, #36]	; (8002684 <HAL_TIM_PWM_MspInit+0x68>)
 8002660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002664:	6453      	str	r3, [r2, #68]	; 0x44
 8002666:	4b07      	ldr	r3, [pc, #28]	; (8002684 <HAL_TIM_PWM_MspInit+0x68>)
 8002668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800266a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800266e:	60bb      	str	r3, [r7, #8]
 8002670:	68bb      	ldr	r3, [r7, #8]
}
 8002672:	bf00      	nop
 8002674:	3714      	adds	r7, #20
 8002676:	46bd      	mov	sp, r7
 8002678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267c:	4770      	bx	lr
 800267e:	bf00      	nop
 8002680:	40010000 	.word	0x40010000
 8002684:	40023800 	.word	0x40023800
 8002688:	40014000 	.word	0x40014000

0800268c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800268c:	b580      	push	{r7, lr}
 800268e:	b090      	sub	sp, #64	; 0x40
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002694:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002698:	2200      	movs	r2, #0
 800269a:	601a      	str	r2, [r3, #0]
 800269c:	605a      	str	r2, [r3, #4]
 800269e:	609a      	str	r2, [r3, #8]
 80026a0:	60da      	str	r2, [r3, #12]
 80026a2:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026ac:	d14c      	bne.n	8002748 <HAL_TIM_Encoder_MspInit+0xbc>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026ae:	2300      	movs	r3, #0
 80026b0:	62bb      	str	r3, [r7, #40]	; 0x28
 80026b2:	4b72      	ldr	r3, [pc, #456]	; (800287c <HAL_TIM_Encoder_MspInit+0x1f0>)
 80026b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b6:	4a71      	ldr	r2, [pc, #452]	; (800287c <HAL_TIM_Encoder_MspInit+0x1f0>)
 80026b8:	f043 0301 	orr.w	r3, r3, #1
 80026bc:	6413      	str	r3, [r2, #64]	; 0x40
 80026be:	4b6f      	ldr	r3, [pc, #444]	; (800287c <HAL_TIM_Encoder_MspInit+0x1f0>)
 80026c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026c2:	f003 0301 	and.w	r3, r3, #1
 80026c6:	62bb      	str	r3, [r7, #40]	; 0x28
 80026c8:	6abb      	ldr	r3, [r7, #40]	; 0x28

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	627b      	str	r3, [r7, #36]	; 0x24
 80026ce:	4b6b      	ldr	r3, [pc, #428]	; (800287c <HAL_TIM_Encoder_MspInit+0x1f0>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	4a6a      	ldr	r2, [pc, #424]	; (800287c <HAL_TIM_Encoder_MspInit+0x1f0>)
 80026d4:	f043 0301 	orr.w	r3, r3, #1
 80026d8:	6313      	str	r3, [r2, #48]	; 0x30
 80026da:	4b68      	ldr	r3, [pc, #416]	; (800287c <HAL_TIM_Encoder_MspInit+0x1f0>)
 80026dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	627b      	str	r3, [r7, #36]	; 0x24
 80026e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	623b      	str	r3, [r7, #32]
 80026ea:	4b64      	ldr	r3, [pc, #400]	; (800287c <HAL_TIM_Encoder_MspInit+0x1f0>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	4a63      	ldr	r2, [pc, #396]	; (800287c <HAL_TIM_Encoder_MspInit+0x1f0>)
 80026f0:	f043 0302 	orr.w	r3, r3, #2
 80026f4:	6313      	str	r3, [r2, #48]	; 0x30
 80026f6:	4b61      	ldr	r3, [pc, #388]	; (800287c <HAL_TIM_Encoder_MspInit+0x1f0>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	f003 0302 	and.w	r3, r3, #2
 80026fe:	623b      	str	r3, [r7, #32]
 8002700:	6a3b      	ldr	r3, [r7, #32]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB9     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002702:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002706:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002708:	2302      	movs	r3, #2
 800270a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002710:	2300      	movs	r3, #0
 8002712:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002714:	2301      	movs	r3, #1
 8002716:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002718:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800271c:	4619      	mov	r1, r3
 800271e:	4858      	ldr	r0, [pc, #352]	; (8002880 <HAL_TIM_Encoder_MspInit+0x1f4>)
 8002720:	f000 fdf0 	bl	8003304 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002724:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002728:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800272a:	2302      	movs	r3, #2
 800272c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272e:	2300      	movs	r3, #0
 8002730:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002732:	2300      	movs	r3, #0
 8002734:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002736:	2301      	movs	r3, #1
 8002738:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800273a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800273e:	4619      	mov	r1, r3
 8002740:	4850      	ldr	r0, [pc, #320]	; (8002884 <HAL_TIM_Encoder_MspInit+0x1f8>)
 8002742:	f000 fddf 	bl	8003304 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8002746:	e094      	b.n	8002872 <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(htim_encoder->Instance==TIM3)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a4e      	ldr	r2, [pc, #312]	; (8002888 <HAL_TIM_Encoder_MspInit+0x1fc>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d12c      	bne.n	80027ac <HAL_TIM_Encoder_MspInit+0x120>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	61fb      	str	r3, [r7, #28]
 8002756:	4b49      	ldr	r3, [pc, #292]	; (800287c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800275a:	4a48      	ldr	r2, [pc, #288]	; (800287c <HAL_TIM_Encoder_MspInit+0x1f0>)
 800275c:	f043 0302 	orr.w	r3, r3, #2
 8002760:	6413      	str	r3, [r2, #64]	; 0x40
 8002762:	4b46      	ldr	r3, [pc, #280]	; (800287c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002766:	f003 0302 	and.w	r3, r3, #2
 800276a:	61fb      	str	r3, [r7, #28]
 800276c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800276e:	2300      	movs	r3, #0
 8002770:	61bb      	str	r3, [r7, #24]
 8002772:	4b42      	ldr	r3, [pc, #264]	; (800287c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002776:	4a41      	ldr	r2, [pc, #260]	; (800287c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002778:	f043 0302 	orr.w	r3, r3, #2
 800277c:	6313      	str	r3, [r2, #48]	; 0x30
 800277e:	4b3f      	ldr	r3, [pc, #252]	; (800287c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	61bb      	str	r3, [r7, #24]
 8002788:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 800278a:	2330      	movs	r3, #48	; 0x30
 800278c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278e:	2302      	movs	r3, #2
 8002790:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002792:	2300      	movs	r3, #0
 8002794:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002796:	2300      	movs	r3, #0
 8002798:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800279a:	2302      	movs	r3, #2
 800279c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800279e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80027a2:	4619      	mov	r1, r3
 80027a4:	4837      	ldr	r0, [pc, #220]	; (8002884 <HAL_TIM_Encoder_MspInit+0x1f8>)
 80027a6:	f000 fdad 	bl	8003304 <HAL_GPIO_Init>
}
 80027aa:	e062      	b.n	8002872 <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(htim_encoder->Instance==TIM4)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	4a36      	ldr	r2, [pc, #216]	; (800288c <HAL_TIM_Encoder_MspInit+0x200>)
 80027b2:	4293      	cmp	r3, r2
 80027b4:	d12c      	bne.n	8002810 <HAL_TIM_Encoder_MspInit+0x184>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
 80027ba:	4b30      	ldr	r3, [pc, #192]	; (800287c <HAL_TIM_Encoder_MspInit+0x1f0>)
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	4a2f      	ldr	r2, [pc, #188]	; (800287c <HAL_TIM_Encoder_MspInit+0x1f0>)
 80027c0:	f043 0304 	orr.w	r3, r3, #4
 80027c4:	6413      	str	r3, [r2, #64]	; 0x40
 80027c6:	4b2d      	ldr	r3, [pc, #180]	; (800287c <HAL_TIM_Encoder_MspInit+0x1f0>)
 80027c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ca:	f003 0304 	and.w	r3, r3, #4
 80027ce:	617b      	str	r3, [r7, #20]
 80027d0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027d2:	2300      	movs	r3, #0
 80027d4:	613b      	str	r3, [r7, #16]
 80027d6:	4b29      	ldr	r3, [pc, #164]	; (800287c <HAL_TIM_Encoder_MspInit+0x1f0>)
 80027d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027da:	4a28      	ldr	r2, [pc, #160]	; (800287c <HAL_TIM_Encoder_MspInit+0x1f0>)
 80027dc:	f043 0302 	orr.w	r3, r3, #2
 80027e0:	6313      	str	r3, [r2, #48]	; 0x30
 80027e2:	4b26      	ldr	r3, [pc, #152]	; (800287c <HAL_TIM_Encoder_MspInit+0x1f0>)
 80027e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027e6:	f003 0302 	and.w	r3, r3, #2
 80027ea:	613b      	str	r3, [r7, #16]
 80027ec:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027ee:	23c0      	movs	r3, #192	; 0xc0
 80027f0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027f2:	2302      	movs	r3, #2
 80027f4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027f6:	2300      	movs	r3, #0
 80027f8:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027fa:	2300      	movs	r3, #0
 80027fc:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80027fe:	2302      	movs	r3, #2
 8002800:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002802:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002806:	4619      	mov	r1, r3
 8002808:	481e      	ldr	r0, [pc, #120]	; (8002884 <HAL_TIM_Encoder_MspInit+0x1f8>)
 800280a:	f000 fd7b 	bl	8003304 <HAL_GPIO_Init>
}
 800280e:	e030      	b.n	8002872 <HAL_TIM_Encoder_MspInit+0x1e6>
  else if(htim_encoder->Instance==TIM8)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a1e      	ldr	r2, [pc, #120]	; (8002890 <HAL_TIM_Encoder_MspInit+0x204>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d12b      	bne.n	8002872 <HAL_TIM_Encoder_MspInit+0x1e6>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800281a:	2300      	movs	r3, #0
 800281c:	60fb      	str	r3, [r7, #12]
 800281e:	4b17      	ldr	r3, [pc, #92]	; (800287c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002820:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002822:	4a16      	ldr	r2, [pc, #88]	; (800287c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002824:	f043 0302 	orr.w	r3, r3, #2
 8002828:	6453      	str	r3, [r2, #68]	; 0x44
 800282a:	4b14      	ldr	r3, [pc, #80]	; (800287c <HAL_TIM_Encoder_MspInit+0x1f0>)
 800282c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800282e:	f003 0302 	and.w	r3, r3, #2
 8002832:	60fb      	str	r3, [r7, #12]
 8002834:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002836:	2300      	movs	r3, #0
 8002838:	60bb      	str	r3, [r7, #8]
 800283a:	4b10      	ldr	r3, [pc, #64]	; (800287c <HAL_TIM_Encoder_MspInit+0x1f0>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	4a0f      	ldr	r2, [pc, #60]	; (800287c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002840:	f043 0304 	orr.w	r3, r3, #4
 8002844:	6313      	str	r3, [r2, #48]	; 0x30
 8002846:	4b0d      	ldr	r3, [pc, #52]	; (800287c <HAL_TIM_Encoder_MspInit+0x1f0>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	f003 0304 	and.w	r3, r3, #4
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002852:	23c0      	movs	r3, #192	; 0xc0
 8002854:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002856:	2302      	movs	r3, #2
 8002858:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800285a:	2300      	movs	r3, #0
 800285c:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800285e:	2300      	movs	r3, #0
 8002860:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002862:	2303      	movs	r3, #3
 8002864:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002866:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800286a:	4619      	mov	r1, r3
 800286c:	4809      	ldr	r0, [pc, #36]	; (8002894 <HAL_TIM_Encoder_MspInit+0x208>)
 800286e:	f000 fd49 	bl	8003304 <HAL_GPIO_Init>
}
 8002872:	bf00      	nop
 8002874:	3740      	adds	r7, #64	; 0x40
 8002876:	46bd      	mov	sp, r7
 8002878:	bd80      	pop	{r7, pc}
 800287a:	bf00      	nop
 800287c:	40023800 	.word	0x40023800
 8002880:	40020000 	.word	0x40020000
 8002884:	40020400 	.word	0x40020400
 8002888:	40000400 	.word	0x40000400
 800288c:	40000800 	.word	0x40000800
 8002890:	40010400 	.word	0x40010400
 8002894:	40020800 	.word	0x40020800

08002898 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b084      	sub	sp, #16
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM7)
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a0e      	ldr	r2, [pc, #56]	; (80028e0 <HAL_TIM_Base_MspInit+0x48>)
 80028a6:	4293      	cmp	r3, r2
 80028a8:	d115      	bne.n	80028d6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM7_MspInit 0 */

  /* USER CODE END TIM7_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM7_CLK_ENABLE();
 80028aa:	2300      	movs	r3, #0
 80028ac:	60fb      	str	r3, [r7, #12]
 80028ae:	4b0d      	ldr	r3, [pc, #52]	; (80028e4 <HAL_TIM_Base_MspInit+0x4c>)
 80028b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b2:	4a0c      	ldr	r2, [pc, #48]	; (80028e4 <HAL_TIM_Base_MspInit+0x4c>)
 80028b4:	f043 0320 	orr.w	r3, r3, #32
 80028b8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ba:	4b0a      	ldr	r3, [pc, #40]	; (80028e4 <HAL_TIM_Base_MspInit+0x4c>)
 80028bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028be:	f003 0320 	and.w	r3, r3, #32
 80028c2:	60fb      	str	r3, [r7, #12]
 80028c4:	68fb      	ldr	r3, [r7, #12]
    /* TIM7 interrupt Init */
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 80028c6:	2200      	movs	r2, #0
 80028c8:	2100      	movs	r1, #0
 80028ca:	2037      	movs	r0, #55	; 0x37
 80028cc:	f000 fce3 	bl	8003296 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 80028d0:	2037      	movs	r0, #55	; 0x37
 80028d2:	f000 fcfc 	bl	80032ce <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80028d6:	bf00      	nop
 80028d8:	3710      	adds	r7, #16
 80028da:	46bd      	mov	sp, r7
 80028dc:	bd80      	pop	{r7, pc}
 80028de:	bf00      	nop
 80028e0:	40001400 	.word	0x40001400
 80028e4:	40023800 	.word	0x40023800

080028e8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08a      	sub	sp, #40	; 0x28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f0:	f107 0314 	add.w	r3, r7, #20
 80028f4:	2200      	movs	r2, #0
 80028f6:	601a      	str	r2, [r3, #0]
 80028f8:	605a      	str	r2, [r3, #4]
 80028fa:	609a      	str	r2, [r3, #8]
 80028fc:	60da      	str	r2, [r3, #12]
 80028fe:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a24      	ldr	r2, [pc, #144]	; (8002998 <HAL_TIM_MspPostInit+0xb0>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d11f      	bne.n	800294a <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	613b      	str	r3, [r7, #16]
 800290e:	4b23      	ldr	r3, [pc, #140]	; (800299c <HAL_TIM_MspPostInit+0xb4>)
 8002910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002912:	4a22      	ldr	r2, [pc, #136]	; (800299c <HAL_TIM_MspPostInit+0xb4>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6313      	str	r3, [r2, #48]	; 0x30
 800291a:	4b20      	ldr	r3, [pc, #128]	; (800299c <HAL_TIM_MspPostInit+0xb4>)
 800291c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	613b      	str	r3, [r7, #16]
 8002924:	693b      	ldr	r3, [r7, #16]
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    PA11     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11;
 8002926:	f44f 6370 	mov.w	r3, #3840	; 0xf00
 800292a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800292c:	2302      	movs	r3, #2
 800292e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002930:	2300      	movs	r3, #0
 8002932:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002934:	2300      	movs	r3, #0
 8002936:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002938:	2301      	movs	r3, #1
 800293a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800293c:	f107 0314 	add.w	r3, r7, #20
 8002940:	4619      	mov	r1, r3
 8002942:	4817      	ldr	r0, [pc, #92]	; (80029a0 <HAL_TIM_MspPostInit+0xb8>)
 8002944:	f000 fcde 	bl	8003304 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002948:	e022      	b.n	8002990 <HAL_TIM_MspPostInit+0xa8>
  else if(htim->Instance==TIM9)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a15      	ldr	r2, [pc, #84]	; (80029a4 <HAL_TIM_MspPostInit+0xbc>)
 8002950:	4293      	cmp	r3, r2
 8002952:	d11d      	bne.n	8002990 <HAL_TIM_MspPostInit+0xa8>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002954:	2300      	movs	r3, #0
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	4b10      	ldr	r3, [pc, #64]	; (800299c <HAL_TIM_MspPostInit+0xb4>)
 800295a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800295c:	4a0f      	ldr	r2, [pc, #60]	; (800299c <HAL_TIM_MspPostInit+0xb4>)
 800295e:	f043 0301 	orr.w	r3, r3, #1
 8002962:	6313      	str	r3, [r2, #48]	; 0x30
 8002964:	4b0d      	ldr	r3, [pc, #52]	; (800299c <HAL_TIM_MspPostInit+0xb4>)
 8002966:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002968:	f003 0301 	and.w	r3, r3, #1
 800296c:	60fb      	str	r3, [r7, #12]
 800296e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002970:	230c      	movs	r3, #12
 8002972:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002974:	2302      	movs	r3, #2
 8002976:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002978:	2300      	movs	r3, #0
 800297a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800297c:	2300      	movs	r3, #0
 800297e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 8002980:	2303      	movs	r3, #3
 8002982:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002984:	f107 0314 	add.w	r3, r7, #20
 8002988:	4619      	mov	r1, r3
 800298a:	4805      	ldr	r0, [pc, #20]	; (80029a0 <HAL_TIM_MspPostInit+0xb8>)
 800298c:	f000 fcba 	bl	8003304 <HAL_GPIO_Init>
}
 8002990:	bf00      	nop
 8002992:	3728      	adds	r7, #40	; 0x28
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	40010000 	.word	0x40010000
 800299c:	40023800 	.word	0x40023800
 80029a0:	40020000 	.word	0x40020000
 80029a4:	40014000 	.word	0x40014000

080029a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b08a      	sub	sp, #40	; 0x28
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029b0:	f107 0314 	add.w	r3, r7, #20
 80029b4:	2200      	movs	r2, #0
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	605a      	str	r2, [r3, #4]
 80029ba:	609a      	str	r2, [r3, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	4a19      	ldr	r2, [pc, #100]	; (8002a2c <HAL_UART_MspInit+0x84>)
 80029c6:	4293      	cmp	r3, r2
 80029c8:	d12c      	bne.n	8002a24 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80029ca:	2300      	movs	r3, #0
 80029cc:	613b      	str	r3, [r7, #16]
 80029ce:	4b18      	ldr	r3, [pc, #96]	; (8002a30 <HAL_UART_MspInit+0x88>)
 80029d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d2:	4a17      	ldr	r2, [pc, #92]	; (8002a30 <HAL_UART_MspInit+0x88>)
 80029d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80029d8:	6413      	str	r3, [r2, #64]	; 0x40
 80029da:	4b15      	ldr	r3, [pc, #84]	; (8002a30 <HAL_UART_MspInit+0x88>)
 80029dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80029e2:	613b      	str	r3, [r7, #16]
 80029e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e6:	2300      	movs	r3, #0
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	4b11      	ldr	r3, [pc, #68]	; (8002a30 <HAL_UART_MspInit+0x88>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	4a10      	ldr	r2, [pc, #64]	; (8002a30 <HAL_UART_MspInit+0x88>)
 80029f0:	f043 0304 	orr.w	r3, r3, #4
 80029f4:	6313      	str	r3, [r2, #48]	; 0x30
 80029f6:	4b0e      	ldr	r3, [pc, #56]	; (8002a30 <HAL_UART_MspInit+0x88>)
 80029f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029fa:	f003 0304 	and.w	r3, r3, #4
 80029fe:	60fb      	str	r3, [r7, #12]
 8002a00:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a02:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a08:	2302      	movs	r3, #2
 8002a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a10:	2303      	movs	r3, #3
 8002a12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002a14:	2308      	movs	r3, #8
 8002a16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a18:	f107 0314 	add.w	r3, r7, #20
 8002a1c:	4619      	mov	r1, r3
 8002a1e:	4805      	ldr	r0, [pc, #20]	; (8002a34 <HAL_UART_MspInit+0x8c>)
 8002a20:	f000 fc70 	bl	8003304 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8002a24:	bf00      	nop
 8002a26:	3728      	adds	r7, #40	; 0x28
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	bd80      	pop	{r7, pc}
 8002a2c:	40004c00 	.word	0x40004c00
 8002a30:	40023800 	.word	0x40023800
 8002a34:	40020800 	.word	0x40020800

08002a38 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a3c:	e7fe      	b.n	8002a3c <NMI_Handler+0x4>

08002a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a3e:	b480      	push	{r7}
 8002a40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a42:	e7fe      	b.n	8002a42 <HardFault_Handler+0x4>

08002a44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a48:	e7fe      	b.n	8002a48 <MemManage_Handler+0x4>

08002a4a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a4e:	e7fe      	b.n	8002a4e <BusFault_Handler+0x4>

08002a50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a50:	b480      	push	{r7}
 8002a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a54:	e7fe      	b.n	8002a54 <UsageFault_Handler+0x4>

08002a56 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a56:	b480      	push	{r7}
 8002a58:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a5a:	bf00      	nop
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a64:	b480      	push	{r7}
 8002a66:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a68:	bf00      	nop
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr

08002a72 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a72:	b480      	push	{r7}
 8002a74:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a76:	bf00      	nop
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr

08002a80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a80:	b580      	push	{r7, lr}
 8002a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a84:	f000 f89a 	bl	8002bbc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a88:	bf00      	nop
 8002a8a:	bd80      	pop	{r7, pc}

08002a8c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8002a8c:	b580      	push	{r7, lr}
 8002a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8002a90:	4802      	ldr	r0, [pc, #8]	; (8002a9c <TIM7_IRQHandler+0x10>)
 8002a92:	f001 fed9 	bl	8004848 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8002a96:	bf00      	nop
 8002a98:	bd80      	pop	{r7, pc}
 8002a9a:	bf00      	nop
 8002a9c:	20000300 	.word	0x20000300

08002aa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002aa4:	4b06      	ldr	r3, [pc, #24]	; (8002ac0 <SystemInit+0x20>)
 8002aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002aaa:	4a05      	ldr	r2, [pc, #20]	; (8002ac0 <SystemInit+0x20>)
 8002aac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002ab0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ab4:	bf00      	nop
 8002ab6:	46bd      	mov	sp, r7
 8002ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002ac4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002afc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002ac8:	480d      	ldr	r0, [pc, #52]	; (8002b00 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002aca:	490e      	ldr	r1, [pc, #56]	; (8002b04 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002acc:	4a0e      	ldr	r2, [pc, #56]	; (8002b08 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ace:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ad0:	e002      	b.n	8002ad8 <LoopCopyDataInit>

08002ad2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ad2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ad4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ad6:	3304      	adds	r3, #4

08002ad8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ad8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ada:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002adc:	d3f9      	bcc.n	8002ad2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002ade:	4a0b      	ldr	r2, [pc, #44]	; (8002b0c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002ae0:	4c0b      	ldr	r4, [pc, #44]	; (8002b10 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002ae2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ae4:	e001      	b.n	8002aea <LoopFillZerobss>

08002ae6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ae6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ae8:	3204      	adds	r2, #4

08002aea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002aea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002aec:	d3fb      	bcc.n	8002ae6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002aee:	f7ff ffd7 	bl	8002aa0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002af2:	f003 fc83 	bl	80063fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002af6:	f7fe fe15 	bl	8001724 <main>
  bx  lr    
 8002afa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002afc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002b00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b04:	20000130 	.word	0x20000130
  ldr r2, =_sidata
 8002b08:	08006868 	.word	0x08006868
  ldr r2, =_sbss
 8002b0c:	20000130 	.word	0x20000130
  ldr r4, =_ebss
 8002b10:	20000440 	.word	0x20000440

08002b14 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b14:	e7fe      	b.n	8002b14 <ADC_IRQHandler>
	...

08002b18 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b18:	b580      	push	{r7, lr}
 8002b1a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b1c:	4b0e      	ldr	r3, [pc, #56]	; (8002b58 <HAL_Init+0x40>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4a0d      	ldr	r2, [pc, #52]	; (8002b58 <HAL_Init+0x40>)
 8002b22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b26:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b28:	4b0b      	ldr	r3, [pc, #44]	; (8002b58 <HAL_Init+0x40>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a0a      	ldr	r2, [pc, #40]	; (8002b58 <HAL_Init+0x40>)
 8002b2e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b32:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b34:	4b08      	ldr	r3, [pc, #32]	; (8002b58 <HAL_Init+0x40>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a07      	ldr	r2, [pc, #28]	; (8002b58 <HAL_Init+0x40>)
 8002b3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b3e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b40:	2003      	movs	r0, #3
 8002b42:	f000 fb9d 	bl	8003280 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b46:	2000      	movs	r0, #0
 8002b48:	f000 f808 	bl	8002b5c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002b4c:	f7ff fcde 	bl	800250c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002b50:	2300      	movs	r3, #0
}
 8002b52:	4618      	mov	r0, r3
 8002b54:	bd80      	pop	{r7, pc}
 8002b56:	bf00      	nop
 8002b58:	40023c00 	.word	0x40023c00

08002b5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002b64:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <HAL_InitTick+0x54>)
 8002b66:	681a      	ldr	r2, [r3, #0]
 8002b68:	4b12      	ldr	r3, [pc, #72]	; (8002bb4 <HAL_InitTick+0x58>)
 8002b6a:	781b      	ldrb	r3, [r3, #0]
 8002b6c:	4619      	mov	r1, r3
 8002b6e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002b72:	fbb3 f3f1 	udiv	r3, r3, r1
 8002b76:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f000 fbb5 	bl	80032ea <HAL_SYSTICK_Config>
 8002b80:	4603      	mov	r3, r0
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d001      	beq.n	8002b8a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002b86:	2301      	movs	r3, #1
 8002b88:	e00e      	b.n	8002ba8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2b0f      	cmp	r3, #15
 8002b8e:	d80a      	bhi.n	8002ba6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002b90:	2200      	movs	r2, #0
 8002b92:	6879      	ldr	r1, [r7, #4]
 8002b94:	f04f 30ff 	mov.w	r0, #4294967295
 8002b98:	f000 fb7d 	bl	8003296 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002b9c:	4a06      	ldr	r2, [pc, #24]	; (8002bb8 <HAL_InitTick+0x5c>)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002ba2:	2300      	movs	r3, #0
 8002ba4:	e000      	b.n	8002ba8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
}
 8002ba8:	4618      	mov	r0, r3
 8002baa:	3708      	adds	r7, #8
 8002bac:	46bd      	mov	sp, r7
 8002bae:	bd80      	pop	{r7, pc}
 8002bb0:	20000124 	.word	0x20000124
 8002bb4:	2000012c 	.word	0x2000012c
 8002bb8:	20000128 	.word	0x20000128

08002bbc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002bbc:	b480      	push	{r7}
 8002bbe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <HAL_IncTick+0x20>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	461a      	mov	r2, r3
 8002bc6:	4b06      	ldr	r3, [pc, #24]	; (8002be0 <HAL_IncTick+0x24>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4413      	add	r3, r2
 8002bcc:	4a04      	ldr	r2, [pc, #16]	; (8002be0 <HAL_IncTick+0x24>)
 8002bce:	6013      	str	r3, [r2, #0]
}
 8002bd0:	bf00      	nop
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	2000012c 	.word	0x2000012c
 8002be0:	2000043c 	.word	0x2000043c

08002be4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  return uwTick;
 8002be8:	4b03      	ldr	r3, [pc, #12]	; (8002bf8 <HAL_GetTick+0x14>)
 8002bea:	681b      	ldr	r3, [r3, #0]
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	2000043c 	.word	0x2000043c

08002bfc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b084      	sub	sp, #16
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c04:	2300      	movs	r3, #0
 8002c06:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d101      	bne.n	8002c12 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	e033      	b.n	8002c7a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d109      	bne.n	8002c2e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002c1a:	6878      	ldr	r0, [r7, #4]
 8002c1c:	f7ff fc9e 	bl	800255c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2200      	movs	r2, #0
 8002c2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c32:	f003 0310 	and.w	r3, r3, #16
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d118      	bne.n	8002c6c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c3e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002c42:	f023 0302 	bic.w	r3, r3, #2
 8002c46:	f043 0202 	orr.w	r2, r3, #2
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f000 f94a 	bl	8002ee8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5e:	f023 0303 	bic.w	r3, r3, #3
 8002c62:	f043 0201 	orr.w	r2, r3, #1
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	641a      	str	r2, [r3, #64]	; 0x40
 8002c6a:	e001      	b.n	8002c70 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002c6c:	2301      	movs	r3, #1
 8002c6e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	3710      	adds	r7, #16
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}
	...

08002c84 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002c84:	b480      	push	{r7}
 8002c86:	b085      	sub	sp, #20
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d101      	bne.n	8002ca0 <HAL_ADC_ConfigChannel+0x1c>
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	e113      	b.n	8002ec8 <HAL_ADC_ConfigChannel+0x244>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	2b09      	cmp	r3, #9
 8002cae:	d925      	bls.n	8002cfc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	68d9      	ldr	r1, [r3, #12]
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	b29b      	uxth	r3, r3
 8002cbc:	461a      	mov	r2, r3
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	005b      	lsls	r3, r3, #1
 8002cc2:	4413      	add	r3, r2
 8002cc4:	3b1e      	subs	r3, #30
 8002cc6:	2207      	movs	r2, #7
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43da      	mvns	r2, r3
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	400a      	ands	r2, r1
 8002cd4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68d9      	ldr	r1, [r3, #12]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	689a      	ldr	r2, [r3, #8]
 8002ce0:	683b      	ldr	r3, [r7, #0]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	4603      	mov	r3, r0
 8002cea:	005b      	lsls	r3, r3, #1
 8002cec:	4403      	add	r3, r0
 8002cee:	3b1e      	subs	r3, #30
 8002cf0:	409a      	lsls	r2, r3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	430a      	orrs	r2, r1
 8002cf8:	60da      	str	r2, [r3, #12]
 8002cfa:	e022      	b.n	8002d42 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	6919      	ldr	r1, [r3, #16]
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	461a      	mov	r2, r3
 8002d0a:	4613      	mov	r3, r2
 8002d0c:	005b      	lsls	r3, r3, #1
 8002d0e:	4413      	add	r3, r2
 8002d10:	2207      	movs	r2, #7
 8002d12:	fa02 f303 	lsl.w	r3, r2, r3
 8002d16:	43da      	mvns	r2, r3
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	400a      	ands	r2, r1
 8002d1e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	6919      	ldr	r1, [r3, #16]
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	689a      	ldr	r2, [r3, #8]
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	b29b      	uxth	r3, r3
 8002d30:	4618      	mov	r0, r3
 8002d32:	4603      	mov	r3, r0
 8002d34:	005b      	lsls	r3, r3, #1
 8002d36:	4403      	add	r3, r0
 8002d38:	409a      	lsls	r2, r3
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	430a      	orrs	r2, r1
 8002d40:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	685b      	ldr	r3, [r3, #4]
 8002d46:	2b06      	cmp	r3, #6
 8002d48:	d824      	bhi.n	8002d94 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685a      	ldr	r2, [r3, #4]
 8002d54:	4613      	mov	r3, r2
 8002d56:	009b      	lsls	r3, r3, #2
 8002d58:	4413      	add	r3, r2
 8002d5a:	3b05      	subs	r3, #5
 8002d5c:	221f      	movs	r2, #31
 8002d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d62:	43da      	mvns	r2, r3
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	400a      	ands	r2, r1
 8002d6a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	4618      	mov	r0, r3
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685a      	ldr	r2, [r3, #4]
 8002d7e:	4613      	mov	r3, r2
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	3b05      	subs	r3, #5
 8002d86:	fa00 f203 	lsl.w	r2, r0, r3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	430a      	orrs	r2, r1
 8002d90:	635a      	str	r2, [r3, #52]	; 0x34
 8002d92:	e04c      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	685b      	ldr	r3, [r3, #4]
 8002d98:	2b0c      	cmp	r3, #12
 8002d9a:	d824      	bhi.n	8002de6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685a      	ldr	r2, [r3, #4]
 8002da6:	4613      	mov	r3, r2
 8002da8:	009b      	lsls	r3, r3, #2
 8002daa:	4413      	add	r3, r2
 8002dac:	3b23      	subs	r3, #35	; 0x23
 8002dae:	221f      	movs	r2, #31
 8002db0:	fa02 f303 	lsl.w	r3, r2, r3
 8002db4:	43da      	mvns	r2, r3
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	400a      	ands	r2, r1
 8002dbc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	b29b      	uxth	r3, r3
 8002dca:	4618      	mov	r0, r3
 8002dcc:	683b      	ldr	r3, [r7, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	4613      	mov	r3, r2
 8002dd2:	009b      	lsls	r3, r3, #2
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3b23      	subs	r3, #35	; 0x23
 8002dd8:	fa00 f203 	lsl.w	r2, r0, r3
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	631a      	str	r2, [r3, #48]	; 0x30
 8002de4:	e023      	b.n	8002e2e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002dec:	683b      	ldr	r3, [r7, #0]
 8002dee:	685a      	ldr	r2, [r3, #4]
 8002df0:	4613      	mov	r3, r2
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	4413      	add	r3, r2
 8002df6:	3b41      	subs	r3, #65	; 0x41
 8002df8:	221f      	movs	r2, #31
 8002dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfe:	43da      	mvns	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	400a      	ands	r2, r1
 8002e06:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	b29b      	uxth	r3, r3
 8002e14:	4618      	mov	r0, r3
 8002e16:	683b      	ldr	r3, [r7, #0]
 8002e18:	685a      	ldr	r2, [r3, #4]
 8002e1a:	4613      	mov	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	4413      	add	r3, r2
 8002e20:	3b41      	subs	r3, #65	; 0x41
 8002e22:	fa00 f203 	lsl.w	r2, r0, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	430a      	orrs	r2, r1
 8002e2c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e2e:	4b29      	ldr	r3, [pc, #164]	; (8002ed4 <HAL_ADC_ConfigChannel+0x250>)
 8002e30:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4a28      	ldr	r2, [pc, #160]	; (8002ed8 <HAL_ADC_ConfigChannel+0x254>)
 8002e38:	4293      	cmp	r3, r2
 8002e3a:	d10f      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x1d8>
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	2b12      	cmp	r3, #18
 8002e42:	d10b      	bne.n	8002e5c <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	685b      	ldr	r3, [r3, #4]
 8002e48:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a1d      	ldr	r2, [pc, #116]	; (8002ed8 <HAL_ADC_ConfigChannel+0x254>)
 8002e62:	4293      	cmp	r3, r2
 8002e64:	d12b      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x23a>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a1c      	ldr	r2, [pc, #112]	; (8002edc <HAL_ADC_ConfigChannel+0x258>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d003      	beq.n	8002e78 <HAL_ADC_ConfigChannel+0x1f4>
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2b11      	cmp	r3, #17
 8002e76:	d122      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	685b      	ldr	r3, [r3, #4]
 8002e7c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	685b      	ldr	r3, [r3, #4]
 8002e88:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a11      	ldr	r2, [pc, #68]	; (8002edc <HAL_ADC_ConfigChannel+0x258>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d111      	bne.n	8002ebe <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002e9a:	4b11      	ldr	r3, [pc, #68]	; (8002ee0 <HAL_ADC_ConfigChannel+0x25c>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a11      	ldr	r2, [pc, #68]	; (8002ee4 <HAL_ADC_ConfigChannel+0x260>)
 8002ea0:	fba2 2303 	umull	r2, r3, r2, r3
 8002ea4:	0c9a      	lsrs	r2, r3, #18
 8002ea6:	4613      	mov	r3, r2
 8002ea8:	009b      	lsls	r3, r3, #2
 8002eaa:	4413      	add	r3, r2
 8002eac:	005b      	lsls	r3, r3, #1
 8002eae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002eb0:	e002      	b.n	8002eb8 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	3b01      	subs	r3, #1
 8002eb6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002eb8:	68bb      	ldr	r3, [r7, #8]
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d1f9      	bne.n	8002eb2 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ec6:	2300      	movs	r3, #0
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3714      	adds	r7, #20
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed2:	4770      	bx	lr
 8002ed4:	40012300 	.word	0x40012300
 8002ed8:	40012000 	.word	0x40012000
 8002edc:	10000012 	.word	0x10000012
 8002ee0:	20000124 	.word	0x20000124
 8002ee4:	431bde83 	.word	0x431bde83

08002ee8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ef0:	4b79      	ldr	r3, [pc, #484]	; (80030d8 <ADC_Init+0x1f0>)
 8002ef2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	431a      	orrs	r2, r3
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002f1c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6859      	ldr	r1, [r3, #4]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	691b      	ldr	r3, [r3, #16]
 8002f28:	021a      	lsls	r2, r3, #8
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	430a      	orrs	r2, r1
 8002f30:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002f40:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	6859      	ldr	r1, [r3, #4]
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	689a      	ldr	r2, [r3, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	430a      	orrs	r2, r1
 8002f52:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	689a      	ldr	r2, [r3, #8]
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002f62:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	6899      	ldr	r1, [r3, #8]
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68da      	ldr	r2, [r3, #12]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	430a      	orrs	r2, r1
 8002f74:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f7a:	4a58      	ldr	r2, [pc, #352]	; (80030dc <ADC_Init+0x1f4>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d022      	beq.n	8002fc6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	689a      	ldr	r2, [r3, #8]
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f8e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	6899      	ldr	r1, [r3, #8]
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	689a      	ldr	r2, [r3, #8]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fb0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	6899      	ldr	r1, [r3, #8]
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	430a      	orrs	r2, r1
 8002fc2:	609a      	str	r2, [r3, #8]
 8002fc4:	e00f      	b.n	8002fe6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	689a      	ldr	r2, [r3, #8]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fd4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002fe4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	689a      	ldr	r2, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0202 	bic.w	r2, r2, #2
 8002ff4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	6899      	ldr	r1, [r3, #8]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	7e1b      	ldrb	r3, [r3, #24]
 8003000:	005a      	lsls	r2, r3, #1
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	430a      	orrs	r2, r1
 8003008:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d01b      	beq.n	800304c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	685a      	ldr	r2, [r3, #4]
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003022:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	685a      	ldr	r2, [r3, #4]
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003032:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6859      	ldr	r1, [r3, #4]
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800303e:	3b01      	subs	r3, #1
 8003040:	035a      	lsls	r2, r3, #13
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	605a      	str	r2, [r3, #4]
 800304a:	e007      	b.n	800305c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	685a      	ldr	r2, [r3, #4]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800305a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800306a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	69db      	ldr	r3, [r3, #28]
 8003076:	3b01      	subs	r3, #1
 8003078:	051a      	lsls	r2, r3, #20
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003090:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6899      	ldr	r1, [r3, #8]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800309e:	025a      	lsls	r2, r3, #9
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	430a      	orrs	r2, r1
 80030a6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	689a      	ldr	r2, [r3, #8]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80030b6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	6899      	ldr	r1, [r3, #8]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	695b      	ldr	r3, [r3, #20]
 80030c2:	029a      	lsls	r2, r3, #10
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	430a      	orrs	r2, r1
 80030ca:	609a      	str	r2, [r3, #8]
}
 80030cc:	bf00      	nop
 80030ce:	3714      	adds	r7, #20
 80030d0:	46bd      	mov	sp, r7
 80030d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d6:	4770      	bx	lr
 80030d8:	40012300 	.word	0x40012300
 80030dc:	0f000001 	.word	0x0f000001

080030e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	f003 0307 	and.w	r3, r3, #7
 80030ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030f0:	4b0c      	ldr	r3, [pc, #48]	; (8003124 <__NVIC_SetPriorityGrouping+0x44>)
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030f6:	68ba      	ldr	r2, [r7, #8]
 80030f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030fc:	4013      	ands	r3, r2
 80030fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003104:	68bb      	ldr	r3, [r7, #8]
 8003106:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003108:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800310c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003110:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003112:	4a04      	ldr	r2, [pc, #16]	; (8003124 <__NVIC_SetPriorityGrouping+0x44>)
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	60d3      	str	r3, [r2, #12]
}
 8003118:	bf00      	nop
 800311a:	3714      	adds	r7, #20
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	e000ed00 	.word	0xe000ed00

08003128 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800312c:	4b04      	ldr	r3, [pc, #16]	; (8003140 <__NVIC_GetPriorityGrouping+0x18>)
 800312e:	68db      	ldr	r3, [r3, #12]
 8003130:	0a1b      	lsrs	r3, r3, #8
 8003132:	f003 0307 	and.w	r3, r3, #7
}
 8003136:	4618      	mov	r0, r3
 8003138:	46bd      	mov	sp, r7
 800313a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313e:	4770      	bx	lr
 8003140:	e000ed00 	.word	0xe000ed00

08003144 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003144:	b480      	push	{r7}
 8003146:	b083      	sub	sp, #12
 8003148:	af00      	add	r7, sp, #0
 800314a:	4603      	mov	r3, r0
 800314c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800314e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003152:	2b00      	cmp	r3, #0
 8003154:	db0b      	blt.n	800316e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003156:	79fb      	ldrb	r3, [r7, #7]
 8003158:	f003 021f 	and.w	r2, r3, #31
 800315c:	4907      	ldr	r1, [pc, #28]	; (800317c <__NVIC_EnableIRQ+0x38>)
 800315e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003162:	095b      	lsrs	r3, r3, #5
 8003164:	2001      	movs	r0, #1
 8003166:	fa00 f202 	lsl.w	r2, r0, r2
 800316a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
 800317a:	bf00      	nop
 800317c:	e000e100 	.word	0xe000e100

08003180 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003180:	b480      	push	{r7}
 8003182:	b083      	sub	sp, #12
 8003184:	af00      	add	r7, sp, #0
 8003186:	4603      	mov	r3, r0
 8003188:	6039      	str	r1, [r7, #0]
 800318a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800318c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003190:	2b00      	cmp	r3, #0
 8003192:	db0a      	blt.n	80031aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	b2da      	uxtb	r2, r3
 8003198:	490c      	ldr	r1, [pc, #48]	; (80031cc <__NVIC_SetPriority+0x4c>)
 800319a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800319e:	0112      	lsls	r2, r2, #4
 80031a0:	b2d2      	uxtb	r2, r2
 80031a2:	440b      	add	r3, r1
 80031a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80031a8:	e00a      	b.n	80031c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	4908      	ldr	r1, [pc, #32]	; (80031d0 <__NVIC_SetPriority+0x50>)
 80031b0:	79fb      	ldrb	r3, [r7, #7]
 80031b2:	f003 030f 	and.w	r3, r3, #15
 80031b6:	3b04      	subs	r3, #4
 80031b8:	0112      	lsls	r2, r2, #4
 80031ba:	b2d2      	uxtb	r2, r2
 80031bc:	440b      	add	r3, r1
 80031be:	761a      	strb	r2, [r3, #24]
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	e000e100 	.word	0xe000e100
 80031d0:	e000ed00 	.word	0xe000ed00

080031d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b089      	sub	sp, #36	; 0x24
 80031d8:	af00      	add	r7, sp, #0
 80031da:	60f8      	str	r0, [r7, #12]
 80031dc:	60b9      	str	r1, [r7, #8]
 80031de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f003 0307 	and.w	r3, r3, #7
 80031e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f1c3 0307 	rsb	r3, r3, #7
 80031ee:	2b04      	cmp	r3, #4
 80031f0:	bf28      	it	cs
 80031f2:	2304      	movcs	r3, #4
 80031f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031f6:	69fb      	ldr	r3, [r7, #28]
 80031f8:	3304      	adds	r3, #4
 80031fa:	2b06      	cmp	r3, #6
 80031fc:	d902      	bls.n	8003204 <NVIC_EncodePriority+0x30>
 80031fe:	69fb      	ldr	r3, [r7, #28]
 8003200:	3b03      	subs	r3, #3
 8003202:	e000      	b.n	8003206 <NVIC_EncodePriority+0x32>
 8003204:	2300      	movs	r3, #0
 8003206:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003208:	f04f 32ff 	mov.w	r2, #4294967295
 800320c:	69bb      	ldr	r3, [r7, #24]
 800320e:	fa02 f303 	lsl.w	r3, r2, r3
 8003212:	43da      	mvns	r2, r3
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	401a      	ands	r2, r3
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800321c:	f04f 31ff 	mov.w	r1, #4294967295
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	fa01 f303 	lsl.w	r3, r1, r3
 8003226:	43d9      	mvns	r1, r3
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800322c:	4313      	orrs	r3, r2
         );
}
 800322e:	4618      	mov	r0, r3
 8003230:	3724      	adds	r7, #36	; 0x24
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr
	...

0800323c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800323c:	b580      	push	{r7, lr}
 800323e:	b082      	sub	sp, #8
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	3b01      	subs	r3, #1
 8003248:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800324c:	d301      	bcc.n	8003252 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800324e:	2301      	movs	r3, #1
 8003250:	e00f      	b.n	8003272 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003252:	4a0a      	ldr	r2, [pc, #40]	; (800327c <SysTick_Config+0x40>)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	3b01      	subs	r3, #1
 8003258:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800325a:	210f      	movs	r1, #15
 800325c:	f04f 30ff 	mov.w	r0, #4294967295
 8003260:	f7ff ff8e 	bl	8003180 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003264:	4b05      	ldr	r3, [pc, #20]	; (800327c <SysTick_Config+0x40>)
 8003266:	2200      	movs	r2, #0
 8003268:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800326a:	4b04      	ldr	r3, [pc, #16]	; (800327c <SysTick_Config+0x40>)
 800326c:	2207      	movs	r2, #7
 800326e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	e000e010 	.word	0xe000e010

08003280 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f7ff ff29 	bl	80030e0 <__NVIC_SetPriorityGrouping>
}
 800328e:	bf00      	nop
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003296:	b580      	push	{r7, lr}
 8003298:	b086      	sub	sp, #24
 800329a:	af00      	add	r7, sp, #0
 800329c:	4603      	mov	r3, r0
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
 80032a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80032a8:	f7ff ff3e 	bl	8003128 <__NVIC_GetPriorityGrouping>
 80032ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	68b9      	ldr	r1, [r7, #8]
 80032b2:	6978      	ldr	r0, [r7, #20]
 80032b4:	f7ff ff8e 	bl	80031d4 <NVIC_EncodePriority>
 80032b8:	4602      	mov	r2, r0
 80032ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80032be:	4611      	mov	r1, r2
 80032c0:	4618      	mov	r0, r3
 80032c2:	f7ff ff5d 	bl	8003180 <__NVIC_SetPriority>
}
 80032c6:	bf00      	nop
 80032c8:	3718      	adds	r7, #24
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bd80      	pop	{r7, pc}

080032ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ce:	b580      	push	{r7, lr}
 80032d0:	b082      	sub	sp, #8
 80032d2:	af00      	add	r7, sp, #0
 80032d4:	4603      	mov	r3, r0
 80032d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff31 	bl	8003144 <__NVIC_EnableIRQ>
}
 80032e2:	bf00      	nop
 80032e4:	3708      	adds	r7, #8
 80032e6:	46bd      	mov	sp, r7
 80032e8:	bd80      	pop	{r7, pc}

080032ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ea:	b580      	push	{r7, lr}
 80032ec:	b082      	sub	sp, #8
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f7ff ffa2 	bl	800323c <SysTick_Config>
 80032f8:	4603      	mov	r3, r0
}
 80032fa:	4618      	mov	r0, r3
 80032fc:	3708      	adds	r7, #8
 80032fe:	46bd      	mov	sp, r7
 8003300:	bd80      	pop	{r7, pc}
	...

08003304 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003304:	b480      	push	{r7}
 8003306:	b089      	sub	sp, #36	; 0x24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
 800330c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800330e:	2300      	movs	r3, #0
 8003310:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003312:	2300      	movs	r3, #0
 8003314:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003316:	2300      	movs	r3, #0
 8003318:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800331a:	2300      	movs	r3, #0
 800331c:	61fb      	str	r3, [r7, #28]
 800331e:	e165      	b.n	80035ec <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003320:	2201      	movs	r2, #1
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	fa02 f303 	lsl.w	r3, r2, r3
 8003328:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	697a      	ldr	r2, [r7, #20]
 8003330:	4013      	ands	r3, r2
 8003332:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003334:	693a      	ldr	r2, [r7, #16]
 8003336:	697b      	ldr	r3, [r7, #20]
 8003338:	429a      	cmp	r2, r3
 800333a:	f040 8154 	bne.w	80035e6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f003 0303 	and.w	r3, r3, #3
 8003346:	2b01      	cmp	r3, #1
 8003348:	d005      	beq.n	8003356 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800334a:	683b      	ldr	r3, [r7, #0]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003352:	2b02      	cmp	r3, #2
 8003354:	d130      	bne.n	80033b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	689b      	ldr	r3, [r3, #8]
 800335a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800335c:	69fb      	ldr	r3, [r7, #28]
 800335e:	005b      	lsls	r3, r3, #1
 8003360:	2203      	movs	r2, #3
 8003362:	fa02 f303 	lsl.w	r3, r2, r3
 8003366:	43db      	mvns	r3, r3
 8003368:	69ba      	ldr	r2, [r7, #24]
 800336a:	4013      	ands	r3, r2
 800336c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800336e:	683b      	ldr	r3, [r7, #0]
 8003370:	68da      	ldr	r2, [r3, #12]
 8003372:	69fb      	ldr	r3, [r7, #28]
 8003374:	005b      	lsls	r3, r3, #1
 8003376:	fa02 f303 	lsl.w	r3, r2, r3
 800337a:	69ba      	ldr	r2, [r7, #24]
 800337c:	4313      	orrs	r3, r2
 800337e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800338c:	2201      	movs	r2, #1
 800338e:	69fb      	ldr	r3, [r7, #28]
 8003390:	fa02 f303 	lsl.w	r3, r2, r3
 8003394:	43db      	mvns	r3, r3
 8003396:	69ba      	ldr	r2, [r7, #24]
 8003398:	4013      	ands	r3, r2
 800339a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	091b      	lsrs	r3, r3, #4
 80033a2:	f003 0201 	and.w	r2, r3, #1
 80033a6:	69fb      	ldr	r3, [r7, #28]
 80033a8:	fa02 f303 	lsl.w	r3, r2, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	69ba      	ldr	r2, [r7, #24]
 80033b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	f003 0303 	and.w	r3, r3, #3
 80033c0:	2b03      	cmp	r3, #3
 80033c2:	d017      	beq.n	80033f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68db      	ldr	r3, [r3, #12]
 80033c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80033ca:	69fb      	ldr	r3, [r7, #28]
 80033cc:	005b      	lsls	r3, r3, #1
 80033ce:	2203      	movs	r2, #3
 80033d0:	fa02 f303 	lsl.w	r3, r2, r3
 80033d4:	43db      	mvns	r3, r3
 80033d6:	69ba      	ldr	r2, [r7, #24]
 80033d8:	4013      	ands	r3, r2
 80033da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	689a      	ldr	r2, [r3, #8]
 80033e0:	69fb      	ldr	r3, [r7, #28]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	fa02 f303 	lsl.w	r3, r2, r3
 80033e8:	69ba      	ldr	r2, [r7, #24]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	69ba      	ldr	r2, [r7, #24]
 80033f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f003 0303 	and.w	r3, r3, #3
 80033fc:	2b02      	cmp	r3, #2
 80033fe:	d123      	bne.n	8003448 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003400:	69fb      	ldr	r3, [r7, #28]
 8003402:	08da      	lsrs	r2, r3, #3
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	3208      	adds	r2, #8
 8003408:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800340c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800340e:	69fb      	ldr	r3, [r7, #28]
 8003410:	f003 0307 	and.w	r3, r3, #7
 8003414:	009b      	lsls	r3, r3, #2
 8003416:	220f      	movs	r2, #15
 8003418:	fa02 f303 	lsl.w	r3, r2, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4013      	ands	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	691a      	ldr	r2, [r3, #16]
 8003428:	69fb      	ldr	r3, [r7, #28]
 800342a:	f003 0307 	and.w	r3, r3, #7
 800342e:	009b      	lsls	r3, r3, #2
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	4313      	orrs	r3, r2
 8003438:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800343a:	69fb      	ldr	r3, [r7, #28]
 800343c:	08da      	lsrs	r2, r3, #3
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	3208      	adds	r2, #8
 8003442:	69b9      	ldr	r1, [r7, #24]
 8003444:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800344e:	69fb      	ldr	r3, [r7, #28]
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	2203      	movs	r2, #3
 8003454:	fa02 f303 	lsl.w	r3, r2, r3
 8003458:	43db      	mvns	r3, r3
 800345a:	69ba      	ldr	r2, [r7, #24]
 800345c:	4013      	ands	r3, r2
 800345e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	685b      	ldr	r3, [r3, #4]
 8003464:	f003 0203 	and.w	r2, r3, #3
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	fa02 f303 	lsl.w	r3, r2, r3
 8003470:	69ba      	ldr	r2, [r7, #24]
 8003472:	4313      	orrs	r3, r2
 8003474:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003484:	2b00      	cmp	r3, #0
 8003486:	f000 80ae 	beq.w	80035e6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	60fb      	str	r3, [r7, #12]
 800348e:	4b5d      	ldr	r3, [pc, #372]	; (8003604 <HAL_GPIO_Init+0x300>)
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	4a5c      	ldr	r2, [pc, #368]	; (8003604 <HAL_GPIO_Init+0x300>)
 8003494:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003498:	6453      	str	r3, [r2, #68]	; 0x44
 800349a:	4b5a      	ldr	r3, [pc, #360]	; (8003604 <HAL_GPIO_Init+0x300>)
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034a2:	60fb      	str	r3, [r7, #12]
 80034a4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80034a6:	4a58      	ldr	r2, [pc, #352]	; (8003608 <HAL_GPIO_Init+0x304>)
 80034a8:	69fb      	ldr	r3, [r7, #28]
 80034aa:	089b      	lsrs	r3, r3, #2
 80034ac:	3302      	adds	r3, #2
 80034ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80034b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80034b4:	69fb      	ldr	r3, [r7, #28]
 80034b6:	f003 0303 	and.w	r3, r3, #3
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	220f      	movs	r2, #15
 80034be:	fa02 f303 	lsl.w	r3, r2, r3
 80034c2:	43db      	mvns	r3, r3
 80034c4:	69ba      	ldr	r2, [r7, #24]
 80034c6:	4013      	ands	r3, r2
 80034c8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	4a4f      	ldr	r2, [pc, #316]	; (800360c <HAL_GPIO_Init+0x308>)
 80034ce:	4293      	cmp	r3, r2
 80034d0:	d025      	beq.n	800351e <HAL_GPIO_Init+0x21a>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	4a4e      	ldr	r2, [pc, #312]	; (8003610 <HAL_GPIO_Init+0x30c>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d01f      	beq.n	800351a <HAL_GPIO_Init+0x216>
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	4a4d      	ldr	r2, [pc, #308]	; (8003614 <HAL_GPIO_Init+0x310>)
 80034de:	4293      	cmp	r3, r2
 80034e0:	d019      	beq.n	8003516 <HAL_GPIO_Init+0x212>
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	4a4c      	ldr	r2, [pc, #304]	; (8003618 <HAL_GPIO_Init+0x314>)
 80034e6:	4293      	cmp	r3, r2
 80034e8:	d013      	beq.n	8003512 <HAL_GPIO_Init+0x20e>
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	4a4b      	ldr	r2, [pc, #300]	; (800361c <HAL_GPIO_Init+0x318>)
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d00d      	beq.n	800350e <HAL_GPIO_Init+0x20a>
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	4a4a      	ldr	r2, [pc, #296]	; (8003620 <HAL_GPIO_Init+0x31c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d007      	beq.n	800350a <HAL_GPIO_Init+0x206>
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	4a49      	ldr	r2, [pc, #292]	; (8003624 <HAL_GPIO_Init+0x320>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d101      	bne.n	8003506 <HAL_GPIO_Init+0x202>
 8003502:	2306      	movs	r3, #6
 8003504:	e00c      	b.n	8003520 <HAL_GPIO_Init+0x21c>
 8003506:	2307      	movs	r3, #7
 8003508:	e00a      	b.n	8003520 <HAL_GPIO_Init+0x21c>
 800350a:	2305      	movs	r3, #5
 800350c:	e008      	b.n	8003520 <HAL_GPIO_Init+0x21c>
 800350e:	2304      	movs	r3, #4
 8003510:	e006      	b.n	8003520 <HAL_GPIO_Init+0x21c>
 8003512:	2303      	movs	r3, #3
 8003514:	e004      	b.n	8003520 <HAL_GPIO_Init+0x21c>
 8003516:	2302      	movs	r3, #2
 8003518:	e002      	b.n	8003520 <HAL_GPIO_Init+0x21c>
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <HAL_GPIO_Init+0x21c>
 800351e:	2300      	movs	r3, #0
 8003520:	69fa      	ldr	r2, [r7, #28]
 8003522:	f002 0203 	and.w	r2, r2, #3
 8003526:	0092      	lsls	r2, r2, #2
 8003528:	4093      	lsls	r3, r2
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4313      	orrs	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003530:	4935      	ldr	r1, [pc, #212]	; (8003608 <HAL_GPIO_Init+0x304>)
 8003532:	69fb      	ldr	r3, [r7, #28]
 8003534:	089b      	lsrs	r3, r3, #2
 8003536:	3302      	adds	r3, #2
 8003538:	69ba      	ldr	r2, [r7, #24]
 800353a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800353e:	4b3a      	ldr	r3, [pc, #232]	; (8003628 <HAL_GPIO_Init+0x324>)
 8003540:	689b      	ldr	r3, [r3, #8]
 8003542:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003544:	693b      	ldr	r3, [r7, #16]
 8003546:	43db      	mvns	r3, r3
 8003548:	69ba      	ldr	r2, [r7, #24]
 800354a:	4013      	ands	r3, r2
 800354c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800355a:	69ba      	ldr	r2, [r7, #24]
 800355c:	693b      	ldr	r3, [r7, #16]
 800355e:	4313      	orrs	r3, r2
 8003560:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003562:	4a31      	ldr	r2, [pc, #196]	; (8003628 <HAL_GPIO_Init+0x324>)
 8003564:	69bb      	ldr	r3, [r7, #24]
 8003566:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003568:	4b2f      	ldr	r3, [pc, #188]	; (8003628 <HAL_GPIO_Init+0x324>)
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	43db      	mvns	r3, r3
 8003572:	69ba      	ldr	r2, [r7, #24]
 8003574:	4013      	ands	r3, r2
 8003576:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003580:	2b00      	cmp	r3, #0
 8003582:	d003      	beq.n	800358c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	693b      	ldr	r3, [r7, #16]
 8003588:	4313      	orrs	r3, r2
 800358a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800358c:	4a26      	ldr	r2, [pc, #152]	; (8003628 <HAL_GPIO_Init+0x324>)
 800358e:	69bb      	ldr	r3, [r7, #24]
 8003590:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003592:	4b25      	ldr	r3, [pc, #148]	; (8003628 <HAL_GPIO_Init+0x324>)
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003598:	693b      	ldr	r3, [r7, #16]
 800359a:	43db      	mvns	r3, r3
 800359c:	69ba      	ldr	r2, [r7, #24]
 800359e:	4013      	ands	r3, r2
 80035a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d003      	beq.n	80035b6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80035ae:	69ba      	ldr	r2, [r7, #24]
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	4313      	orrs	r3, r2
 80035b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80035b6:	4a1c      	ldr	r2, [pc, #112]	; (8003628 <HAL_GPIO_Init+0x324>)
 80035b8:	69bb      	ldr	r3, [r7, #24]
 80035ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80035bc:	4b1a      	ldr	r3, [pc, #104]	; (8003628 <HAL_GPIO_Init+0x324>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	43db      	mvns	r3, r3
 80035c6:	69ba      	ldr	r2, [r7, #24]
 80035c8:	4013      	ands	r3, r2
 80035ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d003      	beq.n	80035e0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80035d8:	69ba      	ldr	r2, [r7, #24]
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	4313      	orrs	r3, r2
 80035de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80035e0:	4a11      	ldr	r2, [pc, #68]	; (8003628 <HAL_GPIO_Init+0x324>)
 80035e2:	69bb      	ldr	r3, [r7, #24]
 80035e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80035e6:	69fb      	ldr	r3, [r7, #28]
 80035e8:	3301      	adds	r3, #1
 80035ea:	61fb      	str	r3, [r7, #28]
 80035ec:	69fb      	ldr	r3, [r7, #28]
 80035ee:	2b0f      	cmp	r3, #15
 80035f0:	f67f ae96 	bls.w	8003320 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80035f4:	bf00      	nop
 80035f6:	bf00      	nop
 80035f8:	3724      	adds	r7, #36	; 0x24
 80035fa:	46bd      	mov	sp, r7
 80035fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003600:	4770      	bx	lr
 8003602:	bf00      	nop
 8003604:	40023800 	.word	0x40023800
 8003608:	40013800 	.word	0x40013800
 800360c:	40020000 	.word	0x40020000
 8003610:	40020400 	.word	0x40020400
 8003614:	40020800 	.word	0x40020800
 8003618:	40020c00 	.word	0x40020c00
 800361c:	40021000 	.word	0x40021000
 8003620:	40021400 	.word	0x40021400
 8003624:	40021800 	.word	0x40021800
 8003628:	40013c00 	.word	0x40013c00

0800362c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
 8003634:	460b      	mov	r3, r1
 8003636:	807b      	strh	r3, [r7, #2]
 8003638:	4613      	mov	r3, r2
 800363a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800363c:	787b      	ldrb	r3, [r7, #1]
 800363e:	2b00      	cmp	r3, #0
 8003640:	d003      	beq.n	800364a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003642:	887a      	ldrh	r2, [r7, #2]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003648:	e003      	b.n	8003652 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800364a:	887b      	ldrh	r3, [r7, #2]
 800364c:	041a      	lsls	r2, r3, #16
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	619a      	str	r2, [r3, #24]
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
	...

08003660 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d101      	bne.n	8003674 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003670:	2301      	movs	r3, #1
 8003672:	e0cc      	b.n	800380e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003674:	4b68      	ldr	r3, [pc, #416]	; (8003818 <HAL_RCC_ClockConfig+0x1b8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 030f 	and.w	r3, r3, #15
 800367c:	683a      	ldr	r2, [r7, #0]
 800367e:	429a      	cmp	r2, r3
 8003680:	d90c      	bls.n	800369c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003682:	4b65      	ldr	r3, [pc, #404]	; (8003818 <HAL_RCC_ClockConfig+0x1b8>)
 8003684:	683a      	ldr	r2, [r7, #0]
 8003686:	b2d2      	uxtb	r2, r2
 8003688:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800368a:	4b63      	ldr	r3, [pc, #396]	; (8003818 <HAL_RCC_ClockConfig+0x1b8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	683a      	ldr	r2, [r7, #0]
 8003694:	429a      	cmp	r2, r3
 8003696:	d001      	beq.n	800369c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e0b8      	b.n	800380e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f003 0302 	and.w	r3, r3, #2
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d020      	beq.n	80036ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	f003 0304 	and.w	r3, r3, #4
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d005      	beq.n	80036c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036b4:	4b59      	ldr	r3, [pc, #356]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 80036b6:	689b      	ldr	r3, [r3, #8]
 80036b8:	4a58      	ldr	r2, [pc, #352]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80036be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 0308 	and.w	r3, r3, #8
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d005      	beq.n	80036d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80036cc:	4b53      	ldr	r3, [pc, #332]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	4a52      	ldr	r2, [pc, #328]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 80036d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80036d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80036d8:	4b50      	ldr	r3, [pc, #320]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	494d      	ldr	r1, [pc, #308]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0301 	and.w	r3, r3, #1
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d044      	beq.n	8003780 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d107      	bne.n	800370e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036fe:	4b47      	ldr	r3, [pc, #284]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d119      	bne.n	800373e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800370a:	2301      	movs	r3, #1
 800370c:	e07f      	b.n	800380e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	2b02      	cmp	r3, #2
 8003714:	d003      	beq.n	800371e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800371a:	2b03      	cmp	r3, #3
 800371c:	d107      	bne.n	800372e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800371e:	4b3f      	ldr	r3, [pc, #252]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003726:	2b00      	cmp	r3, #0
 8003728:	d109      	bne.n	800373e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800372a:	2301      	movs	r3, #1
 800372c:	e06f      	b.n	800380e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800372e:	4b3b      	ldr	r3, [pc, #236]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0302 	and.w	r3, r3, #2
 8003736:	2b00      	cmp	r3, #0
 8003738:	d101      	bne.n	800373e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e067      	b.n	800380e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800373e:	4b37      	ldr	r3, [pc, #220]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 8003740:	689b      	ldr	r3, [r3, #8]
 8003742:	f023 0203 	bic.w	r2, r3, #3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	4934      	ldr	r1, [pc, #208]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 800374c:	4313      	orrs	r3, r2
 800374e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003750:	f7ff fa48 	bl	8002be4 <HAL_GetTick>
 8003754:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003756:	e00a      	b.n	800376e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003758:	f7ff fa44 	bl	8002be4 <HAL_GetTick>
 800375c:	4602      	mov	r2, r0
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	1ad3      	subs	r3, r2, r3
 8003762:	f241 3288 	movw	r2, #5000	; 0x1388
 8003766:	4293      	cmp	r3, r2
 8003768:	d901      	bls.n	800376e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800376a:	2303      	movs	r3, #3
 800376c:	e04f      	b.n	800380e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800376e:	4b2b      	ldr	r3, [pc, #172]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 8003770:	689b      	ldr	r3, [r3, #8]
 8003772:	f003 020c 	and.w	r2, r3, #12
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	685b      	ldr	r3, [r3, #4]
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	429a      	cmp	r2, r3
 800377e:	d1eb      	bne.n	8003758 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003780:	4b25      	ldr	r3, [pc, #148]	; (8003818 <HAL_RCC_ClockConfig+0x1b8>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	f003 030f 	and.w	r3, r3, #15
 8003788:	683a      	ldr	r2, [r7, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d20c      	bcs.n	80037a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800378e:	4b22      	ldr	r3, [pc, #136]	; (8003818 <HAL_RCC_ClockConfig+0x1b8>)
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	b2d2      	uxtb	r2, r2
 8003794:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003796:	4b20      	ldr	r3, [pc, #128]	; (8003818 <HAL_RCC_ClockConfig+0x1b8>)
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	683a      	ldr	r2, [r7, #0]
 80037a0:	429a      	cmp	r2, r3
 80037a2:	d001      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e032      	b.n	800380e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0304 	and.w	r3, r3, #4
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d008      	beq.n	80037c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037b4:	4b19      	ldr	r3, [pc, #100]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	4916      	ldr	r1, [pc, #88]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	4313      	orrs	r3, r2
 80037c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0308 	and.w	r3, r3, #8
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d009      	beq.n	80037e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80037d2:	4b12      	ldr	r3, [pc, #72]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 80037d4:	689b      	ldr	r3, [r3, #8]
 80037d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
 80037de:	00db      	lsls	r3, r3, #3
 80037e0:	490e      	ldr	r1, [pc, #56]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 80037e2:	4313      	orrs	r3, r2
 80037e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80037e6:	f000 f855 	bl	8003894 <HAL_RCC_GetSysClockFreq>
 80037ea:	4602      	mov	r2, r0
 80037ec:	4b0b      	ldr	r3, [pc, #44]	; (800381c <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	f003 030f 	and.w	r3, r3, #15
 80037f6:	490a      	ldr	r1, [pc, #40]	; (8003820 <HAL_RCC_ClockConfig+0x1c0>)
 80037f8:	5ccb      	ldrb	r3, [r1, r3]
 80037fa:	fa22 f303 	lsr.w	r3, r2, r3
 80037fe:	4a09      	ldr	r2, [pc, #36]	; (8003824 <HAL_RCC_ClockConfig+0x1c4>)
 8003800:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003802:	4b09      	ldr	r3, [pc, #36]	; (8003828 <HAL_RCC_ClockConfig+0x1c8>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f7ff f9a8 	bl	8002b5c <HAL_InitTick>

  return HAL_OK;
 800380c:	2300      	movs	r3, #0
}
 800380e:	4618      	mov	r0, r3
 8003810:	3710      	adds	r7, #16
 8003812:	46bd      	mov	sp, r7
 8003814:	bd80      	pop	{r7, pc}
 8003816:	bf00      	nop
 8003818:	40023c00 	.word	0x40023c00
 800381c:	40023800 	.word	0x40023800
 8003820:	0800646c 	.word	0x0800646c
 8003824:	20000124 	.word	0x20000124
 8003828:	20000128 	.word	0x20000128

0800382c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800382c:	b480      	push	{r7}
 800382e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003830:	4b03      	ldr	r3, [pc, #12]	; (8003840 <HAL_RCC_GetHCLKFreq+0x14>)
 8003832:	681b      	ldr	r3, [r3, #0]
}
 8003834:	4618      	mov	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	20000124 	.word	0x20000124

08003844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003848:	f7ff fff0 	bl	800382c <HAL_RCC_GetHCLKFreq>
 800384c:	4602      	mov	r2, r0
 800384e:	4b05      	ldr	r3, [pc, #20]	; (8003864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003850:	689b      	ldr	r3, [r3, #8]
 8003852:	0a9b      	lsrs	r3, r3, #10
 8003854:	f003 0307 	and.w	r3, r3, #7
 8003858:	4903      	ldr	r1, [pc, #12]	; (8003868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800385a:	5ccb      	ldrb	r3, [r1, r3]
 800385c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003860:	4618      	mov	r0, r3
 8003862:	bd80      	pop	{r7, pc}
 8003864:	40023800 	.word	0x40023800
 8003868:	0800647c 	.word	0x0800647c

0800386c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800386c:	b580      	push	{r7, lr}
 800386e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003870:	f7ff ffdc 	bl	800382c <HAL_RCC_GetHCLKFreq>
 8003874:	4602      	mov	r2, r0
 8003876:	4b05      	ldr	r3, [pc, #20]	; (800388c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003878:	689b      	ldr	r3, [r3, #8]
 800387a:	0b5b      	lsrs	r3, r3, #13
 800387c:	f003 0307 	and.w	r3, r3, #7
 8003880:	4903      	ldr	r1, [pc, #12]	; (8003890 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003882:	5ccb      	ldrb	r3, [r1, r3]
 8003884:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003888:	4618      	mov	r0, r3
 800388a:	bd80      	pop	{r7, pc}
 800388c:	40023800 	.word	0x40023800
 8003890:	0800647c 	.word	0x0800647c

08003894 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003894:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003898:	b0ae      	sub	sp, #184	; 0xb8
 800389a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800389c:	2300      	movs	r3, #0
 800389e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80038a8:	2300      	movs	r3, #0
 80038aa:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80038ae:	2300      	movs	r3, #0
 80038b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80038b4:	2300      	movs	r3, #0
 80038b6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80038ba:	4bcb      	ldr	r3, [pc, #812]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x354>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f003 030c 	and.w	r3, r3, #12
 80038c2:	2b0c      	cmp	r3, #12
 80038c4:	f200 8206 	bhi.w	8003cd4 <HAL_RCC_GetSysClockFreq+0x440>
 80038c8:	a201      	add	r2, pc, #4	; (adr r2, 80038d0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80038ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038ce:	bf00      	nop
 80038d0:	08003905 	.word	0x08003905
 80038d4:	08003cd5 	.word	0x08003cd5
 80038d8:	08003cd5 	.word	0x08003cd5
 80038dc:	08003cd5 	.word	0x08003cd5
 80038e0:	0800390d 	.word	0x0800390d
 80038e4:	08003cd5 	.word	0x08003cd5
 80038e8:	08003cd5 	.word	0x08003cd5
 80038ec:	08003cd5 	.word	0x08003cd5
 80038f0:	08003915 	.word	0x08003915
 80038f4:	08003cd5 	.word	0x08003cd5
 80038f8:	08003cd5 	.word	0x08003cd5
 80038fc:	08003cd5 	.word	0x08003cd5
 8003900:	08003b05 	.word	0x08003b05
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003904:	4bb9      	ldr	r3, [pc, #740]	; (8003bec <HAL_RCC_GetSysClockFreq+0x358>)
 8003906:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800390a:	e1e7      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800390c:	4bb8      	ldr	r3, [pc, #736]	; (8003bf0 <HAL_RCC_GetSysClockFreq+0x35c>)
 800390e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003912:	e1e3      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003914:	4bb4      	ldr	r3, [pc, #720]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800391c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003920:	4bb1      	ldr	r3, [pc, #708]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003928:	2b00      	cmp	r3, #0
 800392a:	d071      	beq.n	8003a10 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800392c:	4bae      	ldr	r3, [pc, #696]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x354>)
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	099b      	lsrs	r3, r3, #6
 8003932:	2200      	movs	r2, #0
 8003934:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003938:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800393c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003940:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003944:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003948:	2300      	movs	r3, #0
 800394a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800394e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8003952:	4622      	mov	r2, r4
 8003954:	462b      	mov	r3, r5
 8003956:	f04f 0000 	mov.w	r0, #0
 800395a:	f04f 0100 	mov.w	r1, #0
 800395e:	0159      	lsls	r1, r3, #5
 8003960:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003964:	0150      	lsls	r0, r2, #5
 8003966:	4602      	mov	r2, r0
 8003968:	460b      	mov	r3, r1
 800396a:	4621      	mov	r1, r4
 800396c:	1a51      	subs	r1, r2, r1
 800396e:	6439      	str	r1, [r7, #64]	; 0x40
 8003970:	4629      	mov	r1, r5
 8003972:	eb63 0301 	sbc.w	r3, r3, r1
 8003976:	647b      	str	r3, [r7, #68]	; 0x44
 8003978:	f04f 0200 	mov.w	r2, #0
 800397c:	f04f 0300 	mov.w	r3, #0
 8003980:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 8003984:	4649      	mov	r1, r9
 8003986:	018b      	lsls	r3, r1, #6
 8003988:	4641      	mov	r1, r8
 800398a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800398e:	4641      	mov	r1, r8
 8003990:	018a      	lsls	r2, r1, #6
 8003992:	4641      	mov	r1, r8
 8003994:	1a51      	subs	r1, r2, r1
 8003996:	63b9      	str	r1, [r7, #56]	; 0x38
 8003998:	4649      	mov	r1, r9
 800399a:	eb63 0301 	sbc.w	r3, r3, r1
 800399e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80039a0:	f04f 0200 	mov.w	r2, #0
 80039a4:	f04f 0300 	mov.w	r3, #0
 80039a8:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80039ac:	4649      	mov	r1, r9
 80039ae:	00cb      	lsls	r3, r1, #3
 80039b0:	4641      	mov	r1, r8
 80039b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039b6:	4641      	mov	r1, r8
 80039b8:	00ca      	lsls	r2, r1, #3
 80039ba:	4610      	mov	r0, r2
 80039bc:	4619      	mov	r1, r3
 80039be:	4603      	mov	r3, r0
 80039c0:	4622      	mov	r2, r4
 80039c2:	189b      	adds	r3, r3, r2
 80039c4:	633b      	str	r3, [r7, #48]	; 0x30
 80039c6:	462b      	mov	r3, r5
 80039c8:	460a      	mov	r2, r1
 80039ca:	eb42 0303 	adc.w	r3, r2, r3
 80039ce:	637b      	str	r3, [r7, #52]	; 0x34
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	f04f 0300 	mov.w	r3, #0
 80039d8:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80039dc:	4629      	mov	r1, r5
 80039de:	024b      	lsls	r3, r1, #9
 80039e0:	4621      	mov	r1, r4
 80039e2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80039e6:	4621      	mov	r1, r4
 80039e8:	024a      	lsls	r2, r1, #9
 80039ea:	4610      	mov	r0, r2
 80039ec:	4619      	mov	r1, r3
 80039ee:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80039f2:	2200      	movs	r2, #0
 80039f4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80039f8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80039fc:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8003a00:	f7fd f8a8 	bl	8000b54 <__aeabi_uldivmod>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4613      	mov	r3, r2
 8003a0a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003a0e:	e067      	b.n	8003ae0 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a10:	4b75      	ldr	r3, [pc, #468]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	099b      	lsrs	r3, r3, #6
 8003a16:	2200      	movs	r2, #0
 8003a18:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003a1c:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8003a20:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003a24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003a28:	67bb      	str	r3, [r7, #120]	; 0x78
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003a2e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 8003a32:	4622      	mov	r2, r4
 8003a34:	462b      	mov	r3, r5
 8003a36:	f04f 0000 	mov.w	r0, #0
 8003a3a:	f04f 0100 	mov.w	r1, #0
 8003a3e:	0159      	lsls	r1, r3, #5
 8003a40:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a44:	0150      	lsls	r0, r2, #5
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	4621      	mov	r1, r4
 8003a4c:	1a51      	subs	r1, r2, r1
 8003a4e:	62b9      	str	r1, [r7, #40]	; 0x28
 8003a50:	4629      	mov	r1, r5
 8003a52:	eb63 0301 	sbc.w	r3, r3, r1
 8003a56:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003a58:	f04f 0200 	mov.w	r2, #0
 8003a5c:	f04f 0300 	mov.w	r3, #0
 8003a60:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8003a64:	4649      	mov	r1, r9
 8003a66:	018b      	lsls	r3, r1, #6
 8003a68:	4641      	mov	r1, r8
 8003a6a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003a6e:	4641      	mov	r1, r8
 8003a70:	018a      	lsls	r2, r1, #6
 8003a72:	4641      	mov	r1, r8
 8003a74:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a78:	4649      	mov	r1, r9
 8003a7a:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	f04f 0300 	mov.w	r3, #0
 8003a86:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003a8a:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003a8e:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003a92:	4692      	mov	sl, r2
 8003a94:	469b      	mov	fp, r3
 8003a96:	4623      	mov	r3, r4
 8003a98:	eb1a 0303 	adds.w	r3, sl, r3
 8003a9c:	623b      	str	r3, [r7, #32]
 8003a9e:	462b      	mov	r3, r5
 8003aa0:	eb4b 0303 	adc.w	r3, fp, r3
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24
 8003aa6:	f04f 0200 	mov.w	r2, #0
 8003aaa:	f04f 0300 	mov.w	r3, #0
 8003aae:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8003ab2:	4629      	mov	r1, r5
 8003ab4:	028b      	lsls	r3, r1, #10
 8003ab6:	4621      	mov	r1, r4
 8003ab8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003abc:	4621      	mov	r1, r4
 8003abe:	028a      	lsls	r2, r1, #10
 8003ac0:	4610      	mov	r0, r2
 8003ac2:	4619      	mov	r1, r3
 8003ac4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003ac8:	2200      	movs	r2, #0
 8003aca:	673b      	str	r3, [r7, #112]	; 0x70
 8003acc:	677a      	str	r2, [r7, #116]	; 0x74
 8003ace:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8003ad2:	f7fd f83f 	bl	8000b54 <__aeabi_uldivmod>
 8003ad6:	4602      	mov	r2, r0
 8003ad8:	460b      	mov	r3, r1
 8003ada:	4613      	mov	r3, r2
 8003adc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ae0:	4b41      	ldr	r3, [pc, #260]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	0c1b      	lsrs	r3, r3, #16
 8003ae6:	f003 0303 	and.w	r3, r3, #3
 8003aea:	3301      	adds	r3, #1
 8003aec:	005b      	lsls	r3, r3, #1
 8003aee:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 8003af2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003af6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003b02:	e0eb      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b04:	4b38      	ldr	r3, [pc, #224]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b06:	685b      	ldr	r3, [r3, #4]
 8003b08:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003b0c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b10:	4b35      	ldr	r3, [pc, #212]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b12:	685b      	ldr	r3, [r3, #4]
 8003b14:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d06b      	beq.n	8003bf4 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b1c:	4b32      	ldr	r3, [pc, #200]	; (8003be8 <HAL_RCC_GetSysClockFreq+0x354>)
 8003b1e:	685b      	ldr	r3, [r3, #4]
 8003b20:	099b      	lsrs	r3, r3, #6
 8003b22:	2200      	movs	r2, #0
 8003b24:	66bb      	str	r3, [r7, #104]	; 0x68
 8003b26:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003b28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003b2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b2e:	663b      	str	r3, [r7, #96]	; 0x60
 8003b30:	2300      	movs	r3, #0
 8003b32:	667b      	str	r3, [r7, #100]	; 0x64
 8003b34:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8003b38:	4622      	mov	r2, r4
 8003b3a:	462b      	mov	r3, r5
 8003b3c:	f04f 0000 	mov.w	r0, #0
 8003b40:	f04f 0100 	mov.w	r1, #0
 8003b44:	0159      	lsls	r1, r3, #5
 8003b46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b4a:	0150      	lsls	r0, r2, #5
 8003b4c:	4602      	mov	r2, r0
 8003b4e:	460b      	mov	r3, r1
 8003b50:	4621      	mov	r1, r4
 8003b52:	1a51      	subs	r1, r2, r1
 8003b54:	61b9      	str	r1, [r7, #24]
 8003b56:	4629      	mov	r1, r5
 8003b58:	eb63 0301 	sbc.w	r3, r3, r1
 8003b5c:	61fb      	str	r3, [r7, #28]
 8003b5e:	f04f 0200 	mov.w	r2, #0
 8003b62:	f04f 0300 	mov.w	r3, #0
 8003b66:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8003b6a:	4659      	mov	r1, fp
 8003b6c:	018b      	lsls	r3, r1, #6
 8003b6e:	4651      	mov	r1, sl
 8003b70:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b74:	4651      	mov	r1, sl
 8003b76:	018a      	lsls	r2, r1, #6
 8003b78:	4651      	mov	r1, sl
 8003b7a:	ebb2 0801 	subs.w	r8, r2, r1
 8003b7e:	4659      	mov	r1, fp
 8003b80:	eb63 0901 	sbc.w	r9, r3, r1
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b90:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b94:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b98:	4690      	mov	r8, r2
 8003b9a:	4699      	mov	r9, r3
 8003b9c:	4623      	mov	r3, r4
 8003b9e:	eb18 0303 	adds.w	r3, r8, r3
 8003ba2:	613b      	str	r3, [r7, #16]
 8003ba4:	462b      	mov	r3, r5
 8003ba6:	eb49 0303 	adc.w	r3, r9, r3
 8003baa:	617b      	str	r3, [r7, #20]
 8003bac:	f04f 0200 	mov.w	r2, #0
 8003bb0:	f04f 0300 	mov.w	r3, #0
 8003bb4:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8003bb8:	4629      	mov	r1, r5
 8003bba:	024b      	lsls	r3, r1, #9
 8003bbc:	4621      	mov	r1, r4
 8003bbe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bc2:	4621      	mov	r1, r4
 8003bc4:	024a      	lsls	r2, r1, #9
 8003bc6:	4610      	mov	r0, r2
 8003bc8:	4619      	mov	r1, r3
 8003bca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003bce:	2200      	movs	r2, #0
 8003bd0:	65bb      	str	r3, [r7, #88]	; 0x58
 8003bd2:	65fa      	str	r2, [r7, #92]	; 0x5c
 8003bd4:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003bd8:	f7fc ffbc 	bl	8000b54 <__aeabi_uldivmod>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	460b      	mov	r3, r1
 8003be0:	4613      	mov	r3, r2
 8003be2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003be6:	e065      	b.n	8003cb4 <HAL_RCC_GetSysClockFreq+0x420>
 8003be8:	40023800 	.word	0x40023800
 8003bec:	00f42400 	.word	0x00f42400
 8003bf0:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bf4:	4b3d      	ldr	r3, [pc, #244]	; (8003cec <HAL_RCC_GetSysClockFreq+0x458>)
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	099b      	lsrs	r3, r3, #6
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	4618      	mov	r0, r3
 8003bfe:	4611      	mov	r1, r2
 8003c00:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c04:	653b      	str	r3, [r7, #80]	; 0x50
 8003c06:	2300      	movs	r3, #0
 8003c08:	657b      	str	r3, [r7, #84]	; 0x54
 8003c0a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8003c0e:	4642      	mov	r2, r8
 8003c10:	464b      	mov	r3, r9
 8003c12:	f04f 0000 	mov.w	r0, #0
 8003c16:	f04f 0100 	mov.w	r1, #0
 8003c1a:	0159      	lsls	r1, r3, #5
 8003c1c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c20:	0150      	lsls	r0, r2, #5
 8003c22:	4602      	mov	r2, r0
 8003c24:	460b      	mov	r3, r1
 8003c26:	4641      	mov	r1, r8
 8003c28:	1a51      	subs	r1, r2, r1
 8003c2a:	60b9      	str	r1, [r7, #8]
 8003c2c:	4649      	mov	r1, r9
 8003c2e:	eb63 0301 	sbc.w	r3, r3, r1
 8003c32:	60fb      	str	r3, [r7, #12]
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8003c40:	4659      	mov	r1, fp
 8003c42:	018b      	lsls	r3, r1, #6
 8003c44:	4651      	mov	r1, sl
 8003c46:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003c4a:	4651      	mov	r1, sl
 8003c4c:	018a      	lsls	r2, r1, #6
 8003c4e:	4651      	mov	r1, sl
 8003c50:	1a54      	subs	r4, r2, r1
 8003c52:	4659      	mov	r1, fp
 8003c54:	eb63 0501 	sbc.w	r5, r3, r1
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	f04f 0300 	mov.w	r3, #0
 8003c60:	00eb      	lsls	r3, r5, #3
 8003c62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c66:	00e2      	lsls	r2, r4, #3
 8003c68:	4614      	mov	r4, r2
 8003c6a:	461d      	mov	r5, r3
 8003c6c:	4643      	mov	r3, r8
 8003c6e:	18e3      	adds	r3, r4, r3
 8003c70:	603b      	str	r3, [r7, #0]
 8003c72:	464b      	mov	r3, r9
 8003c74:	eb45 0303 	adc.w	r3, r5, r3
 8003c78:	607b      	str	r3, [r7, #4]
 8003c7a:	f04f 0200 	mov.w	r2, #0
 8003c7e:	f04f 0300 	mov.w	r3, #0
 8003c82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c86:	4629      	mov	r1, r5
 8003c88:	028b      	lsls	r3, r1, #10
 8003c8a:	4621      	mov	r1, r4
 8003c8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c90:	4621      	mov	r1, r4
 8003c92:	028a      	lsls	r2, r1, #10
 8003c94:	4610      	mov	r0, r2
 8003c96:	4619      	mov	r1, r3
 8003c98:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ca0:	64fa      	str	r2, [r7, #76]	; 0x4c
 8003ca2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003ca6:	f7fc ff55 	bl	8000b54 <__aeabi_uldivmod>
 8003caa:	4602      	mov	r2, r0
 8003cac:	460b      	mov	r3, r1
 8003cae:	4613      	mov	r3, r2
 8003cb0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8003cb4:	4b0d      	ldr	r3, [pc, #52]	; (8003cec <HAL_RCC_GetSysClockFreq+0x458>)
 8003cb6:	685b      	ldr	r3, [r3, #4]
 8003cb8:	0f1b      	lsrs	r3, r3, #28
 8003cba:	f003 0307 	and.w	r3, r3, #7
 8003cbe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8003cc2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003cc6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003cca:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cce:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003cd2:	e003      	b.n	8003cdc <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cd4:	4b06      	ldr	r3, [pc, #24]	; (8003cf0 <HAL_RCC_GetSysClockFreq+0x45c>)
 8003cd6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8003cda:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cdc:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	37b8      	adds	r7, #184	; 0xb8
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	00f42400 	.word	0x00f42400

08003cf4 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cf4:	b580      	push	{r7, lr}
 8003cf6:	b086      	sub	sp, #24
 8003cf8:	af00      	add	r7, sp, #0
 8003cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d101      	bne.n	8003d06 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d02:	2301      	movs	r3, #1
 8003d04:	e28d      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0301 	and.w	r3, r3, #1
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	f000 8083 	beq.w	8003e1a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d14:	4b94      	ldr	r3, [pc, #592]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003d16:	689b      	ldr	r3, [r3, #8]
 8003d18:	f003 030c 	and.w	r3, r3, #12
 8003d1c:	2b04      	cmp	r3, #4
 8003d1e:	d019      	beq.n	8003d54 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d20:	4b91      	ldr	r3, [pc, #580]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003d22:	689b      	ldr	r3, [r3, #8]
 8003d24:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8003d28:	2b08      	cmp	r3, #8
 8003d2a:	d106      	bne.n	8003d3a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d2c:	4b8e      	ldr	r3, [pc, #568]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d34:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d38:	d00c      	beq.n	8003d54 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d3a:	4b8b      	ldr	r3, [pc, #556]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8003d42:	2b0c      	cmp	r3, #12
 8003d44:	d112      	bne.n	8003d6c <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d46:	4b88      	ldr	r3, [pc, #544]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d52:	d10b      	bne.n	8003d6c <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d54:	4b84      	ldr	r3, [pc, #528]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d05b      	beq.n	8003e18 <HAL_RCC_OscConfig+0x124>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d157      	bne.n	8003e18 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e25a      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d74:	d106      	bne.n	8003d84 <HAL_RCC_OscConfig+0x90>
 8003d76:	4b7c      	ldr	r3, [pc, #496]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	4a7b      	ldr	r2, [pc, #492]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d80:	6013      	str	r3, [r2, #0]
 8003d82:	e01d      	b.n	8003dc0 <HAL_RCC_OscConfig+0xcc>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	685b      	ldr	r3, [r3, #4]
 8003d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d8c:	d10c      	bne.n	8003da8 <HAL_RCC_OscConfig+0xb4>
 8003d8e:	4b76      	ldr	r3, [pc, #472]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	4a75      	ldr	r2, [pc, #468]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d98:	6013      	str	r3, [r2, #0]
 8003d9a:	4b73      	ldr	r3, [pc, #460]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a72      	ldr	r2, [pc, #456]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	e00b      	b.n	8003dc0 <HAL_RCC_OscConfig+0xcc>
 8003da8:	4b6f      	ldr	r3, [pc, #444]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	4a6e      	ldr	r2, [pc, #440]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003db2:	6013      	str	r3, [r2, #0]
 8003db4:	4b6c      	ldr	r3, [pc, #432]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a6b      	ldr	r2, [pc, #428]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	685b      	ldr	r3, [r3, #4]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d013      	beq.n	8003df0 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc8:	f7fe ff0c 	bl	8002be4 <HAL_GetTick>
 8003dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dce:	e008      	b.n	8003de2 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dd0:	f7fe ff08 	bl	8002be4 <HAL_GetTick>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	693b      	ldr	r3, [r7, #16]
 8003dd8:	1ad3      	subs	r3, r2, r3
 8003dda:	2b64      	cmp	r3, #100	; 0x64
 8003ddc:	d901      	bls.n	8003de2 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8003dde:	2303      	movs	r3, #3
 8003de0:	e21f      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003de2:	4b61      	ldr	r3, [pc, #388]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	d0f0      	beq.n	8003dd0 <HAL_RCC_OscConfig+0xdc>
 8003dee:	e014      	b.n	8003e1a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003df0:	f7fe fef8 	bl	8002be4 <HAL_GetTick>
 8003df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003df6:	e008      	b.n	8003e0a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003df8:	f7fe fef4 	bl	8002be4 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b64      	cmp	r3, #100	; 0x64
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e20b      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e0a:	4b57      	ldr	r3, [pc, #348]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1f0      	bne.n	8003df8 <HAL_RCC_OscConfig+0x104>
 8003e16:	e000      	b.n	8003e1a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 0302 	and.w	r3, r3, #2
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d06f      	beq.n	8003f06 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e26:	4b50      	ldr	r3, [pc, #320]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f003 030c 	and.w	r3, r3, #12
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d017      	beq.n	8003e62 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e32:	4b4d      	ldr	r3, [pc, #308]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8003e3a:	2b08      	cmp	r3, #8
 8003e3c:	d105      	bne.n	8003e4a <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e3e:	4b4a      	ldr	r3, [pc, #296]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003e40:	685b      	ldr	r3, [r3, #4]
 8003e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d00b      	beq.n	8003e62 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e4a:	4b47      	ldr	r3, [pc, #284]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003e4c:	689b      	ldr	r3, [r3, #8]
 8003e4e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8003e52:	2b0c      	cmp	r3, #12
 8003e54:	d11c      	bne.n	8003e90 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e56:	4b44      	ldr	r3, [pc, #272]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d116      	bne.n	8003e90 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e62:	4b41      	ldr	r3, [pc, #260]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f003 0302 	and.w	r3, r3, #2
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d005      	beq.n	8003e7a <HAL_RCC_OscConfig+0x186>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	68db      	ldr	r3, [r3, #12]
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d001      	beq.n	8003e7a <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8003e76:	2301      	movs	r3, #1
 8003e78:	e1d3      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e7a:	4b3b      	ldr	r3, [pc, #236]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	691b      	ldr	r3, [r3, #16]
 8003e86:	00db      	lsls	r3, r3, #3
 8003e88:	4937      	ldr	r1, [pc, #220]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003e8a:	4313      	orrs	r3, r2
 8003e8c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e8e:	e03a      	b.n	8003f06 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	68db      	ldr	r3, [r3, #12]
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d020      	beq.n	8003eda <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e98:	4b34      	ldr	r3, [pc, #208]	; (8003f6c <HAL_RCC_OscConfig+0x278>)
 8003e9a:	2201      	movs	r2, #1
 8003e9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e9e:	f7fe fea1 	bl	8002be4 <HAL_GetTick>
 8003ea2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ea4:	e008      	b.n	8003eb8 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ea6:	f7fe fe9d 	bl	8002be4 <HAL_GetTick>
 8003eaa:	4602      	mov	r2, r0
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	1ad3      	subs	r3, r2, r3
 8003eb0:	2b02      	cmp	r3, #2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e1b4      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eb8:	4b2b      	ldr	r3, [pc, #172]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d0f0      	beq.n	8003ea6 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ec4:	4b28      	ldr	r3, [pc, #160]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	691b      	ldr	r3, [r3, #16]
 8003ed0:	00db      	lsls	r3, r3, #3
 8003ed2:	4925      	ldr	r1, [pc, #148]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003ed4:	4313      	orrs	r3, r2
 8003ed6:	600b      	str	r3, [r1, #0]
 8003ed8:	e015      	b.n	8003f06 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003eda:	4b24      	ldr	r3, [pc, #144]	; (8003f6c <HAL_RCC_OscConfig+0x278>)
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ee0:	f7fe fe80 	bl	8002be4 <HAL_GetTick>
 8003ee4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ee6:	e008      	b.n	8003efa <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ee8:	f7fe fe7c 	bl	8002be4 <HAL_GetTick>
 8003eec:	4602      	mov	r2, r0
 8003eee:	693b      	ldr	r3, [r7, #16]
 8003ef0:	1ad3      	subs	r3, r2, r3
 8003ef2:	2b02      	cmp	r3, #2
 8003ef4:	d901      	bls.n	8003efa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8003ef6:	2303      	movs	r3, #3
 8003ef8:	e193      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003efa:	4b1b      	ldr	r3, [pc, #108]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0302 	and.w	r3, r3, #2
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d1f0      	bne.n	8003ee8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0308 	and.w	r3, r3, #8
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d036      	beq.n	8003f80 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	695b      	ldr	r3, [r3, #20]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d016      	beq.n	8003f48 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f1a:	4b15      	ldr	r3, [pc, #84]	; (8003f70 <HAL_RCC_OscConfig+0x27c>)
 8003f1c:	2201      	movs	r2, #1
 8003f1e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f20:	f7fe fe60 	bl	8002be4 <HAL_GetTick>
 8003f24:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f26:	e008      	b.n	8003f3a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f28:	f7fe fe5c 	bl	8002be4 <HAL_GetTick>
 8003f2c:	4602      	mov	r2, r0
 8003f2e:	693b      	ldr	r3, [r7, #16]
 8003f30:	1ad3      	subs	r3, r2, r3
 8003f32:	2b02      	cmp	r3, #2
 8003f34:	d901      	bls.n	8003f3a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8003f36:	2303      	movs	r3, #3
 8003f38:	e173      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f3a:	4b0b      	ldr	r3, [pc, #44]	; (8003f68 <HAL_RCC_OscConfig+0x274>)
 8003f3c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f3e:	f003 0302 	and.w	r3, r3, #2
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d0f0      	beq.n	8003f28 <HAL_RCC_OscConfig+0x234>
 8003f46:	e01b      	b.n	8003f80 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f48:	4b09      	ldr	r3, [pc, #36]	; (8003f70 <HAL_RCC_OscConfig+0x27c>)
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f4e:	f7fe fe49 	bl	8002be4 <HAL_GetTick>
 8003f52:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f54:	e00e      	b.n	8003f74 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f56:	f7fe fe45 	bl	8002be4 <HAL_GetTick>
 8003f5a:	4602      	mov	r2, r0
 8003f5c:	693b      	ldr	r3, [r7, #16]
 8003f5e:	1ad3      	subs	r3, r2, r3
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d907      	bls.n	8003f74 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003f64:	2303      	movs	r3, #3
 8003f66:	e15c      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
 8003f68:	40023800 	.word	0x40023800
 8003f6c:	42470000 	.word	0x42470000
 8003f70:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f74:	4b8a      	ldr	r3, [pc, #552]	; (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 8003f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f78:	f003 0302 	and.w	r3, r3, #2
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d1ea      	bne.n	8003f56 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	f000 8097 	beq.w	80040bc <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f8e:	2300      	movs	r3, #0
 8003f90:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f92:	4b83      	ldr	r3, [pc, #524]	; (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 8003f94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d10f      	bne.n	8003fbe <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f9e:	2300      	movs	r3, #0
 8003fa0:	60bb      	str	r3, [r7, #8]
 8003fa2:	4b7f      	ldr	r3, [pc, #508]	; (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	4a7e      	ldr	r2, [pc, #504]	; (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 8003fa8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fac:	6413      	str	r3, [r2, #64]	; 0x40
 8003fae:	4b7c      	ldr	r3, [pc, #496]	; (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 8003fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003fb6:	60bb      	str	r3, [r7, #8]
 8003fb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fbe:	4b79      	ldr	r3, [pc, #484]	; (80041a4 <HAL_RCC_OscConfig+0x4b0>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d118      	bne.n	8003ffc <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fca:	4b76      	ldr	r3, [pc, #472]	; (80041a4 <HAL_RCC_OscConfig+0x4b0>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a75      	ldr	r2, [pc, #468]	; (80041a4 <HAL_RCC_OscConfig+0x4b0>)
 8003fd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fd4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fd6:	f7fe fe05 	bl	8002be4 <HAL_GetTick>
 8003fda:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fdc:	e008      	b.n	8003ff0 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fde:	f7fe fe01 	bl	8002be4 <HAL_GetTick>
 8003fe2:	4602      	mov	r2, r0
 8003fe4:	693b      	ldr	r3, [r7, #16]
 8003fe6:	1ad3      	subs	r3, r2, r3
 8003fe8:	2b02      	cmp	r3, #2
 8003fea:	d901      	bls.n	8003ff0 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8003fec:	2303      	movs	r3, #3
 8003fee:	e118      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ff0:	4b6c      	ldr	r3, [pc, #432]	; (80041a4 <HAL_RCC_OscConfig+0x4b0>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d0f0      	beq.n	8003fde <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	2b01      	cmp	r3, #1
 8004002:	d106      	bne.n	8004012 <HAL_RCC_OscConfig+0x31e>
 8004004:	4b66      	ldr	r3, [pc, #408]	; (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 8004006:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004008:	4a65      	ldr	r2, [pc, #404]	; (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 800400a:	f043 0301 	orr.w	r3, r3, #1
 800400e:	6713      	str	r3, [r2, #112]	; 0x70
 8004010:	e01c      	b.n	800404c <HAL_RCC_OscConfig+0x358>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	689b      	ldr	r3, [r3, #8]
 8004016:	2b05      	cmp	r3, #5
 8004018:	d10c      	bne.n	8004034 <HAL_RCC_OscConfig+0x340>
 800401a:	4b61      	ldr	r3, [pc, #388]	; (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	4a60      	ldr	r2, [pc, #384]	; (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 8004020:	f043 0304 	orr.w	r3, r3, #4
 8004024:	6713      	str	r3, [r2, #112]	; 0x70
 8004026:	4b5e      	ldr	r3, [pc, #376]	; (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 8004028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402a:	4a5d      	ldr	r2, [pc, #372]	; (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 800402c:	f043 0301 	orr.w	r3, r3, #1
 8004030:	6713      	str	r3, [r2, #112]	; 0x70
 8004032:	e00b      	b.n	800404c <HAL_RCC_OscConfig+0x358>
 8004034:	4b5a      	ldr	r3, [pc, #360]	; (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 8004036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004038:	4a59      	ldr	r2, [pc, #356]	; (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 800403a:	f023 0301 	bic.w	r3, r3, #1
 800403e:	6713      	str	r3, [r2, #112]	; 0x70
 8004040:	4b57      	ldr	r3, [pc, #348]	; (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 8004042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004044:	4a56      	ldr	r2, [pc, #344]	; (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 8004046:	f023 0304 	bic.w	r3, r3, #4
 800404a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	2b00      	cmp	r3, #0
 8004052:	d015      	beq.n	8004080 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004054:	f7fe fdc6 	bl	8002be4 <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800405a:	e00a      	b.n	8004072 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800405c:	f7fe fdc2 	bl	8002be4 <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	f241 3288 	movw	r2, #5000	; 0x1388
 800406a:	4293      	cmp	r3, r2
 800406c:	d901      	bls.n	8004072 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800406e:	2303      	movs	r3, #3
 8004070:	e0d7      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004072:	4b4b      	ldr	r3, [pc, #300]	; (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 8004074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004076:	f003 0302 	and.w	r3, r3, #2
 800407a:	2b00      	cmp	r3, #0
 800407c:	d0ee      	beq.n	800405c <HAL_RCC_OscConfig+0x368>
 800407e:	e014      	b.n	80040aa <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004080:	f7fe fdb0 	bl	8002be4 <HAL_GetTick>
 8004084:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004086:	e00a      	b.n	800409e <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004088:	f7fe fdac 	bl	8002be4 <HAL_GetTick>
 800408c:	4602      	mov	r2, r0
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	1ad3      	subs	r3, r2, r3
 8004092:	f241 3288 	movw	r2, #5000	; 0x1388
 8004096:	4293      	cmp	r3, r2
 8004098:	d901      	bls.n	800409e <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800409a:	2303      	movs	r3, #3
 800409c:	e0c1      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800409e:	4b40      	ldr	r3, [pc, #256]	; (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 80040a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80040a2:	f003 0302 	and.w	r3, r3, #2
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d1ee      	bne.n	8004088 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80040aa:	7dfb      	ldrb	r3, [r7, #23]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d105      	bne.n	80040bc <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040b0:	4b3b      	ldr	r3, [pc, #236]	; (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	4a3a      	ldr	r2, [pc, #232]	; (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 80040b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	699b      	ldr	r3, [r3, #24]
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	f000 80ad 	beq.w	8004220 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040c6:	4b36      	ldr	r3, [pc, #216]	; (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 80040c8:	689b      	ldr	r3, [r3, #8]
 80040ca:	f003 030c 	and.w	r3, r3, #12
 80040ce:	2b08      	cmp	r3, #8
 80040d0:	d060      	beq.n	8004194 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699b      	ldr	r3, [r3, #24]
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d145      	bne.n	8004166 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040da:	4b33      	ldr	r3, [pc, #204]	; (80041a8 <HAL_RCC_OscConfig+0x4b4>)
 80040dc:	2200      	movs	r2, #0
 80040de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040e0:	f7fe fd80 	bl	8002be4 <HAL_GetTick>
 80040e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040e6:	e008      	b.n	80040fa <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040e8:	f7fe fd7c 	bl	8002be4 <HAL_GetTick>
 80040ec:	4602      	mov	r2, r0
 80040ee:	693b      	ldr	r3, [r7, #16]
 80040f0:	1ad3      	subs	r3, r2, r3
 80040f2:	2b02      	cmp	r3, #2
 80040f4:	d901      	bls.n	80040fa <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80040f6:	2303      	movs	r3, #3
 80040f8:	e093      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040fa:	4b29      	ldr	r3, [pc, #164]	; (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004102:	2b00      	cmp	r3, #0
 8004104:	d1f0      	bne.n	80040e8 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	69da      	ldr	r2, [r3, #28]
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a1b      	ldr	r3, [r3, #32]
 800410e:	431a      	orrs	r2, r3
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004114:	019b      	lsls	r3, r3, #6
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800411c:	085b      	lsrs	r3, r3, #1
 800411e:	3b01      	subs	r3, #1
 8004120:	041b      	lsls	r3, r3, #16
 8004122:	431a      	orrs	r2, r3
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004128:	061b      	lsls	r3, r3, #24
 800412a:	431a      	orrs	r2, r3
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004130:	071b      	lsls	r3, r3, #28
 8004132:	491b      	ldr	r1, [pc, #108]	; (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 8004134:	4313      	orrs	r3, r2
 8004136:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004138:	4b1b      	ldr	r3, [pc, #108]	; (80041a8 <HAL_RCC_OscConfig+0x4b4>)
 800413a:	2201      	movs	r2, #1
 800413c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800413e:	f7fe fd51 	bl	8002be4 <HAL_GetTick>
 8004142:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004144:	e008      	b.n	8004158 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004146:	f7fe fd4d 	bl	8002be4 <HAL_GetTick>
 800414a:	4602      	mov	r2, r0
 800414c:	693b      	ldr	r3, [r7, #16]
 800414e:	1ad3      	subs	r3, r2, r3
 8004150:	2b02      	cmp	r3, #2
 8004152:	d901      	bls.n	8004158 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8004154:	2303      	movs	r3, #3
 8004156:	e064      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004158:	4b11      	ldr	r3, [pc, #68]	; (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004160:	2b00      	cmp	r3, #0
 8004162:	d0f0      	beq.n	8004146 <HAL_RCC_OscConfig+0x452>
 8004164:	e05c      	b.n	8004220 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004166:	4b10      	ldr	r3, [pc, #64]	; (80041a8 <HAL_RCC_OscConfig+0x4b4>)
 8004168:	2200      	movs	r2, #0
 800416a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800416c:	f7fe fd3a 	bl	8002be4 <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004174:	f7fe fd36 	bl	8002be4 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e04d      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004186:	4b06      	ldr	r3, [pc, #24]	; (80041a0 <HAL_RCC_OscConfig+0x4ac>)
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800418e:	2b00      	cmp	r3, #0
 8004190:	d1f0      	bne.n	8004174 <HAL_RCC_OscConfig+0x480>
 8004192:	e045      	b.n	8004220 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	699b      	ldr	r3, [r3, #24]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d107      	bne.n	80041ac <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800419c:	2301      	movs	r3, #1
 800419e:	e040      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
 80041a0:	40023800 	.word	0x40023800
 80041a4:	40007000 	.word	0x40007000
 80041a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80041ac:	4b1f      	ldr	r3, [pc, #124]	; (800422c <HAL_RCC_OscConfig+0x538>)
 80041ae:	685b      	ldr	r3, [r3, #4]
 80041b0:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	699b      	ldr	r3, [r3, #24]
 80041b6:	2b01      	cmp	r3, #1
 80041b8:	d030      	beq.n	800421c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d129      	bne.n	800421c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d122      	bne.n	800421c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041d6:	68fa      	ldr	r2, [r7, #12]
 80041d8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041dc:	4013      	ands	r3, r2
 80041de:	687a      	ldr	r2, [r7, #4]
 80041e0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041e4:	4293      	cmp	r3, r2
 80041e6:	d119      	bne.n	800421c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041f2:	085b      	lsrs	r3, r3, #1
 80041f4:	3b01      	subs	r3, #1
 80041f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d10f      	bne.n	800421c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004206:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004208:	429a      	cmp	r2, r3
 800420a:	d107      	bne.n	800421c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004216:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004218:	429a      	cmp	r2, r3
 800421a:	d001      	beq.n	8004220 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e000      	b.n	8004222 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8004220:	2300      	movs	r3, #0
}
 8004222:	4618      	mov	r0, r3
 8004224:	3718      	adds	r7, #24
 8004226:	46bd      	mov	sp, r7
 8004228:	bd80      	pop	{r7, pc}
 800422a:	bf00      	nop
 800422c:	40023800 	.word	0x40023800

08004230 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b082      	sub	sp, #8
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e041      	b.n	80042c6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004248:	b2db      	uxtb	r3, r3
 800424a:	2b00      	cmp	r3, #0
 800424c:	d106      	bne.n	800425c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004256:	6878      	ldr	r0, [r7, #4]
 8004258:	f7fe fb1e 	bl	8002898 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	3304      	adds	r3, #4
 800426c:	4619      	mov	r1, r3
 800426e:	4610      	mov	r0, r2
 8004270:	f000 fcd2 	bl	8004c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	2201      	movs	r2, #1
 8004278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2201      	movs	r2, #1
 8004288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	2201      	movs	r2, #1
 8004290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2201      	movs	r2, #1
 80042a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2201      	movs	r2, #1
 80042b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2201      	movs	r2, #1
 80042b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042c4:	2300      	movs	r3, #0
}
 80042c6:	4618      	mov	r0, r3
 80042c8:	3708      	adds	r7, #8
 80042ca:	46bd      	mov	sp, r7
 80042cc:	bd80      	pop	{r7, pc}
	...

080042d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b085      	sub	sp, #20
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80042de:	b2db      	uxtb	r3, r3
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d001      	beq.n	80042e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e04e      	b.n	8004386 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2202      	movs	r2, #2
 80042ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	68da      	ldr	r2, [r3, #12]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f042 0201 	orr.w	r2, r2, #1
 80042fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4a23      	ldr	r2, [pc, #140]	; (8004394 <HAL_TIM_Base_Start_IT+0xc4>)
 8004306:	4293      	cmp	r3, r2
 8004308:	d022      	beq.n	8004350 <HAL_TIM_Base_Start_IT+0x80>
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004312:	d01d      	beq.n	8004350 <HAL_TIM_Base_Start_IT+0x80>
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	4a1f      	ldr	r2, [pc, #124]	; (8004398 <HAL_TIM_Base_Start_IT+0xc8>)
 800431a:	4293      	cmp	r3, r2
 800431c:	d018      	beq.n	8004350 <HAL_TIM_Base_Start_IT+0x80>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	4a1e      	ldr	r2, [pc, #120]	; (800439c <HAL_TIM_Base_Start_IT+0xcc>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d013      	beq.n	8004350 <HAL_TIM_Base_Start_IT+0x80>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	4a1c      	ldr	r2, [pc, #112]	; (80043a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d00e      	beq.n	8004350 <HAL_TIM_Base_Start_IT+0x80>
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	4a1b      	ldr	r2, [pc, #108]	; (80043a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8004338:	4293      	cmp	r3, r2
 800433a:	d009      	beq.n	8004350 <HAL_TIM_Base_Start_IT+0x80>
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a19      	ldr	r2, [pc, #100]	; (80043a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d004      	beq.n	8004350 <HAL_TIM_Base_Start_IT+0x80>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	4a18      	ldr	r2, [pc, #96]	; (80043ac <HAL_TIM_Base_Start_IT+0xdc>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d111      	bne.n	8004374 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	689b      	ldr	r3, [r3, #8]
 8004356:	f003 0307 	and.w	r3, r3, #7
 800435a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	2b06      	cmp	r3, #6
 8004360:	d010      	beq.n	8004384 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	681a      	ldr	r2, [r3, #0]
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f042 0201 	orr.w	r2, r2, #1
 8004370:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004372:	e007      	b.n	8004384 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f042 0201 	orr.w	r2, r2, #1
 8004382:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004384:	2300      	movs	r3, #0
}
 8004386:	4618      	mov	r0, r3
 8004388:	3714      	adds	r7, #20
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr
 8004392:	bf00      	nop
 8004394:	40010000 	.word	0x40010000
 8004398:	40000400 	.word	0x40000400
 800439c:	40000800 	.word	0x40000800
 80043a0:	40000c00 	.word	0x40000c00
 80043a4:	40010400 	.word	0x40010400
 80043a8:	40014000 	.word	0x40014000
 80043ac:	40001800 	.word	0x40001800

080043b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d101      	bne.n	80043c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80043be:	2301      	movs	r3, #1
 80043c0:	e041      	b.n	8004446 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043c8:	b2db      	uxtb	r3, r3
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d106      	bne.n	80043dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2200      	movs	r2, #0
 80043d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f7fe f920 	bl	800261c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2202      	movs	r2, #2
 80043e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681a      	ldr	r2, [r3, #0]
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	3304      	adds	r3, #4
 80043ec:	4619      	mov	r1, r3
 80043ee:	4610      	mov	r0, r2
 80043f0:	f000 fc12 	bl	8004c18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2201      	movs	r2, #1
 80043f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2201      	movs	r2, #1
 8004400:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	2201      	movs	r2, #1
 8004408:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004444:	2300      	movs	r3, #0
}
 8004446:	4618      	mov	r0, r3
 8004448:	3708      	adds	r7, #8
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}
	...

08004450 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b084      	sub	sp, #16
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
 8004458:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d109      	bne.n	8004474 <HAL_TIM_PWM_Start+0x24>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004466:	b2db      	uxtb	r3, r3
 8004468:	2b01      	cmp	r3, #1
 800446a:	bf14      	ite	ne
 800446c:	2301      	movne	r3, #1
 800446e:	2300      	moveq	r3, #0
 8004470:	b2db      	uxtb	r3, r3
 8004472:	e022      	b.n	80044ba <HAL_TIM_PWM_Start+0x6a>
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	2b04      	cmp	r3, #4
 8004478:	d109      	bne.n	800448e <HAL_TIM_PWM_Start+0x3e>
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004480:	b2db      	uxtb	r3, r3
 8004482:	2b01      	cmp	r3, #1
 8004484:	bf14      	ite	ne
 8004486:	2301      	movne	r3, #1
 8004488:	2300      	moveq	r3, #0
 800448a:	b2db      	uxtb	r3, r3
 800448c:	e015      	b.n	80044ba <HAL_TIM_PWM_Start+0x6a>
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b08      	cmp	r3, #8
 8004492:	d109      	bne.n	80044a8 <HAL_TIM_PWM_Start+0x58>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800449a:	b2db      	uxtb	r3, r3
 800449c:	2b01      	cmp	r3, #1
 800449e:	bf14      	ite	ne
 80044a0:	2301      	movne	r3, #1
 80044a2:	2300      	moveq	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	e008      	b.n	80044ba <HAL_TIM_PWM_Start+0x6a>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	2b01      	cmp	r3, #1
 80044b2:	bf14      	ite	ne
 80044b4:	2301      	movne	r3, #1
 80044b6:	2300      	moveq	r3, #0
 80044b8:	b2db      	uxtb	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e07c      	b.n	80045bc <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d104      	bne.n	80044d2 <HAL_TIM_PWM_Start+0x82>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044d0:	e013      	b.n	80044fa <HAL_TIM_PWM_Start+0xaa>
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	2b04      	cmp	r3, #4
 80044d6:	d104      	bne.n	80044e2 <HAL_TIM_PWM_Start+0x92>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	2202      	movs	r2, #2
 80044dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044e0:	e00b      	b.n	80044fa <HAL_TIM_PWM_Start+0xaa>
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b08      	cmp	r3, #8
 80044e6:	d104      	bne.n	80044f2 <HAL_TIM_PWM_Start+0xa2>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2202      	movs	r2, #2
 80044ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044f0:	e003      	b.n	80044fa <HAL_TIM_PWM_Start+0xaa>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2202      	movs	r2, #2
 80044f6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	2201      	movs	r2, #1
 8004500:	6839      	ldr	r1, [r7, #0]
 8004502:	4618      	mov	r0, r3
 8004504:	f000 fdd8 	bl	80050b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a2d      	ldr	r2, [pc, #180]	; (80045c4 <HAL_TIM_PWM_Start+0x174>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d004      	beq.n	800451c <HAL_TIM_PWM_Start+0xcc>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a2c      	ldr	r2, [pc, #176]	; (80045c8 <HAL_TIM_PWM_Start+0x178>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d101      	bne.n	8004520 <HAL_TIM_PWM_Start+0xd0>
 800451c:	2301      	movs	r3, #1
 800451e:	e000      	b.n	8004522 <HAL_TIM_PWM_Start+0xd2>
 8004520:	2300      	movs	r3, #0
 8004522:	2b00      	cmp	r3, #0
 8004524:	d007      	beq.n	8004536 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004534:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	4a22      	ldr	r2, [pc, #136]	; (80045c4 <HAL_TIM_PWM_Start+0x174>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d022      	beq.n	8004586 <HAL_TIM_PWM_Start+0x136>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004548:	d01d      	beq.n	8004586 <HAL_TIM_PWM_Start+0x136>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	4a1f      	ldr	r2, [pc, #124]	; (80045cc <HAL_TIM_PWM_Start+0x17c>)
 8004550:	4293      	cmp	r3, r2
 8004552:	d018      	beq.n	8004586 <HAL_TIM_PWM_Start+0x136>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	4a1d      	ldr	r2, [pc, #116]	; (80045d0 <HAL_TIM_PWM_Start+0x180>)
 800455a:	4293      	cmp	r3, r2
 800455c:	d013      	beq.n	8004586 <HAL_TIM_PWM_Start+0x136>
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	4a1c      	ldr	r2, [pc, #112]	; (80045d4 <HAL_TIM_PWM_Start+0x184>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d00e      	beq.n	8004586 <HAL_TIM_PWM_Start+0x136>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	4a16      	ldr	r2, [pc, #88]	; (80045c8 <HAL_TIM_PWM_Start+0x178>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d009      	beq.n	8004586 <HAL_TIM_PWM_Start+0x136>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	681b      	ldr	r3, [r3, #0]
 8004576:	4a18      	ldr	r2, [pc, #96]	; (80045d8 <HAL_TIM_PWM_Start+0x188>)
 8004578:	4293      	cmp	r3, r2
 800457a:	d004      	beq.n	8004586 <HAL_TIM_PWM_Start+0x136>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a16      	ldr	r2, [pc, #88]	; (80045dc <HAL_TIM_PWM_Start+0x18c>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d111      	bne.n	80045aa <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	689b      	ldr	r3, [r3, #8]
 800458c:	f003 0307 	and.w	r3, r3, #7
 8004590:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	2b06      	cmp	r3, #6
 8004596:	d010      	beq.n	80045ba <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	681a      	ldr	r2, [r3, #0]
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f042 0201 	orr.w	r2, r2, #1
 80045a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80045a8:	e007      	b.n	80045ba <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f042 0201 	orr.w	r2, r2, #1
 80045b8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80045ba:	2300      	movs	r3, #0
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	40010000 	.word	0x40010000
 80045c8:	40010400 	.word	0x40010400
 80045cc:	40000400 	.word	0x40000400
 80045d0:	40000800 	.word	0x40000800
 80045d4:	40000c00 	.word	0x40000c00
 80045d8:	40014000 	.word	0x40014000
 80045dc:	40001800 	.word	0x40001800

080045e0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80045e0:	b580      	push	{r7, lr}
 80045e2:	b086      	sub	sp, #24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d101      	bne.n	80045f4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80045f0:	2301      	movs	r3, #1
 80045f2:	e097      	b.n	8004724 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045fa:	b2db      	uxtb	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d106      	bne.n	800460e <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004608:	6878      	ldr	r0, [r7, #4]
 800460a:	f7fe f83f 	bl	800268c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	2202      	movs	r2, #2
 8004612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	689b      	ldr	r3, [r3, #8]
 800461c:	687a      	ldr	r2, [r7, #4]
 800461e:	6812      	ldr	r2, [r2, #0]
 8004620:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004624:	f023 0307 	bic.w	r3, r3, #7
 8004628:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	3304      	adds	r3, #4
 8004632:	4619      	mov	r1, r3
 8004634:	4610      	mov	r0, r2
 8004636:	f000 faef 	bl	8004c18 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	689b      	ldr	r3, [r3, #8]
 8004640:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	6a1b      	ldr	r3, [r3, #32]
 8004650:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	697a      	ldr	r2, [r7, #20]
 8004658:	4313      	orrs	r3, r2
 800465a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004662:	f023 0303 	bic.w	r3, r3, #3
 8004666:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004668:	683b      	ldr	r3, [r7, #0]
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	699b      	ldr	r3, [r3, #24]
 8004670:	021b      	lsls	r3, r3, #8
 8004672:	4313      	orrs	r3, r2
 8004674:	693a      	ldr	r2, [r7, #16]
 8004676:	4313      	orrs	r3, r2
 8004678:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800467a:	693b      	ldr	r3, [r7, #16]
 800467c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8004680:	f023 030c 	bic.w	r3, r3, #12
 8004684:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800468c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004690:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	68da      	ldr	r2, [r3, #12]
 8004696:	683b      	ldr	r3, [r7, #0]
 8004698:	69db      	ldr	r3, [r3, #28]
 800469a:	021b      	lsls	r3, r3, #8
 800469c:	4313      	orrs	r3, r2
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	691b      	ldr	r3, [r3, #16]
 80046a8:	011a      	lsls	r2, r3, #4
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	6a1b      	ldr	r3, [r3, #32]
 80046ae:	031b      	lsls	r3, r3, #12
 80046b0:	4313      	orrs	r3, r2
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	4313      	orrs	r3, r2
 80046b6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80046be:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80046c6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	011b      	lsls	r3, r3, #4
 80046d2:	4313      	orrs	r3, r2
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	697a      	ldr	r2, [r7, #20]
 80046e0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68fa      	ldr	r2, [r7, #12]
 80046f0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2201      	movs	r2, #1
 80046f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2201      	movs	r2, #1
 80046fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	2201      	movs	r2, #1
 8004706:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	2201      	movs	r2, #1
 800470e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	2201      	movs	r2, #1
 8004716:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2201      	movs	r2, #1
 800471e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004722:	2300      	movs	r3, #0
}
 8004724:	4618      	mov	r0, r3
 8004726:	3718      	adds	r7, #24
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}

0800472c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800472c:	b580      	push	{r7, lr}
 800472e:	b084      	sub	sp, #16
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800473c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004744:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800474c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004754:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d110      	bne.n	800477e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800475c:	7bfb      	ldrb	r3, [r7, #15]
 800475e:	2b01      	cmp	r3, #1
 8004760:	d102      	bne.n	8004768 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004762:	7b7b      	ldrb	r3, [r7, #13]
 8004764:	2b01      	cmp	r3, #1
 8004766:	d001      	beq.n	800476c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e069      	b.n	8004840 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	2202      	movs	r2, #2
 8004770:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2202      	movs	r2, #2
 8004778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800477c:	e031      	b.n	80047e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800477e:	683b      	ldr	r3, [r7, #0]
 8004780:	2b04      	cmp	r3, #4
 8004782:	d110      	bne.n	80047a6 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004784:	7bbb      	ldrb	r3, [r7, #14]
 8004786:	2b01      	cmp	r3, #1
 8004788:	d102      	bne.n	8004790 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800478a:	7b3b      	ldrb	r3, [r7, #12]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d001      	beq.n	8004794 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e055      	b.n	8004840 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2202      	movs	r2, #2
 8004798:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2202      	movs	r2, #2
 80047a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80047a4:	e01d      	b.n	80047e2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047a6:	7bfb      	ldrb	r3, [r7, #15]
 80047a8:	2b01      	cmp	r3, #1
 80047aa:	d108      	bne.n	80047be <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80047ac:	7bbb      	ldrb	r3, [r7, #14]
 80047ae:	2b01      	cmp	r3, #1
 80047b0:	d105      	bne.n	80047be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80047b2:	7b7b      	ldrb	r3, [r7, #13]
 80047b4:	2b01      	cmp	r3, #1
 80047b6:	d102      	bne.n	80047be <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80047b8:	7b3b      	ldrb	r3, [r7, #12]
 80047ba:	2b01      	cmp	r3, #1
 80047bc:	d001      	beq.n	80047c2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	e03e      	b.n	8004840 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	2202      	movs	r2, #2
 80047c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2202      	movs	r2, #2
 80047ce:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	2202      	movs	r2, #2
 80047d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2202      	movs	r2, #2
 80047de:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d003      	beq.n	80047f0 <HAL_TIM_Encoder_Start+0xc4>
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	2b04      	cmp	r3, #4
 80047ec:	d008      	beq.n	8004800 <HAL_TIM_Encoder_Start+0xd4>
 80047ee:	e00f      	b.n	8004810 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2201      	movs	r2, #1
 80047f6:	2100      	movs	r1, #0
 80047f8:	4618      	mov	r0, r3
 80047fa:	f000 fc5d 	bl	80050b8 <TIM_CCxChannelCmd>
      break;
 80047fe:	e016      	b.n	800482e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2201      	movs	r2, #1
 8004806:	2104      	movs	r1, #4
 8004808:	4618      	mov	r0, r3
 800480a:	f000 fc55 	bl	80050b8 <TIM_CCxChannelCmd>
      break;
 800480e:	e00e      	b.n	800482e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2201      	movs	r2, #1
 8004816:	2100      	movs	r1, #0
 8004818:	4618      	mov	r0, r3
 800481a:	f000 fc4d 	bl	80050b8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2201      	movs	r2, #1
 8004824:	2104      	movs	r1, #4
 8004826:	4618      	mov	r0, r3
 8004828:	f000 fc46 	bl	80050b8 <TIM_CCxChannelCmd>
      break;
 800482c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	681a      	ldr	r2, [r3, #0]
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	f042 0201 	orr.w	r2, r2, #1
 800483c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3710      	adds	r7, #16
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b082      	sub	sp, #8
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	f003 0302 	and.w	r3, r3, #2
 800485a:	2b02      	cmp	r3, #2
 800485c:	d122      	bne.n	80048a4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	f003 0302 	and.w	r3, r3, #2
 8004868:	2b02      	cmp	r3, #2
 800486a:	d11b      	bne.n	80048a4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f06f 0202 	mvn.w	r2, #2
 8004874:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	2201      	movs	r2, #1
 800487a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	699b      	ldr	r3, [r3, #24]
 8004882:	f003 0303 	and.w	r3, r3, #3
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 f9b0 	bl	8004bf0 <HAL_TIM_IC_CaptureCallback>
 8004890:	e005      	b.n	800489e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004892:	6878      	ldr	r0, [r7, #4]
 8004894:	f000 f9a2 	bl	8004bdc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7fd fe2d 	bl	80024f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	2200      	movs	r2, #0
 80048a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	691b      	ldr	r3, [r3, #16]
 80048aa:	f003 0304 	and.w	r3, r3, #4
 80048ae:	2b04      	cmp	r3, #4
 80048b0:	d122      	bne.n	80048f8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f003 0304 	and.w	r3, r3, #4
 80048bc:	2b04      	cmp	r3, #4
 80048be:	d11b      	bne.n	80048f8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f06f 0204 	mvn.w	r2, #4
 80048c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2202      	movs	r2, #2
 80048ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f000 f986 	bl	8004bf0 <HAL_TIM_IC_CaptureCallback>
 80048e4:	e005      	b.n	80048f2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f000 f978 	bl	8004bdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7fd fe03 	bl	80024f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	691b      	ldr	r3, [r3, #16]
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b08      	cmp	r3, #8
 8004904:	d122      	bne.n	800494c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	681b      	ldr	r3, [r3, #0]
 800490a:	68db      	ldr	r3, [r3, #12]
 800490c:	f003 0308 	and.w	r3, r3, #8
 8004910:	2b08      	cmp	r3, #8
 8004912:	d11b      	bne.n	800494c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f06f 0208 	mvn.w	r2, #8
 800491c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2204      	movs	r2, #4
 8004922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	f003 0303 	and.w	r3, r3, #3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d003      	beq.n	800493a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004932:	6878      	ldr	r0, [r7, #4]
 8004934:	f000 f95c 	bl	8004bf0 <HAL_TIM_IC_CaptureCallback>
 8004938:	e005      	b.n	8004946 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f000 f94e 	bl	8004bdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004940:	6878      	ldr	r0, [r7, #4]
 8004942:	f7fd fdd9 	bl	80024f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2200      	movs	r2, #0
 800494a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	f003 0310 	and.w	r3, r3, #16
 8004956:	2b10      	cmp	r3, #16
 8004958:	d122      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	f003 0310 	and.w	r3, r3, #16
 8004964:	2b10      	cmp	r3, #16
 8004966:	d11b      	bne.n	80049a0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	f06f 0210 	mvn.w	r2, #16
 8004970:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2208      	movs	r2, #8
 8004976:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	69db      	ldr	r3, [r3, #28]
 800497e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004982:	2b00      	cmp	r3, #0
 8004984:	d003      	beq.n	800498e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004986:	6878      	ldr	r0, [r7, #4]
 8004988:	f000 f932 	bl	8004bf0 <HAL_TIM_IC_CaptureCallback>
 800498c:	e005      	b.n	800499a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498e:	6878      	ldr	r0, [r7, #4]
 8004990:	f000 f924 	bl	8004bdc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004994:	6878      	ldr	r0, [r7, #4]
 8004996:	f7fd fdaf 	bl	80024f8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2200      	movs	r2, #0
 800499e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	691b      	ldr	r3, [r3, #16]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d10e      	bne.n	80049cc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	68db      	ldr	r3, [r3, #12]
 80049b4:	f003 0301 	and.w	r3, r3, #1
 80049b8:	2b01      	cmp	r3, #1
 80049ba:	d107      	bne.n	80049cc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	f06f 0201 	mvn.w	r2, #1
 80049c4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80049c6:	6878      	ldr	r0, [r7, #4]
 80049c8:	f7fd fb20 	bl	800200c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049d6:	2b80      	cmp	r3, #128	; 0x80
 80049d8:	d10e      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68db      	ldr	r3, [r3, #12]
 80049e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049e4:	2b80      	cmp	r3, #128	; 0x80
 80049e6:	d107      	bne.n	80049f8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80049f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 fc5e 	bl	80052b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a02:	2b40      	cmp	r3, #64	; 0x40
 8004a04:	d10e      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a10:	2b40      	cmp	r3, #64	; 0x40
 8004a12:	d107      	bne.n	8004a24 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004a1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f8f0 	bl	8004c04 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	691b      	ldr	r3, [r3, #16]
 8004a2a:	f003 0320 	and.w	r3, r3, #32
 8004a2e:	2b20      	cmp	r3, #32
 8004a30:	d10e      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	68db      	ldr	r3, [r3, #12]
 8004a38:	f003 0320 	and.w	r3, r3, #32
 8004a3c:	2b20      	cmp	r3, #32
 8004a3e:	d107      	bne.n	8004a50 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f06f 0220 	mvn.w	r2, #32
 8004a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a4a:	6878      	ldr	r0, [r7, #4]
 8004a4c:	f000 fc28 	bl	80052a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a50:	bf00      	nop
 8004a52:	3708      	adds	r7, #8
 8004a54:	46bd      	mov	sp, r7
 8004a56:	bd80      	pop	{r7, pc}

08004a58 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a58:	b580      	push	{r7, lr}
 8004a5a:	b086      	sub	sp, #24
 8004a5c:	af00      	add	r7, sp, #0
 8004a5e:	60f8      	str	r0, [r7, #12]
 8004a60:	60b9      	str	r1, [r7, #8]
 8004a62:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a64:	2300      	movs	r3, #0
 8004a66:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d101      	bne.n	8004a76 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a72:	2302      	movs	r3, #2
 8004a74:	e0ae      	b.n	8004bd4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2b0c      	cmp	r3, #12
 8004a82:	f200 809f 	bhi.w	8004bc4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004a86:	a201      	add	r2, pc, #4	; (adr r2, 8004a8c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004a88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a8c:	08004ac1 	.word	0x08004ac1
 8004a90:	08004bc5 	.word	0x08004bc5
 8004a94:	08004bc5 	.word	0x08004bc5
 8004a98:	08004bc5 	.word	0x08004bc5
 8004a9c:	08004b01 	.word	0x08004b01
 8004aa0:	08004bc5 	.word	0x08004bc5
 8004aa4:	08004bc5 	.word	0x08004bc5
 8004aa8:	08004bc5 	.word	0x08004bc5
 8004aac:	08004b43 	.word	0x08004b43
 8004ab0:	08004bc5 	.word	0x08004bc5
 8004ab4:	08004bc5 	.word	0x08004bc5
 8004ab8:	08004bc5 	.word	0x08004bc5
 8004abc:	08004b83 	.word	0x08004b83
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	68b9      	ldr	r1, [r7, #8]
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f000 f946 	bl	8004d58 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	699a      	ldr	r2, [r3, #24]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	f042 0208 	orr.w	r2, r2, #8
 8004ada:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	699a      	ldr	r2, [r3, #24]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f022 0204 	bic.w	r2, r2, #4
 8004aea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6999      	ldr	r1, [r3, #24]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	691a      	ldr	r2, [r3, #16]
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	619a      	str	r2, [r3, #24]
      break;
 8004afe:	e064      	b.n	8004bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	68b9      	ldr	r1, [r7, #8]
 8004b06:	4618      	mov	r0, r3
 8004b08:	f000 f996 	bl	8004e38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	699a      	ldr	r2, [r3, #24]
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b1a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	699a      	ldr	r2, [r3, #24]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b2a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	6999      	ldr	r1, [r3, #24]
 8004b32:	68bb      	ldr	r3, [r7, #8]
 8004b34:	691b      	ldr	r3, [r3, #16]
 8004b36:	021a      	lsls	r2, r3, #8
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	619a      	str	r2, [r3, #24]
      break;
 8004b40:	e043      	b.n	8004bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68b9      	ldr	r1, [r7, #8]
 8004b48:	4618      	mov	r0, r3
 8004b4a:	f000 f9eb 	bl	8004f24 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	69da      	ldr	r2, [r3, #28]
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f042 0208 	orr.w	r2, r2, #8
 8004b5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	69da      	ldr	r2, [r3, #28]
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f022 0204 	bic.w	r2, r2, #4
 8004b6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	69d9      	ldr	r1, [r3, #28]
 8004b74:	68bb      	ldr	r3, [r7, #8]
 8004b76:	691a      	ldr	r2, [r3, #16]
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	430a      	orrs	r2, r1
 8004b7e:	61da      	str	r2, [r3, #28]
      break;
 8004b80:	e023      	b.n	8004bca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68b9      	ldr	r1, [r7, #8]
 8004b88:	4618      	mov	r0, r3
 8004b8a:	f000 fa3f 	bl	800500c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	69da      	ldr	r2, [r3, #28]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b9c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69da      	ldr	r2, [r3, #28]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	69d9      	ldr	r1, [r3, #28]
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	691b      	ldr	r3, [r3, #16]
 8004bb8:	021a      	lsls	r2, r3, #8
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	430a      	orrs	r2, r1
 8004bc0:	61da      	str	r2, [r3, #28]
      break;
 8004bc2:	e002      	b.n	8004bca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004bc4:	2301      	movs	r3, #1
 8004bc6:	75fb      	strb	r3, [r7, #23]
      break;
 8004bc8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004bd2:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	3718      	adds	r7, #24
 8004bd8:	46bd      	mov	sp, r7
 8004bda:	bd80      	pop	{r7, pc}

08004bdc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b083      	sub	sp, #12
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004bf8:	bf00      	nop
 8004bfa:	370c      	adds	r7, #12
 8004bfc:	46bd      	mov	sp, r7
 8004bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c02:	4770      	bx	lr

08004c04 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c04:	b480      	push	{r7}
 8004c06:	b083      	sub	sp, #12
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c0c:	bf00      	nop
 8004c0e:	370c      	adds	r7, #12
 8004c10:	46bd      	mov	sp, r7
 8004c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c16:	4770      	bx	lr

08004c18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	4a40      	ldr	r2, [pc, #256]	; (8004d2c <TIM_Base_SetConfig+0x114>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d013      	beq.n	8004c58 <TIM_Base_SetConfig+0x40>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c36:	d00f      	beq.n	8004c58 <TIM_Base_SetConfig+0x40>
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	4a3d      	ldr	r2, [pc, #244]	; (8004d30 <TIM_Base_SetConfig+0x118>)
 8004c3c:	4293      	cmp	r3, r2
 8004c3e:	d00b      	beq.n	8004c58 <TIM_Base_SetConfig+0x40>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	4a3c      	ldr	r2, [pc, #240]	; (8004d34 <TIM_Base_SetConfig+0x11c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d007      	beq.n	8004c58 <TIM_Base_SetConfig+0x40>
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	4a3b      	ldr	r2, [pc, #236]	; (8004d38 <TIM_Base_SetConfig+0x120>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d003      	beq.n	8004c58 <TIM_Base_SetConfig+0x40>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	4a3a      	ldr	r2, [pc, #232]	; (8004d3c <TIM_Base_SetConfig+0x124>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d108      	bne.n	8004c6a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004c5e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c60:	683b      	ldr	r3, [r7, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	68fa      	ldr	r2, [r7, #12]
 8004c66:	4313      	orrs	r3, r2
 8004c68:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	4a2f      	ldr	r2, [pc, #188]	; (8004d2c <TIM_Base_SetConfig+0x114>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d02b      	beq.n	8004cca <TIM_Base_SetConfig+0xb2>
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c78:	d027      	beq.n	8004cca <TIM_Base_SetConfig+0xb2>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	4a2c      	ldr	r2, [pc, #176]	; (8004d30 <TIM_Base_SetConfig+0x118>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d023      	beq.n	8004cca <TIM_Base_SetConfig+0xb2>
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	4a2b      	ldr	r2, [pc, #172]	; (8004d34 <TIM_Base_SetConfig+0x11c>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d01f      	beq.n	8004cca <TIM_Base_SetConfig+0xb2>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	4a2a      	ldr	r2, [pc, #168]	; (8004d38 <TIM_Base_SetConfig+0x120>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d01b      	beq.n	8004cca <TIM_Base_SetConfig+0xb2>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	4a29      	ldr	r2, [pc, #164]	; (8004d3c <TIM_Base_SetConfig+0x124>)
 8004c96:	4293      	cmp	r3, r2
 8004c98:	d017      	beq.n	8004cca <TIM_Base_SetConfig+0xb2>
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a28      	ldr	r2, [pc, #160]	; (8004d40 <TIM_Base_SetConfig+0x128>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d013      	beq.n	8004cca <TIM_Base_SetConfig+0xb2>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	4a27      	ldr	r2, [pc, #156]	; (8004d44 <TIM_Base_SetConfig+0x12c>)
 8004ca6:	4293      	cmp	r3, r2
 8004ca8:	d00f      	beq.n	8004cca <TIM_Base_SetConfig+0xb2>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a26      	ldr	r2, [pc, #152]	; (8004d48 <TIM_Base_SetConfig+0x130>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d00b      	beq.n	8004cca <TIM_Base_SetConfig+0xb2>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a25      	ldr	r2, [pc, #148]	; (8004d4c <TIM_Base_SetConfig+0x134>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d007      	beq.n	8004cca <TIM_Base_SetConfig+0xb2>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	4a24      	ldr	r2, [pc, #144]	; (8004d50 <TIM_Base_SetConfig+0x138>)
 8004cbe:	4293      	cmp	r3, r2
 8004cc0:	d003      	beq.n	8004cca <TIM_Base_SetConfig+0xb2>
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	4a23      	ldr	r2, [pc, #140]	; (8004d54 <TIM_Base_SetConfig+0x13c>)
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	d108      	bne.n	8004cdc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004cd0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	68fa      	ldr	r2, [r7, #12]
 8004cd8:	4313      	orrs	r3, r2
 8004cda:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004ce2:	683b      	ldr	r3, [r7, #0]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	4313      	orrs	r3, r2
 8004ce8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	681a      	ldr	r2, [r3, #0]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	4a0a      	ldr	r2, [pc, #40]	; (8004d2c <TIM_Base_SetConfig+0x114>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d003      	beq.n	8004d10 <TIM_Base_SetConfig+0xf8>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a0c      	ldr	r2, [pc, #48]	; (8004d3c <TIM_Base_SetConfig+0x124>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d103      	bne.n	8004d18 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	691a      	ldr	r2, [r3, #16]
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	2201      	movs	r2, #1
 8004d1c:	615a      	str	r2, [r3, #20]
}
 8004d1e:	bf00      	nop
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr
 8004d2a:	bf00      	nop
 8004d2c:	40010000 	.word	0x40010000
 8004d30:	40000400 	.word	0x40000400
 8004d34:	40000800 	.word	0x40000800
 8004d38:	40000c00 	.word	0x40000c00
 8004d3c:	40010400 	.word	0x40010400
 8004d40:	40014000 	.word	0x40014000
 8004d44:	40014400 	.word	0x40014400
 8004d48:	40014800 	.word	0x40014800
 8004d4c:	40001800 	.word	0x40001800
 8004d50:	40001c00 	.word	0x40001c00
 8004d54:	40002000 	.word	0x40002000

08004d58 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b087      	sub	sp, #28
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
 8004d60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	6a1b      	ldr	r3, [r3, #32]
 8004d66:	f023 0201 	bic.w	r2, r3, #1
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6a1b      	ldr	r3, [r3, #32]
 8004d72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	699b      	ldr	r3, [r3, #24]
 8004d7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	f023 0303 	bic.w	r3, r3, #3
 8004d8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	68fa      	ldr	r2, [r7, #12]
 8004d96:	4313      	orrs	r3, r2
 8004d98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004d9a:	697b      	ldr	r3, [r7, #20]
 8004d9c:	f023 0302 	bic.w	r3, r3, #2
 8004da0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	689b      	ldr	r3, [r3, #8]
 8004da6:	697a      	ldr	r2, [r7, #20]
 8004da8:	4313      	orrs	r3, r2
 8004daa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	4a20      	ldr	r2, [pc, #128]	; (8004e30 <TIM_OC1_SetConfig+0xd8>)
 8004db0:	4293      	cmp	r3, r2
 8004db2:	d003      	beq.n	8004dbc <TIM_OC1_SetConfig+0x64>
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	4a1f      	ldr	r2, [pc, #124]	; (8004e34 <TIM_OC1_SetConfig+0xdc>)
 8004db8:	4293      	cmp	r3, r2
 8004dba:	d10c      	bne.n	8004dd6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004dbc:	697b      	ldr	r3, [r7, #20]
 8004dbe:	f023 0308 	bic.w	r3, r3, #8
 8004dc2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	68db      	ldr	r3, [r3, #12]
 8004dc8:	697a      	ldr	r2, [r7, #20]
 8004dca:	4313      	orrs	r3, r2
 8004dcc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004dce:	697b      	ldr	r3, [r7, #20]
 8004dd0:	f023 0304 	bic.w	r3, r3, #4
 8004dd4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	4a15      	ldr	r2, [pc, #84]	; (8004e30 <TIM_OC1_SetConfig+0xd8>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d003      	beq.n	8004de6 <TIM_OC1_SetConfig+0x8e>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	4a14      	ldr	r2, [pc, #80]	; (8004e34 <TIM_OC1_SetConfig+0xdc>)
 8004de2:	4293      	cmp	r3, r2
 8004de4:	d111      	bne.n	8004e0a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004dee:	693b      	ldr	r3, [r7, #16]
 8004df0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004df4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004df6:	683b      	ldr	r3, [r7, #0]
 8004df8:	695b      	ldr	r3, [r3, #20]
 8004dfa:	693a      	ldr	r2, [r7, #16]
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	699b      	ldr	r3, [r3, #24]
 8004e04:	693a      	ldr	r2, [r7, #16]
 8004e06:	4313      	orrs	r3, r2
 8004e08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	693a      	ldr	r2, [r7, #16]
 8004e0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68fa      	ldr	r2, [r7, #12]
 8004e14:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004e16:	683b      	ldr	r3, [r7, #0]
 8004e18:	685a      	ldr	r2, [r3, #4]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	697a      	ldr	r2, [r7, #20]
 8004e22:	621a      	str	r2, [r3, #32]
}
 8004e24:	bf00      	nop
 8004e26:	371c      	adds	r7, #28
 8004e28:	46bd      	mov	sp, r7
 8004e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2e:	4770      	bx	lr
 8004e30:	40010000 	.word	0x40010000
 8004e34:	40010400 	.word	0x40010400

08004e38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b087      	sub	sp, #28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	f023 0210 	bic.w	r2, r3, #16
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	021b      	lsls	r3, r3, #8
 8004e76:	68fa      	ldr	r2, [r7, #12]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004e7c:	697b      	ldr	r3, [r7, #20]
 8004e7e:	f023 0320 	bic.w	r3, r3, #32
 8004e82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	689b      	ldr	r3, [r3, #8]
 8004e88:	011b      	lsls	r3, r3, #4
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a22      	ldr	r2, [pc, #136]	; (8004f1c <TIM_OC2_SetConfig+0xe4>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d003      	beq.n	8004ea0 <TIM_OC2_SetConfig+0x68>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a21      	ldr	r2, [pc, #132]	; (8004f20 <TIM_OC2_SetConfig+0xe8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d10d      	bne.n	8004ebc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004ea0:	697b      	ldr	r3, [r7, #20]
 8004ea2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ea6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	68db      	ldr	r3, [r3, #12]
 8004eac:	011b      	lsls	r3, r3, #4
 8004eae:	697a      	ldr	r2, [r7, #20]
 8004eb0:	4313      	orrs	r3, r2
 8004eb2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004eb4:	697b      	ldr	r3, [r7, #20]
 8004eb6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004eba:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	4a17      	ldr	r2, [pc, #92]	; (8004f1c <TIM_OC2_SetConfig+0xe4>)
 8004ec0:	4293      	cmp	r3, r2
 8004ec2:	d003      	beq.n	8004ecc <TIM_OC2_SetConfig+0x94>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	4a16      	ldr	r2, [pc, #88]	; (8004f20 <TIM_OC2_SetConfig+0xe8>)
 8004ec8:	4293      	cmp	r3, r2
 8004eca:	d113      	bne.n	8004ef4 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004ecc:	693b      	ldr	r3, [r7, #16]
 8004ece:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004ed2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004eda:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004edc:	683b      	ldr	r3, [r7, #0]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	009b      	lsls	r3, r3, #2
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	699b      	ldr	r3, [r3, #24]
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	693a      	ldr	r2, [r7, #16]
 8004ef0:	4313      	orrs	r3, r2
 8004ef2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	693a      	ldr	r2, [r7, #16]
 8004ef8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004f00:	683b      	ldr	r3, [r7, #0]
 8004f02:	685a      	ldr	r2, [r3, #4]
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	697a      	ldr	r2, [r7, #20]
 8004f0c:	621a      	str	r2, [r3, #32]
}
 8004f0e:	bf00      	nop
 8004f10:	371c      	adds	r7, #28
 8004f12:	46bd      	mov	sp, r7
 8004f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f18:	4770      	bx	lr
 8004f1a:	bf00      	nop
 8004f1c:	40010000 	.word	0x40010000
 8004f20:	40010400 	.word	0x40010400

08004f24 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b087      	sub	sp, #28
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
 8004f2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6a1b      	ldr	r3, [r3, #32]
 8004f32:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	6a1b      	ldr	r3, [r3, #32]
 8004f3e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	69db      	ldr	r3, [r3, #28]
 8004f4a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004f4c:	68fb      	ldr	r3, [r7, #12]
 8004f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004f52:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	f023 0303 	bic.w	r3, r3, #3
 8004f5a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f5c:	683b      	ldr	r3, [r7, #0]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	68fa      	ldr	r2, [r7, #12]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f6c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	689b      	ldr	r3, [r3, #8]
 8004f72:	021b      	lsls	r3, r3, #8
 8004f74:	697a      	ldr	r2, [r7, #20]
 8004f76:	4313      	orrs	r3, r2
 8004f78:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	4a21      	ldr	r2, [pc, #132]	; (8005004 <TIM_OC3_SetConfig+0xe0>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d003      	beq.n	8004f8a <TIM_OC3_SetConfig+0x66>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	4a20      	ldr	r2, [pc, #128]	; (8005008 <TIM_OC3_SetConfig+0xe4>)
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d10d      	bne.n	8004fa6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004f8a:	697b      	ldr	r3, [r7, #20]
 8004f8c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004f90:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	68db      	ldr	r3, [r3, #12]
 8004f96:	021b      	lsls	r3, r3, #8
 8004f98:	697a      	ldr	r2, [r7, #20]
 8004f9a:	4313      	orrs	r3, r2
 8004f9c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004f9e:	697b      	ldr	r3, [r7, #20]
 8004fa0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004fa4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a16      	ldr	r2, [pc, #88]	; (8005004 <TIM_OC3_SetConfig+0xe0>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d003      	beq.n	8004fb6 <TIM_OC3_SetConfig+0x92>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a15      	ldr	r2, [pc, #84]	; (8005008 <TIM_OC3_SetConfig+0xe4>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d113      	bne.n	8004fde <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004fc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	695b      	ldr	r3, [r3, #20]
 8004fca:	011b      	lsls	r3, r3, #4
 8004fcc:	693a      	ldr	r2, [r7, #16]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	011b      	lsls	r3, r3, #4
 8004fd8:	693a      	ldr	r2, [r7, #16]
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	693a      	ldr	r2, [r7, #16]
 8004fe2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	68fa      	ldr	r2, [r7, #12]
 8004fe8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	685a      	ldr	r2, [r3, #4]
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	697a      	ldr	r2, [r7, #20]
 8004ff6:	621a      	str	r2, [r3, #32]
}
 8004ff8:	bf00      	nop
 8004ffa:	371c      	adds	r7, #28
 8004ffc:	46bd      	mov	sp, r7
 8004ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005002:	4770      	bx	lr
 8005004:	40010000 	.word	0x40010000
 8005008:	40010400 	.word	0x40010400

0800500c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800500c:	b480      	push	{r7}
 800500e:	b087      	sub	sp, #28
 8005010:	af00      	add	r7, sp, #0
 8005012:	6078      	str	r0, [r7, #4]
 8005014:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a1b      	ldr	r3, [r3, #32]
 800501a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6a1b      	ldr	r3, [r3, #32]
 8005026:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	685b      	ldr	r3, [r3, #4]
 800502c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	69db      	ldr	r3, [r3, #28]
 8005032:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800503a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800503c:	68fb      	ldr	r3, [r7, #12]
 800503e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005042:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	021b      	lsls	r3, r3, #8
 800504a:	68fa      	ldr	r2, [r7, #12]
 800504c:	4313      	orrs	r3, r2
 800504e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005050:	693b      	ldr	r3, [r7, #16]
 8005052:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005056:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005058:	683b      	ldr	r3, [r7, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	031b      	lsls	r3, r3, #12
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	4313      	orrs	r3, r2
 8005062:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	4a12      	ldr	r2, [pc, #72]	; (80050b0 <TIM_OC4_SetConfig+0xa4>)
 8005068:	4293      	cmp	r3, r2
 800506a:	d003      	beq.n	8005074 <TIM_OC4_SetConfig+0x68>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	4a11      	ldr	r2, [pc, #68]	; (80050b4 <TIM_OC4_SetConfig+0xa8>)
 8005070:	4293      	cmp	r3, r2
 8005072:	d109      	bne.n	8005088 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005074:	697b      	ldr	r3, [r7, #20]
 8005076:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800507a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	695b      	ldr	r3, [r3, #20]
 8005080:	019b      	lsls	r3, r3, #6
 8005082:	697a      	ldr	r2, [r7, #20]
 8005084:	4313      	orrs	r3, r2
 8005086:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	68fa      	ldr	r2, [r7, #12]
 8005092:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	693a      	ldr	r2, [r7, #16]
 80050a0:	621a      	str	r2, [r3, #32]
}
 80050a2:	bf00      	nop
 80050a4:	371c      	adds	r7, #28
 80050a6:	46bd      	mov	sp, r7
 80050a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ac:	4770      	bx	lr
 80050ae:	bf00      	nop
 80050b0:	40010000 	.word	0x40010000
 80050b4:	40010400 	.word	0x40010400

080050b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80050b8:	b480      	push	{r7}
 80050ba:	b087      	sub	sp, #28
 80050bc:	af00      	add	r7, sp, #0
 80050be:	60f8      	str	r0, [r7, #12]
 80050c0:	60b9      	str	r1, [r7, #8]
 80050c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f003 031f 	and.w	r3, r3, #31
 80050ca:	2201      	movs	r2, #1
 80050cc:	fa02 f303 	lsl.w	r3, r2, r3
 80050d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	6a1a      	ldr	r2, [r3, #32]
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	43db      	mvns	r3, r3
 80050da:	401a      	ands	r2, r3
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6a1a      	ldr	r2, [r3, #32]
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	f003 031f 	and.w	r3, r3, #31
 80050ea:	6879      	ldr	r1, [r7, #4]
 80050ec:	fa01 f303 	lsl.w	r3, r1, r3
 80050f0:	431a      	orrs	r2, r3
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	621a      	str	r2, [r3, #32]
}
 80050f6:	bf00      	nop
 80050f8:	371c      	adds	r7, #28
 80050fa:	46bd      	mov	sp, r7
 80050fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005100:	4770      	bx	lr
	...

08005104 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005104:	b480      	push	{r7}
 8005106:	b085      	sub	sp, #20
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
 800510c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005114:	2b01      	cmp	r3, #1
 8005116:	d101      	bne.n	800511c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005118:	2302      	movs	r3, #2
 800511a:	e05a      	b.n	80051d2 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	2201      	movs	r2, #1
 8005120:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	2202      	movs	r2, #2
 8005128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	689b      	ldr	r3, [r3, #8]
 800513a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005142:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	68fa      	ldr	r2, [r7, #12]
 800514a:	4313      	orrs	r3, r2
 800514c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	68fa      	ldr	r2, [r7, #12]
 8005154:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	4a21      	ldr	r2, [pc, #132]	; (80051e0 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800515c:	4293      	cmp	r3, r2
 800515e:	d022      	beq.n	80051a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005168:	d01d      	beq.n	80051a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	4a1d      	ldr	r2, [pc, #116]	; (80051e4 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005170:	4293      	cmp	r3, r2
 8005172:	d018      	beq.n	80051a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	4a1b      	ldr	r2, [pc, #108]	; (80051e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d013      	beq.n	80051a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	4a1a      	ldr	r2, [pc, #104]	; (80051ec <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005184:	4293      	cmp	r3, r2
 8005186:	d00e      	beq.n	80051a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4a18      	ldr	r2, [pc, #96]	; (80051f0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800518e:	4293      	cmp	r3, r2
 8005190:	d009      	beq.n	80051a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a17      	ldr	r2, [pc, #92]	; (80051f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005198:	4293      	cmp	r3, r2
 800519a:	d004      	beq.n	80051a6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	4a15      	ldr	r2, [pc, #84]	; (80051f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80051a2:	4293      	cmp	r3, r2
 80051a4:	d10c      	bne.n	80051c0 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051ac:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	685b      	ldr	r3, [r3, #4]
 80051b2:	68ba      	ldr	r2, [r7, #8]
 80051b4:	4313      	orrs	r3, r2
 80051b6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68ba      	ldr	r2, [r7, #8]
 80051be:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2201      	movs	r2, #1
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	2200      	movs	r2, #0
 80051cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80051d0:	2300      	movs	r3, #0
}
 80051d2:	4618      	mov	r0, r3
 80051d4:	3714      	adds	r7, #20
 80051d6:	46bd      	mov	sp, r7
 80051d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051dc:	4770      	bx	lr
 80051de:	bf00      	nop
 80051e0:	40010000 	.word	0x40010000
 80051e4:	40000400 	.word	0x40000400
 80051e8:	40000800 	.word	0x40000800
 80051ec:	40000c00 	.word	0x40000c00
 80051f0:	40010400 	.word	0x40010400
 80051f4:	40014000 	.word	0x40014000
 80051f8:	40001800 	.word	0x40001800

080051fc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b085      	sub	sp, #20
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
 8005204:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005206:	2300      	movs	r3, #0
 8005208:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005210:	2b01      	cmp	r3, #1
 8005212:	d101      	bne.n	8005218 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005214:	2302      	movs	r3, #2
 8005216:	e03d      	b.n	8005294 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2201      	movs	r2, #1
 800521c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	4313      	orrs	r3, r2
 800522c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	4313      	orrs	r3, r2
 800523a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005242:	683b      	ldr	r3, [r7, #0]
 8005244:	685b      	ldr	r3, [r3, #4]
 8005246:	4313      	orrs	r3, r2
 8005248:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005250:	683b      	ldr	r3, [r7, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	4313      	orrs	r3, r2
 8005256:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800525e:	683b      	ldr	r3, [r7, #0]
 8005260:	691b      	ldr	r3, [r3, #16]
 8005262:	4313      	orrs	r3, r2
 8005264:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800526c:	683b      	ldr	r3, [r7, #0]
 800526e:	695b      	ldr	r3, [r3, #20]
 8005270:	4313      	orrs	r3, r2
 8005272:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	69db      	ldr	r3, [r3, #28]
 800527e:	4313      	orrs	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	68fa      	ldr	r2, [r7, #12]
 8005288:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3714      	adds	r7, #20
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80052a0:	b480      	push	{r7}
 80052a2:	b083      	sub	sp, #12
 80052a4:	af00      	add	r7, sp, #0
 80052a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d101      	bne.n	80052da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052d6:	2301      	movs	r3, #1
 80052d8:	e03f      	b.n	800535a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d106      	bne.n	80052f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	2200      	movs	r2, #0
 80052ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80052ee:	6878      	ldr	r0, [r7, #4]
 80052f0:	f7fd fb5a 	bl	80029a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2224      	movs	r2, #36	; 0x24
 80052f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68da      	ldr	r2, [r3, #12]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800530a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 f829 	bl	8005364 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	691a      	ldr	r2, [r3, #16]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005320:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	695a      	ldr	r2, [r3, #20]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005330:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	68da      	ldr	r2, [r3, #12]
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005340:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2220      	movs	r2, #32
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2220      	movs	r2, #32
 8005354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8005358:	2300      	movs	r3, #0
}
 800535a:	4618      	mov	r0, r3
 800535c:	3708      	adds	r7, #8
 800535e:	46bd      	mov	sp, r7
 8005360:	bd80      	pop	{r7, pc}
	...

08005364 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005368:	b0c0      	sub	sp, #256	; 0x100
 800536a:	af00      	add	r7, sp, #0
 800536c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800537c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005380:	68d9      	ldr	r1, [r3, #12]
 8005382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	ea40 0301 	orr.w	r3, r0, r1
 800538c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800538e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005392:	689a      	ldr	r2, [r3, #8]
 8005394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005398:	691b      	ldr	r3, [r3, #16]
 800539a:	431a      	orrs	r2, r3
 800539c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	431a      	orrs	r2, r3
 80053a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053a8:	69db      	ldr	r3, [r3, #28]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80053b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80053bc:	f021 010c 	bic.w	r1, r1, #12
 80053c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053c4:	681a      	ldr	r2, [r3, #0]
 80053c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80053ca:	430b      	orrs	r3, r1
 80053cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	695b      	ldr	r3, [r3, #20]
 80053d6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80053da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053de:	6999      	ldr	r1, [r3, #24]
 80053e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053e4:	681a      	ldr	r2, [r3, #0]
 80053e6:	ea40 0301 	orr.w	r3, r0, r1
 80053ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	4b8f      	ldr	r3, [pc, #572]	; (8005630 <UART_SetConfig+0x2cc>)
 80053f4:	429a      	cmp	r2, r3
 80053f6:	d005      	beq.n	8005404 <UART_SetConfig+0xa0>
 80053f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053fc:	681a      	ldr	r2, [r3, #0]
 80053fe:	4b8d      	ldr	r3, [pc, #564]	; (8005634 <UART_SetConfig+0x2d0>)
 8005400:	429a      	cmp	r2, r3
 8005402:	d104      	bne.n	800540e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005404:	f7fe fa32 	bl	800386c <HAL_RCC_GetPCLK2Freq>
 8005408:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800540c:	e003      	b.n	8005416 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800540e:	f7fe fa19 	bl	8003844 <HAL_RCC_GetPCLK1Freq>
 8005412:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005416:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800541a:	69db      	ldr	r3, [r3, #28]
 800541c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005420:	f040 810c 	bne.w	800563c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005424:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005428:	2200      	movs	r2, #0
 800542a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800542e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005432:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005436:	4622      	mov	r2, r4
 8005438:	462b      	mov	r3, r5
 800543a:	1891      	adds	r1, r2, r2
 800543c:	65b9      	str	r1, [r7, #88]	; 0x58
 800543e:	415b      	adcs	r3, r3
 8005440:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005442:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005446:	4621      	mov	r1, r4
 8005448:	eb12 0801 	adds.w	r8, r2, r1
 800544c:	4629      	mov	r1, r5
 800544e:	eb43 0901 	adc.w	r9, r3, r1
 8005452:	f04f 0200 	mov.w	r2, #0
 8005456:	f04f 0300 	mov.w	r3, #0
 800545a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800545e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005462:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005466:	4690      	mov	r8, r2
 8005468:	4699      	mov	r9, r3
 800546a:	4623      	mov	r3, r4
 800546c:	eb18 0303 	adds.w	r3, r8, r3
 8005470:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005474:	462b      	mov	r3, r5
 8005476:	eb49 0303 	adc.w	r3, r9, r3
 800547a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800547e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005482:	685b      	ldr	r3, [r3, #4]
 8005484:	2200      	movs	r2, #0
 8005486:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800548a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800548e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005492:	460b      	mov	r3, r1
 8005494:	18db      	adds	r3, r3, r3
 8005496:	653b      	str	r3, [r7, #80]	; 0x50
 8005498:	4613      	mov	r3, r2
 800549a:	eb42 0303 	adc.w	r3, r2, r3
 800549e:	657b      	str	r3, [r7, #84]	; 0x54
 80054a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80054a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80054a8:	f7fb fb54 	bl	8000b54 <__aeabi_uldivmod>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4b61      	ldr	r3, [pc, #388]	; (8005638 <UART_SetConfig+0x2d4>)
 80054b2:	fba3 2302 	umull	r2, r3, r3, r2
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	011c      	lsls	r4, r3, #4
 80054ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054be:	2200      	movs	r2, #0
 80054c0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80054c4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80054c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80054cc:	4642      	mov	r2, r8
 80054ce:	464b      	mov	r3, r9
 80054d0:	1891      	adds	r1, r2, r2
 80054d2:	64b9      	str	r1, [r7, #72]	; 0x48
 80054d4:	415b      	adcs	r3, r3
 80054d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80054d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80054dc:	4641      	mov	r1, r8
 80054de:	eb12 0a01 	adds.w	sl, r2, r1
 80054e2:	4649      	mov	r1, r9
 80054e4:	eb43 0b01 	adc.w	fp, r3, r1
 80054e8:	f04f 0200 	mov.w	r2, #0
 80054ec:	f04f 0300 	mov.w	r3, #0
 80054f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80054f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80054f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80054fc:	4692      	mov	sl, r2
 80054fe:	469b      	mov	fp, r3
 8005500:	4643      	mov	r3, r8
 8005502:	eb1a 0303 	adds.w	r3, sl, r3
 8005506:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800550a:	464b      	mov	r3, r9
 800550c:	eb4b 0303 	adc.w	r3, fp, r3
 8005510:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005514:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	2200      	movs	r2, #0
 800551c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005520:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005524:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005528:	460b      	mov	r3, r1
 800552a:	18db      	adds	r3, r3, r3
 800552c:	643b      	str	r3, [r7, #64]	; 0x40
 800552e:	4613      	mov	r3, r2
 8005530:	eb42 0303 	adc.w	r3, r2, r3
 8005534:	647b      	str	r3, [r7, #68]	; 0x44
 8005536:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800553a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800553e:	f7fb fb09 	bl	8000b54 <__aeabi_uldivmod>
 8005542:	4602      	mov	r2, r0
 8005544:	460b      	mov	r3, r1
 8005546:	4611      	mov	r1, r2
 8005548:	4b3b      	ldr	r3, [pc, #236]	; (8005638 <UART_SetConfig+0x2d4>)
 800554a:	fba3 2301 	umull	r2, r3, r3, r1
 800554e:	095b      	lsrs	r3, r3, #5
 8005550:	2264      	movs	r2, #100	; 0x64
 8005552:	fb02 f303 	mul.w	r3, r2, r3
 8005556:	1acb      	subs	r3, r1, r3
 8005558:	00db      	lsls	r3, r3, #3
 800555a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800555e:	4b36      	ldr	r3, [pc, #216]	; (8005638 <UART_SetConfig+0x2d4>)
 8005560:	fba3 2302 	umull	r2, r3, r3, r2
 8005564:	095b      	lsrs	r3, r3, #5
 8005566:	005b      	lsls	r3, r3, #1
 8005568:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800556c:	441c      	add	r4, r3
 800556e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005572:	2200      	movs	r2, #0
 8005574:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005578:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800557c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005580:	4642      	mov	r2, r8
 8005582:	464b      	mov	r3, r9
 8005584:	1891      	adds	r1, r2, r2
 8005586:	63b9      	str	r1, [r7, #56]	; 0x38
 8005588:	415b      	adcs	r3, r3
 800558a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800558c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005590:	4641      	mov	r1, r8
 8005592:	1851      	adds	r1, r2, r1
 8005594:	6339      	str	r1, [r7, #48]	; 0x30
 8005596:	4649      	mov	r1, r9
 8005598:	414b      	adcs	r3, r1
 800559a:	637b      	str	r3, [r7, #52]	; 0x34
 800559c:	f04f 0200 	mov.w	r2, #0
 80055a0:	f04f 0300 	mov.w	r3, #0
 80055a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80055a8:	4659      	mov	r1, fp
 80055aa:	00cb      	lsls	r3, r1, #3
 80055ac:	4651      	mov	r1, sl
 80055ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055b2:	4651      	mov	r1, sl
 80055b4:	00ca      	lsls	r2, r1, #3
 80055b6:	4610      	mov	r0, r2
 80055b8:	4619      	mov	r1, r3
 80055ba:	4603      	mov	r3, r0
 80055bc:	4642      	mov	r2, r8
 80055be:	189b      	adds	r3, r3, r2
 80055c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80055c4:	464b      	mov	r3, r9
 80055c6:	460a      	mov	r2, r1
 80055c8:	eb42 0303 	adc.w	r3, r2, r3
 80055cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80055d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	2200      	movs	r2, #0
 80055d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80055dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80055e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80055e4:	460b      	mov	r3, r1
 80055e6:	18db      	adds	r3, r3, r3
 80055e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80055ea:	4613      	mov	r3, r2
 80055ec:	eb42 0303 	adc.w	r3, r2, r3
 80055f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80055f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80055fa:	f7fb faab 	bl	8000b54 <__aeabi_uldivmod>
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	4b0d      	ldr	r3, [pc, #52]	; (8005638 <UART_SetConfig+0x2d4>)
 8005604:	fba3 1302 	umull	r1, r3, r3, r2
 8005608:	095b      	lsrs	r3, r3, #5
 800560a:	2164      	movs	r1, #100	; 0x64
 800560c:	fb01 f303 	mul.w	r3, r1, r3
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	00db      	lsls	r3, r3, #3
 8005614:	3332      	adds	r3, #50	; 0x32
 8005616:	4a08      	ldr	r2, [pc, #32]	; (8005638 <UART_SetConfig+0x2d4>)
 8005618:	fba2 2303 	umull	r2, r3, r2, r3
 800561c:	095b      	lsrs	r3, r3, #5
 800561e:	f003 0207 	and.w	r2, r3, #7
 8005622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	4422      	add	r2, r4
 800562a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800562c:	e105      	b.n	800583a <UART_SetConfig+0x4d6>
 800562e:	bf00      	nop
 8005630:	40011000 	.word	0x40011000
 8005634:	40011400 	.word	0x40011400
 8005638:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800563c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005640:	2200      	movs	r2, #0
 8005642:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005646:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800564a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800564e:	4642      	mov	r2, r8
 8005650:	464b      	mov	r3, r9
 8005652:	1891      	adds	r1, r2, r2
 8005654:	6239      	str	r1, [r7, #32]
 8005656:	415b      	adcs	r3, r3
 8005658:	627b      	str	r3, [r7, #36]	; 0x24
 800565a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800565e:	4641      	mov	r1, r8
 8005660:	1854      	adds	r4, r2, r1
 8005662:	4649      	mov	r1, r9
 8005664:	eb43 0501 	adc.w	r5, r3, r1
 8005668:	f04f 0200 	mov.w	r2, #0
 800566c:	f04f 0300 	mov.w	r3, #0
 8005670:	00eb      	lsls	r3, r5, #3
 8005672:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005676:	00e2      	lsls	r2, r4, #3
 8005678:	4614      	mov	r4, r2
 800567a:	461d      	mov	r5, r3
 800567c:	4643      	mov	r3, r8
 800567e:	18e3      	adds	r3, r4, r3
 8005680:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005684:	464b      	mov	r3, r9
 8005686:	eb45 0303 	adc.w	r3, r5, r3
 800568a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800568e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	2200      	movs	r2, #0
 8005696:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800569a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800569e:	f04f 0200 	mov.w	r2, #0
 80056a2:	f04f 0300 	mov.w	r3, #0
 80056a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80056aa:	4629      	mov	r1, r5
 80056ac:	008b      	lsls	r3, r1, #2
 80056ae:	4621      	mov	r1, r4
 80056b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80056b4:	4621      	mov	r1, r4
 80056b6:	008a      	lsls	r2, r1, #2
 80056b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80056bc:	f7fb fa4a 	bl	8000b54 <__aeabi_uldivmod>
 80056c0:	4602      	mov	r2, r0
 80056c2:	460b      	mov	r3, r1
 80056c4:	4b60      	ldr	r3, [pc, #384]	; (8005848 <UART_SetConfig+0x4e4>)
 80056c6:	fba3 2302 	umull	r2, r3, r3, r2
 80056ca:	095b      	lsrs	r3, r3, #5
 80056cc:	011c      	lsls	r4, r3, #4
 80056ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056d2:	2200      	movs	r2, #0
 80056d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80056d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80056dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80056e0:	4642      	mov	r2, r8
 80056e2:	464b      	mov	r3, r9
 80056e4:	1891      	adds	r1, r2, r2
 80056e6:	61b9      	str	r1, [r7, #24]
 80056e8:	415b      	adcs	r3, r3
 80056ea:	61fb      	str	r3, [r7, #28]
 80056ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80056f0:	4641      	mov	r1, r8
 80056f2:	1851      	adds	r1, r2, r1
 80056f4:	6139      	str	r1, [r7, #16]
 80056f6:	4649      	mov	r1, r9
 80056f8:	414b      	adcs	r3, r1
 80056fa:	617b      	str	r3, [r7, #20]
 80056fc:	f04f 0200 	mov.w	r2, #0
 8005700:	f04f 0300 	mov.w	r3, #0
 8005704:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005708:	4659      	mov	r1, fp
 800570a:	00cb      	lsls	r3, r1, #3
 800570c:	4651      	mov	r1, sl
 800570e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005712:	4651      	mov	r1, sl
 8005714:	00ca      	lsls	r2, r1, #3
 8005716:	4610      	mov	r0, r2
 8005718:	4619      	mov	r1, r3
 800571a:	4603      	mov	r3, r0
 800571c:	4642      	mov	r2, r8
 800571e:	189b      	adds	r3, r3, r2
 8005720:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005724:	464b      	mov	r3, r9
 8005726:	460a      	mov	r2, r1
 8005728:	eb42 0303 	adc.w	r3, r2, r3
 800572c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005730:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005734:	685b      	ldr	r3, [r3, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	67bb      	str	r3, [r7, #120]	; 0x78
 800573a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800573c:	f04f 0200 	mov.w	r2, #0
 8005740:	f04f 0300 	mov.w	r3, #0
 8005744:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005748:	4649      	mov	r1, r9
 800574a:	008b      	lsls	r3, r1, #2
 800574c:	4641      	mov	r1, r8
 800574e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005752:	4641      	mov	r1, r8
 8005754:	008a      	lsls	r2, r1, #2
 8005756:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800575a:	f7fb f9fb 	bl	8000b54 <__aeabi_uldivmod>
 800575e:	4602      	mov	r2, r0
 8005760:	460b      	mov	r3, r1
 8005762:	4b39      	ldr	r3, [pc, #228]	; (8005848 <UART_SetConfig+0x4e4>)
 8005764:	fba3 1302 	umull	r1, r3, r3, r2
 8005768:	095b      	lsrs	r3, r3, #5
 800576a:	2164      	movs	r1, #100	; 0x64
 800576c:	fb01 f303 	mul.w	r3, r1, r3
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	011b      	lsls	r3, r3, #4
 8005774:	3332      	adds	r3, #50	; 0x32
 8005776:	4a34      	ldr	r2, [pc, #208]	; (8005848 <UART_SetConfig+0x4e4>)
 8005778:	fba2 2303 	umull	r2, r3, r2, r3
 800577c:	095b      	lsrs	r3, r3, #5
 800577e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005782:	441c      	add	r4, r3
 8005784:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005788:	2200      	movs	r2, #0
 800578a:	673b      	str	r3, [r7, #112]	; 0x70
 800578c:	677a      	str	r2, [r7, #116]	; 0x74
 800578e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005792:	4642      	mov	r2, r8
 8005794:	464b      	mov	r3, r9
 8005796:	1891      	adds	r1, r2, r2
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	415b      	adcs	r3, r3
 800579c:	60fb      	str	r3, [r7, #12]
 800579e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057a2:	4641      	mov	r1, r8
 80057a4:	1851      	adds	r1, r2, r1
 80057a6:	6039      	str	r1, [r7, #0]
 80057a8:	4649      	mov	r1, r9
 80057aa:	414b      	adcs	r3, r1
 80057ac:	607b      	str	r3, [r7, #4]
 80057ae:	f04f 0200 	mov.w	r2, #0
 80057b2:	f04f 0300 	mov.w	r3, #0
 80057b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80057ba:	4659      	mov	r1, fp
 80057bc:	00cb      	lsls	r3, r1, #3
 80057be:	4651      	mov	r1, sl
 80057c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057c4:	4651      	mov	r1, sl
 80057c6:	00ca      	lsls	r2, r1, #3
 80057c8:	4610      	mov	r0, r2
 80057ca:	4619      	mov	r1, r3
 80057cc:	4603      	mov	r3, r0
 80057ce:	4642      	mov	r2, r8
 80057d0:	189b      	adds	r3, r3, r2
 80057d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80057d4:	464b      	mov	r3, r9
 80057d6:	460a      	mov	r2, r1
 80057d8:	eb42 0303 	adc.w	r3, r2, r3
 80057dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80057de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057e2:	685b      	ldr	r3, [r3, #4]
 80057e4:	2200      	movs	r2, #0
 80057e6:	663b      	str	r3, [r7, #96]	; 0x60
 80057e8:	667a      	str	r2, [r7, #100]	; 0x64
 80057ea:	f04f 0200 	mov.w	r2, #0
 80057ee:	f04f 0300 	mov.w	r3, #0
 80057f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80057f6:	4649      	mov	r1, r9
 80057f8:	008b      	lsls	r3, r1, #2
 80057fa:	4641      	mov	r1, r8
 80057fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005800:	4641      	mov	r1, r8
 8005802:	008a      	lsls	r2, r1, #2
 8005804:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005808:	f7fb f9a4 	bl	8000b54 <__aeabi_uldivmod>
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	4b0d      	ldr	r3, [pc, #52]	; (8005848 <UART_SetConfig+0x4e4>)
 8005812:	fba3 1302 	umull	r1, r3, r3, r2
 8005816:	095b      	lsrs	r3, r3, #5
 8005818:	2164      	movs	r1, #100	; 0x64
 800581a:	fb01 f303 	mul.w	r3, r1, r3
 800581e:	1ad3      	subs	r3, r2, r3
 8005820:	011b      	lsls	r3, r3, #4
 8005822:	3332      	adds	r3, #50	; 0x32
 8005824:	4a08      	ldr	r2, [pc, #32]	; (8005848 <UART_SetConfig+0x4e4>)
 8005826:	fba2 2303 	umull	r2, r3, r2, r3
 800582a:	095b      	lsrs	r3, r3, #5
 800582c:	f003 020f 	and.w	r2, r3, #15
 8005830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4422      	add	r2, r4
 8005838:	609a      	str	r2, [r3, #8]
}
 800583a:	bf00      	nop
 800583c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005840:	46bd      	mov	sp, r7
 8005842:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005846:	bf00      	nop
 8005848:	51eb851f 	.word	0x51eb851f

0800584c <cosf>:
 800584c:	ee10 3a10 	vmov	r3, s0
 8005850:	b507      	push	{r0, r1, r2, lr}
 8005852:	4a1e      	ldr	r2, [pc, #120]	; (80058cc <cosf+0x80>)
 8005854:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005858:	4293      	cmp	r3, r2
 800585a:	dc06      	bgt.n	800586a <cosf+0x1e>
 800585c:	eddf 0a1c 	vldr	s1, [pc, #112]	; 80058d0 <cosf+0x84>
 8005860:	b003      	add	sp, #12
 8005862:	f85d eb04 	ldr.w	lr, [sp], #4
 8005866:	f000 b9ef 	b.w	8005c48 <__kernel_cosf>
 800586a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800586e:	db04      	blt.n	800587a <cosf+0x2e>
 8005870:	ee30 0a40 	vsub.f32	s0, s0, s0
 8005874:	b003      	add	sp, #12
 8005876:	f85d fb04 	ldr.w	pc, [sp], #4
 800587a:	4668      	mov	r0, sp
 800587c:	f000 f8a8 	bl	80059d0 <__ieee754_rem_pio2f>
 8005880:	f000 0003 	and.w	r0, r0, #3
 8005884:	2801      	cmp	r0, #1
 8005886:	d009      	beq.n	800589c <cosf+0x50>
 8005888:	2802      	cmp	r0, #2
 800588a:	d010      	beq.n	80058ae <cosf+0x62>
 800588c:	b9b0      	cbnz	r0, 80058bc <cosf+0x70>
 800588e:	eddd 0a01 	vldr	s1, [sp, #4]
 8005892:	ed9d 0a00 	vldr	s0, [sp]
 8005896:	f000 f9d7 	bl	8005c48 <__kernel_cosf>
 800589a:	e7eb      	b.n	8005874 <cosf+0x28>
 800589c:	eddd 0a01 	vldr	s1, [sp, #4]
 80058a0:	ed9d 0a00 	vldr	s0, [sp]
 80058a4:	f000 fca6 	bl	80061f4 <__kernel_sinf>
 80058a8:	eeb1 0a40 	vneg.f32	s0, s0
 80058ac:	e7e2      	b.n	8005874 <cosf+0x28>
 80058ae:	eddd 0a01 	vldr	s1, [sp, #4]
 80058b2:	ed9d 0a00 	vldr	s0, [sp]
 80058b6:	f000 f9c7 	bl	8005c48 <__kernel_cosf>
 80058ba:	e7f5      	b.n	80058a8 <cosf+0x5c>
 80058bc:	eddd 0a01 	vldr	s1, [sp, #4]
 80058c0:	ed9d 0a00 	vldr	s0, [sp]
 80058c4:	2001      	movs	r0, #1
 80058c6:	f000 fc95 	bl	80061f4 <__kernel_sinf>
 80058ca:	e7d3      	b.n	8005874 <cosf+0x28>
 80058cc:	3f490fd8 	.word	0x3f490fd8
 80058d0:	00000000 	.word	0x00000000

080058d4 <fminf>:
 80058d4:	b508      	push	{r3, lr}
 80058d6:	ed2d 8b02 	vpush	{d8}
 80058da:	eeb0 8a40 	vmov.f32	s16, s0
 80058de:	eef0 8a60 	vmov.f32	s17, s1
 80058e2:	f000 f813 	bl	800590c <__fpclassifyf>
 80058e6:	b148      	cbz	r0, 80058fc <fminf+0x28>
 80058e8:	eeb0 0a68 	vmov.f32	s0, s17
 80058ec:	f000 f80e 	bl	800590c <__fpclassifyf>
 80058f0:	b130      	cbz	r0, 8005900 <fminf+0x2c>
 80058f2:	eeb4 8ae8 	vcmpe.f32	s16, s17
 80058f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058fa:	d401      	bmi.n	8005900 <fminf+0x2c>
 80058fc:	eeb0 8a68 	vmov.f32	s16, s17
 8005900:	eeb0 0a48 	vmov.f32	s0, s16
 8005904:	ecbd 8b02 	vpop	{d8}
 8005908:	bd08      	pop	{r3, pc}
	...

0800590c <__fpclassifyf>:
 800590c:	ee10 3a10 	vmov	r3, s0
 8005910:	f033 4000 	bics.w	r0, r3, #2147483648	; 0x80000000
 8005914:	d00d      	beq.n	8005932 <__fpclassifyf+0x26>
 8005916:	f5a0 0300 	sub.w	r3, r0, #8388608	; 0x800000
 800591a:	f1b3 4ffe 	cmp.w	r3, #2130706432	; 0x7f000000
 800591e:	d30a      	bcc.n	8005936 <__fpclassifyf+0x2a>
 8005920:	4b07      	ldr	r3, [pc, #28]	; (8005940 <__fpclassifyf+0x34>)
 8005922:	1e42      	subs	r2, r0, #1
 8005924:	429a      	cmp	r2, r3
 8005926:	d908      	bls.n	800593a <__fpclassifyf+0x2e>
 8005928:	f1a0 43ff 	sub.w	r3, r0, #2139095040	; 0x7f800000
 800592c:	4258      	negs	r0, r3
 800592e:	4158      	adcs	r0, r3
 8005930:	4770      	bx	lr
 8005932:	2002      	movs	r0, #2
 8005934:	4770      	bx	lr
 8005936:	2004      	movs	r0, #4
 8005938:	4770      	bx	lr
 800593a:	2003      	movs	r0, #3
 800593c:	4770      	bx	lr
 800593e:	bf00      	nop
 8005940:	007ffffe 	.word	0x007ffffe

08005944 <sinf>:
 8005944:	ee10 3a10 	vmov	r3, s0
 8005948:	b507      	push	{r0, r1, r2, lr}
 800594a:	4a1f      	ldr	r2, [pc, #124]	; (80059c8 <sinf+0x84>)
 800594c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005950:	4293      	cmp	r3, r2
 8005952:	dc07      	bgt.n	8005964 <sinf+0x20>
 8005954:	eddf 0a1d 	vldr	s1, [pc, #116]	; 80059cc <sinf+0x88>
 8005958:	2000      	movs	r0, #0
 800595a:	b003      	add	sp, #12
 800595c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005960:	f000 bc48 	b.w	80061f4 <__kernel_sinf>
 8005964:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8005968:	db04      	blt.n	8005974 <sinf+0x30>
 800596a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800596e:	b003      	add	sp, #12
 8005970:	f85d fb04 	ldr.w	pc, [sp], #4
 8005974:	4668      	mov	r0, sp
 8005976:	f000 f82b 	bl	80059d0 <__ieee754_rem_pio2f>
 800597a:	f000 0003 	and.w	r0, r0, #3
 800597e:	2801      	cmp	r0, #1
 8005980:	d00a      	beq.n	8005998 <sinf+0x54>
 8005982:	2802      	cmp	r0, #2
 8005984:	d00f      	beq.n	80059a6 <sinf+0x62>
 8005986:	b9c0      	cbnz	r0, 80059ba <sinf+0x76>
 8005988:	eddd 0a01 	vldr	s1, [sp, #4]
 800598c:	ed9d 0a00 	vldr	s0, [sp]
 8005990:	2001      	movs	r0, #1
 8005992:	f000 fc2f 	bl	80061f4 <__kernel_sinf>
 8005996:	e7ea      	b.n	800596e <sinf+0x2a>
 8005998:	eddd 0a01 	vldr	s1, [sp, #4]
 800599c:	ed9d 0a00 	vldr	s0, [sp]
 80059a0:	f000 f952 	bl	8005c48 <__kernel_cosf>
 80059a4:	e7e3      	b.n	800596e <sinf+0x2a>
 80059a6:	eddd 0a01 	vldr	s1, [sp, #4]
 80059aa:	ed9d 0a00 	vldr	s0, [sp]
 80059ae:	2001      	movs	r0, #1
 80059b0:	f000 fc20 	bl	80061f4 <__kernel_sinf>
 80059b4:	eeb1 0a40 	vneg.f32	s0, s0
 80059b8:	e7d9      	b.n	800596e <sinf+0x2a>
 80059ba:	eddd 0a01 	vldr	s1, [sp, #4]
 80059be:	ed9d 0a00 	vldr	s0, [sp]
 80059c2:	f000 f941 	bl	8005c48 <__kernel_cosf>
 80059c6:	e7f5      	b.n	80059b4 <sinf+0x70>
 80059c8:	3f490fd8 	.word	0x3f490fd8
 80059cc:	00000000 	.word	0x00000000

080059d0 <__ieee754_rem_pio2f>:
 80059d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80059d2:	ee10 6a10 	vmov	r6, s0
 80059d6:	4b8e      	ldr	r3, [pc, #568]	; (8005c10 <__ieee754_rem_pio2f+0x240>)
 80059d8:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80059dc:	429d      	cmp	r5, r3
 80059de:	b087      	sub	sp, #28
 80059e0:	eef0 7a40 	vmov.f32	s15, s0
 80059e4:	4604      	mov	r4, r0
 80059e6:	dc05      	bgt.n	80059f4 <__ieee754_rem_pio2f+0x24>
 80059e8:	2300      	movs	r3, #0
 80059ea:	ed80 0a00 	vstr	s0, [r0]
 80059ee:	6043      	str	r3, [r0, #4]
 80059f0:	2000      	movs	r0, #0
 80059f2:	e01a      	b.n	8005a2a <__ieee754_rem_pio2f+0x5a>
 80059f4:	4b87      	ldr	r3, [pc, #540]	; (8005c14 <__ieee754_rem_pio2f+0x244>)
 80059f6:	429d      	cmp	r5, r3
 80059f8:	dc46      	bgt.n	8005a88 <__ieee754_rem_pio2f+0xb8>
 80059fa:	2e00      	cmp	r6, #0
 80059fc:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8005c18 <__ieee754_rem_pio2f+0x248>
 8005a00:	4b86      	ldr	r3, [pc, #536]	; (8005c1c <__ieee754_rem_pio2f+0x24c>)
 8005a02:	f025 050f 	bic.w	r5, r5, #15
 8005a06:	dd1f      	ble.n	8005a48 <__ieee754_rem_pio2f+0x78>
 8005a08:	429d      	cmp	r5, r3
 8005a0a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005a0e:	d00e      	beq.n	8005a2e <__ieee754_rem_pio2f+0x5e>
 8005a10:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8005c20 <__ieee754_rem_pio2f+0x250>
 8005a14:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8005a18:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005a1c:	ed80 0a00 	vstr	s0, [r0]
 8005a20:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a24:	2001      	movs	r0, #1
 8005a26:	edc4 7a01 	vstr	s15, [r4, #4]
 8005a2a:	b007      	add	sp, #28
 8005a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a2e:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8005c24 <__ieee754_rem_pio2f+0x254>
 8005a32:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8005c28 <__ieee754_rem_pio2f+0x258>
 8005a36:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005a3a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8005a3e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005a42:	edc0 6a00 	vstr	s13, [r0]
 8005a46:	e7eb      	b.n	8005a20 <__ieee754_rem_pio2f+0x50>
 8005a48:	429d      	cmp	r5, r3
 8005a4a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005a4e:	d00e      	beq.n	8005a6e <__ieee754_rem_pio2f+0x9e>
 8005a50:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8005c20 <__ieee754_rem_pio2f+0x250>
 8005a54:	ee37 0a87 	vadd.f32	s0, s15, s14
 8005a58:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8005a5c:	ed80 0a00 	vstr	s0, [r0]
 8005a60:	ee77 7a87 	vadd.f32	s15, s15, s14
 8005a64:	f04f 30ff 	mov.w	r0, #4294967295
 8005a68:	edc4 7a01 	vstr	s15, [r4, #4]
 8005a6c:	e7dd      	b.n	8005a2a <__ieee754_rem_pio2f+0x5a>
 8005a6e:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8005c24 <__ieee754_rem_pio2f+0x254>
 8005a72:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8005c28 <__ieee754_rem_pio2f+0x258>
 8005a76:	ee77 7a80 	vadd.f32	s15, s15, s0
 8005a7a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005a7e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005a82:	edc0 6a00 	vstr	s13, [r0]
 8005a86:	e7eb      	b.n	8005a60 <__ieee754_rem_pio2f+0x90>
 8005a88:	4b68      	ldr	r3, [pc, #416]	; (8005c2c <__ieee754_rem_pio2f+0x25c>)
 8005a8a:	429d      	cmp	r5, r3
 8005a8c:	dc72      	bgt.n	8005b74 <__ieee754_rem_pio2f+0x1a4>
 8005a8e:	f000 fbf9 	bl	8006284 <fabsf>
 8005a92:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8005c30 <__ieee754_rem_pio2f+0x260>
 8005a96:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005a9a:	eee0 7a07 	vfma.f32	s15, s0, s14
 8005a9e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005aa2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005aa6:	ee17 0a90 	vmov	r0, s15
 8005aaa:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8005c18 <__ieee754_rem_pio2f+0x248>
 8005aae:	eea7 0a67 	vfms.f32	s0, s14, s15
 8005ab2:	281f      	cmp	r0, #31
 8005ab4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8005c20 <__ieee754_rem_pio2f+0x250>
 8005ab8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005abc:	eeb1 6a47 	vneg.f32	s12, s14
 8005ac0:	ee70 6a67 	vsub.f32	s13, s0, s15
 8005ac4:	ee16 2a90 	vmov	r2, s13
 8005ac8:	dc1c      	bgt.n	8005b04 <__ieee754_rem_pio2f+0x134>
 8005aca:	495a      	ldr	r1, [pc, #360]	; (8005c34 <__ieee754_rem_pio2f+0x264>)
 8005acc:	1e47      	subs	r7, r0, #1
 8005ace:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8005ad2:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8005ad6:	428b      	cmp	r3, r1
 8005ad8:	d014      	beq.n	8005b04 <__ieee754_rem_pio2f+0x134>
 8005ada:	6022      	str	r2, [r4, #0]
 8005adc:	ed94 7a00 	vldr	s14, [r4]
 8005ae0:	ee30 0a47 	vsub.f32	s0, s0, s14
 8005ae4:	2e00      	cmp	r6, #0
 8005ae6:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005aea:	ed84 0a01 	vstr	s0, [r4, #4]
 8005aee:	da9c      	bge.n	8005a2a <__ieee754_rem_pio2f+0x5a>
 8005af0:	eeb1 7a47 	vneg.f32	s14, s14
 8005af4:	eeb1 0a40 	vneg.f32	s0, s0
 8005af8:	ed84 7a00 	vstr	s14, [r4]
 8005afc:	ed84 0a01 	vstr	s0, [r4, #4]
 8005b00:	4240      	negs	r0, r0
 8005b02:	e792      	b.n	8005a2a <__ieee754_rem_pio2f+0x5a>
 8005b04:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8005b08:	15eb      	asrs	r3, r5, #23
 8005b0a:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8005b0e:	2d08      	cmp	r5, #8
 8005b10:	dde3      	ble.n	8005ada <__ieee754_rem_pio2f+0x10a>
 8005b12:	eddf 7a44 	vldr	s15, [pc, #272]	; 8005c24 <__ieee754_rem_pio2f+0x254>
 8005b16:	eddf 5a44 	vldr	s11, [pc, #272]	; 8005c28 <__ieee754_rem_pio2f+0x258>
 8005b1a:	eef0 6a40 	vmov.f32	s13, s0
 8005b1e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8005b22:	ee30 0a66 	vsub.f32	s0, s0, s13
 8005b26:	eea6 0a27 	vfma.f32	s0, s12, s15
 8005b2a:	eef0 7a40 	vmov.f32	s15, s0
 8005b2e:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8005b32:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8005b36:	ee15 2a90 	vmov	r2, s11
 8005b3a:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8005b3e:	1a5b      	subs	r3, r3, r1
 8005b40:	2b19      	cmp	r3, #25
 8005b42:	dc04      	bgt.n	8005b4e <__ieee754_rem_pio2f+0x17e>
 8005b44:	edc4 5a00 	vstr	s11, [r4]
 8005b48:	eeb0 0a66 	vmov.f32	s0, s13
 8005b4c:	e7c6      	b.n	8005adc <__ieee754_rem_pio2f+0x10c>
 8005b4e:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8005c38 <__ieee754_rem_pio2f+0x268>
 8005b52:	eeb0 0a66 	vmov.f32	s0, s13
 8005b56:	eea6 0a25 	vfma.f32	s0, s12, s11
 8005b5a:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8005b5e:	eddf 6a37 	vldr	s13, [pc, #220]	; 8005c3c <__ieee754_rem_pio2f+0x26c>
 8005b62:	eee6 7a25 	vfma.f32	s15, s12, s11
 8005b66:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8005b6a:	ee30 7a67 	vsub.f32	s14, s0, s15
 8005b6e:	ed84 7a00 	vstr	s14, [r4]
 8005b72:	e7b3      	b.n	8005adc <__ieee754_rem_pio2f+0x10c>
 8005b74:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8005b78:	db06      	blt.n	8005b88 <__ieee754_rem_pio2f+0x1b8>
 8005b7a:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005b7e:	edc0 7a01 	vstr	s15, [r0, #4]
 8005b82:	edc0 7a00 	vstr	s15, [r0]
 8005b86:	e733      	b.n	80059f0 <__ieee754_rem_pio2f+0x20>
 8005b88:	15ea      	asrs	r2, r5, #23
 8005b8a:	3a86      	subs	r2, #134	; 0x86
 8005b8c:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8005b90:	ee07 3a90 	vmov	s15, r3
 8005b94:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005b98:	eddf 6a29 	vldr	s13, [pc, #164]	; 8005c40 <__ieee754_rem_pio2f+0x270>
 8005b9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005ba0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005ba4:	ed8d 7a03 	vstr	s14, [sp, #12]
 8005ba8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005bac:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8005bb0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005bb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005bb8:	ed8d 7a04 	vstr	s14, [sp, #16]
 8005bbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005bc0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8005bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bc8:	edcd 7a05 	vstr	s15, [sp, #20]
 8005bcc:	d11e      	bne.n	8005c0c <__ieee754_rem_pio2f+0x23c>
 8005bce:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8005bd2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bd6:	bf14      	ite	ne
 8005bd8:	2302      	movne	r3, #2
 8005bda:	2301      	moveq	r3, #1
 8005bdc:	4919      	ldr	r1, [pc, #100]	; (8005c44 <__ieee754_rem_pio2f+0x274>)
 8005bde:	9101      	str	r1, [sp, #4]
 8005be0:	2102      	movs	r1, #2
 8005be2:	9100      	str	r1, [sp, #0]
 8005be4:	a803      	add	r0, sp, #12
 8005be6:	4621      	mov	r1, r4
 8005be8:	f000 f88e 	bl	8005d08 <__kernel_rem_pio2f>
 8005bec:	2e00      	cmp	r6, #0
 8005bee:	f6bf af1c 	bge.w	8005a2a <__ieee754_rem_pio2f+0x5a>
 8005bf2:	edd4 7a00 	vldr	s15, [r4]
 8005bf6:	eef1 7a67 	vneg.f32	s15, s15
 8005bfa:	edc4 7a00 	vstr	s15, [r4]
 8005bfe:	edd4 7a01 	vldr	s15, [r4, #4]
 8005c02:	eef1 7a67 	vneg.f32	s15, s15
 8005c06:	edc4 7a01 	vstr	s15, [r4, #4]
 8005c0a:	e779      	b.n	8005b00 <__ieee754_rem_pio2f+0x130>
 8005c0c:	2303      	movs	r3, #3
 8005c0e:	e7e5      	b.n	8005bdc <__ieee754_rem_pio2f+0x20c>
 8005c10:	3f490fd8 	.word	0x3f490fd8
 8005c14:	4016cbe3 	.word	0x4016cbe3
 8005c18:	3fc90f80 	.word	0x3fc90f80
 8005c1c:	3fc90fd0 	.word	0x3fc90fd0
 8005c20:	37354443 	.word	0x37354443
 8005c24:	37354400 	.word	0x37354400
 8005c28:	2e85a308 	.word	0x2e85a308
 8005c2c:	43490f80 	.word	0x43490f80
 8005c30:	3f22f984 	.word	0x3f22f984
 8005c34:	08006484 	.word	0x08006484
 8005c38:	2e85a300 	.word	0x2e85a300
 8005c3c:	248d3132 	.word	0x248d3132
 8005c40:	43800000 	.word	0x43800000
 8005c44:	08006504 	.word	0x08006504

08005c48 <__kernel_cosf>:
 8005c48:	ee10 3a10 	vmov	r3, s0
 8005c4c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005c50:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8005c54:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005c58:	da05      	bge.n	8005c66 <__kernel_cosf+0x1e>
 8005c5a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8005c5e:	ee17 2a90 	vmov	r2, s15
 8005c62:	2a00      	cmp	r2, #0
 8005c64:	d03d      	beq.n	8005ce2 <__kernel_cosf+0x9a>
 8005c66:	ee60 5a00 	vmul.f32	s11, s0, s0
 8005c6a:	eddf 7a1f 	vldr	s15, [pc, #124]	; 8005ce8 <__kernel_cosf+0xa0>
 8005c6e:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8005cec <__kernel_cosf+0xa4>
 8005c72:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8005cf0 <__kernel_cosf+0xa8>
 8005c76:	4a1f      	ldr	r2, [pc, #124]	; (8005cf4 <__kernel_cosf+0xac>)
 8005c78:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	eddf 7a1e 	vldr	s15, [pc, #120]	; 8005cf8 <__kernel_cosf+0xb0>
 8005c82:	eee7 7a25 	vfma.f32	s15, s14, s11
 8005c86:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 8005cfc <__kernel_cosf+0xb4>
 8005c8a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8005c8e:	eddf 7a1c 	vldr	s15, [pc, #112]	; 8005d00 <__kernel_cosf+0xb8>
 8005c92:	eee7 7a25 	vfma.f32	s15, s14, s11
 8005c96:	eeb0 7a66 	vmov.f32	s14, s13
 8005c9a:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8005c9e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 8005ca2:	ee65 7aa6 	vmul.f32	s15, s11, s13
 8005ca6:	ee67 6a25 	vmul.f32	s13, s14, s11
 8005caa:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 8005cae:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8005cb2:	dc04      	bgt.n	8005cbe <__kernel_cosf+0x76>
 8005cb4:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005cb8:	ee36 0a47 	vsub.f32	s0, s12, s14
 8005cbc:	4770      	bx	lr
 8005cbe:	4a11      	ldr	r2, [pc, #68]	; (8005d04 <__kernel_cosf+0xbc>)
 8005cc0:	4293      	cmp	r3, r2
 8005cc2:	bfda      	itte	le
 8005cc4:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 8005cc8:	ee06 3a90 	vmovle	s13, r3
 8005ccc:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 8005cd0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005cd4:	ee36 0a66 	vsub.f32	s0, s12, s13
 8005cd8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005cdc:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005ce0:	4770      	bx	lr
 8005ce2:	eeb0 0a46 	vmov.f32	s0, s12
 8005ce6:	4770      	bx	lr
 8005ce8:	ad47d74e 	.word	0xad47d74e
 8005cec:	310f74f6 	.word	0x310f74f6
 8005cf0:	3d2aaaab 	.word	0x3d2aaaab
 8005cf4:	3e999999 	.word	0x3e999999
 8005cf8:	b493f27c 	.word	0xb493f27c
 8005cfc:	37d00d01 	.word	0x37d00d01
 8005d00:	bab60b61 	.word	0xbab60b61
 8005d04:	3f480000 	.word	0x3f480000

08005d08 <__kernel_rem_pio2f>:
 8005d08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d0c:	ed2d 8b04 	vpush	{d8-d9}
 8005d10:	b0d9      	sub	sp, #356	; 0x164
 8005d12:	4688      	mov	r8, r1
 8005d14:	9002      	str	r0, [sp, #8]
 8005d16:	49bb      	ldr	r1, [pc, #748]	; (8006004 <__kernel_rem_pio2f+0x2fc>)
 8005d18:	9866      	ldr	r0, [sp, #408]	; 0x198
 8005d1a:	9301      	str	r3, [sp, #4]
 8005d1c:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 8005d20:	f8dd e19c 	ldr.w	lr, [sp, #412]	; 0x19c
 8005d24:	1e59      	subs	r1, r3, #1
 8005d26:	1d13      	adds	r3, r2, #4
 8005d28:	db27      	blt.n	8005d7a <__kernel_rem_pio2f+0x72>
 8005d2a:	f1b2 0b03 	subs.w	fp, r2, #3
 8005d2e:	bf48      	it	mi
 8005d30:	f102 0b04 	addmi.w	fp, r2, #4
 8005d34:	ea4f 00eb 	mov.w	r0, fp, asr #3
 8005d38:	1c45      	adds	r5, r0, #1
 8005d3a:	00ec      	lsls	r4, r5, #3
 8005d3c:	1a47      	subs	r7, r0, r1
 8005d3e:	ed9f 7ab5 	vldr	s14, [pc, #724]	; 8006014 <__kernel_rem_pio2f+0x30c>
 8005d42:	9403      	str	r4, [sp, #12]
 8005d44:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8005d48:	eb0a 0c01 	add.w	ip, sl, r1
 8005d4c:	ae1c      	add	r6, sp, #112	; 0x70
 8005d4e:	eb0e 0987 	add.w	r9, lr, r7, lsl #2
 8005d52:	2400      	movs	r4, #0
 8005d54:	4564      	cmp	r4, ip
 8005d56:	dd12      	ble.n	8005d7e <__kernel_rem_pio2f+0x76>
 8005d58:	9b01      	ldr	r3, [sp, #4]
 8005d5a:	ac1c      	add	r4, sp, #112	; 0x70
 8005d5c:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8005d60:	f50d 7b88 	add.w	fp, sp, #272	; 0x110
 8005d64:	f04f 0c00 	mov.w	ip, #0
 8005d68:	45d4      	cmp	ip, sl
 8005d6a:	dc27      	bgt.n	8005dbc <__kernel_rem_pio2f+0xb4>
 8005d6c:	f8dd 9008 	ldr.w	r9, [sp, #8]
 8005d70:	eddf 7aa8 	vldr	s15, [pc, #672]	; 8006014 <__kernel_rem_pio2f+0x30c>
 8005d74:	4627      	mov	r7, r4
 8005d76:	2600      	movs	r6, #0
 8005d78:	e016      	b.n	8005da8 <__kernel_rem_pio2f+0xa0>
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	e7dc      	b.n	8005d38 <__kernel_rem_pio2f+0x30>
 8005d7e:	42e7      	cmn	r7, r4
 8005d80:	bf5d      	ittte	pl
 8005d82:	f859 3024 	ldrpl.w	r3, [r9, r4, lsl #2]
 8005d86:	ee07 3a90 	vmovpl	s15, r3
 8005d8a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 8005d8e:	eef0 7a47 	vmovmi.f32	s15, s14
 8005d92:	ece6 7a01 	vstmia	r6!, {s15}
 8005d96:	3401      	adds	r4, #1
 8005d98:	e7dc      	b.n	8005d54 <__kernel_rem_pio2f+0x4c>
 8005d9a:	ecf9 6a01 	vldmia	r9!, {s13}
 8005d9e:	ed97 7a00 	vldr	s14, [r7]
 8005da2:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005da6:	3601      	adds	r6, #1
 8005da8:	428e      	cmp	r6, r1
 8005daa:	f1a7 0704 	sub.w	r7, r7, #4
 8005dae:	ddf4      	ble.n	8005d9a <__kernel_rem_pio2f+0x92>
 8005db0:	eceb 7a01 	vstmia	fp!, {s15}
 8005db4:	f10c 0c01 	add.w	ip, ip, #1
 8005db8:	3404      	adds	r4, #4
 8005dba:	e7d5      	b.n	8005d68 <__kernel_rem_pio2f+0x60>
 8005dbc:	ab08      	add	r3, sp, #32
 8005dbe:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 8005dc2:	eddf 8a93 	vldr	s17, [pc, #588]	; 8006010 <__kernel_rem_pio2f+0x308>
 8005dc6:	ed9f 9a91 	vldr	s18, [pc, #580]	; 800600c <__kernel_rem_pio2f+0x304>
 8005dca:	9304      	str	r3, [sp, #16]
 8005dcc:	eb0e 0b80 	add.w	fp, lr, r0, lsl #2
 8005dd0:	4656      	mov	r6, sl
 8005dd2:	00b3      	lsls	r3, r6, #2
 8005dd4:	9305      	str	r3, [sp, #20]
 8005dd6:	ab58      	add	r3, sp, #352	; 0x160
 8005dd8:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8005ddc:	ac08      	add	r4, sp, #32
 8005dde:	ab44      	add	r3, sp, #272	; 0x110
 8005de0:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8005de4:	46a4      	mov	ip, r4
 8005de6:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8005dea:	4637      	mov	r7, r6
 8005dec:	2f00      	cmp	r7, #0
 8005dee:	f1a0 0004 	sub.w	r0, r0, #4
 8005df2:	dc4f      	bgt.n	8005e94 <__kernel_rem_pio2f+0x18c>
 8005df4:	4628      	mov	r0, r5
 8005df6:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8005dfa:	f000 fa8d 	bl	8006318 <scalbnf>
 8005dfe:	eeb0 8a40 	vmov.f32	s16, s0
 8005e02:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8005e06:	ee28 0a00 	vmul.f32	s0, s16, s0
 8005e0a:	f000 fa43 	bl	8006294 <floorf>
 8005e0e:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8005e12:	eea0 8a67 	vfms.f32	s16, s0, s15
 8005e16:	2d00      	cmp	r5, #0
 8005e18:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8005e1c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8005e20:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8005e24:	ee17 9a90 	vmov	r9, s15
 8005e28:	ee38 8a40 	vsub.f32	s16, s16, s0
 8005e2c:	dd44      	ble.n	8005eb8 <__kernel_rem_pio2f+0x1b0>
 8005e2e:	f106 3cff 	add.w	ip, r6, #4294967295
 8005e32:	ab08      	add	r3, sp, #32
 8005e34:	f1c5 0e08 	rsb	lr, r5, #8
 8005e38:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8005e3c:	fa47 f00e 	asr.w	r0, r7, lr
 8005e40:	4481      	add	r9, r0
 8005e42:	fa00 f00e 	lsl.w	r0, r0, lr
 8005e46:	1a3f      	subs	r7, r7, r0
 8005e48:	f1c5 0007 	rsb	r0, r5, #7
 8005e4c:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8005e50:	4107      	asrs	r7, r0
 8005e52:	2f00      	cmp	r7, #0
 8005e54:	dd3f      	ble.n	8005ed6 <__kernel_rem_pio2f+0x1ce>
 8005e56:	f04f 0e00 	mov.w	lr, #0
 8005e5a:	f109 0901 	add.w	r9, r9, #1
 8005e5e:	4673      	mov	r3, lr
 8005e60:	4576      	cmp	r6, lr
 8005e62:	dc6b      	bgt.n	8005f3c <__kernel_rem_pio2f+0x234>
 8005e64:	2d00      	cmp	r5, #0
 8005e66:	dd04      	ble.n	8005e72 <__kernel_rem_pio2f+0x16a>
 8005e68:	2d01      	cmp	r5, #1
 8005e6a:	d078      	beq.n	8005f5e <__kernel_rem_pio2f+0x256>
 8005e6c:	2d02      	cmp	r5, #2
 8005e6e:	f000 8081 	beq.w	8005f74 <__kernel_rem_pio2f+0x26c>
 8005e72:	2f02      	cmp	r7, #2
 8005e74:	d12f      	bne.n	8005ed6 <__kernel_rem_pio2f+0x1ce>
 8005e76:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005e7a:	ee30 8a48 	vsub.f32	s16, s0, s16
 8005e7e:	b353      	cbz	r3, 8005ed6 <__kernel_rem_pio2f+0x1ce>
 8005e80:	4628      	mov	r0, r5
 8005e82:	e9cd 1206 	strd	r1, r2, [sp, #24]
 8005e86:	f000 fa47 	bl	8006318 <scalbnf>
 8005e8a:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 8005e8e:	ee38 8a40 	vsub.f32	s16, s16, s0
 8005e92:	e020      	b.n	8005ed6 <__kernel_rem_pio2f+0x1ce>
 8005e94:	ee60 7a28 	vmul.f32	s15, s0, s17
 8005e98:	3f01      	subs	r7, #1
 8005e9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005e9e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ea2:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8005ea6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8005eaa:	ecac 0a01 	vstmia	ip!, {s0}
 8005eae:	ed90 0a00 	vldr	s0, [r0]
 8005eb2:	ee37 0a80 	vadd.f32	s0, s15, s0
 8005eb6:	e799      	b.n	8005dec <__kernel_rem_pio2f+0xe4>
 8005eb8:	d105      	bne.n	8005ec6 <__kernel_rem_pio2f+0x1be>
 8005eba:	1e70      	subs	r0, r6, #1
 8005ebc:	ab08      	add	r3, sp, #32
 8005ebe:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8005ec2:	11ff      	asrs	r7, r7, #7
 8005ec4:	e7c5      	b.n	8005e52 <__kernel_rem_pio2f+0x14a>
 8005ec6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8005eca:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8005ece:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ed2:	da31      	bge.n	8005f38 <__kernel_rem_pio2f+0x230>
 8005ed4:	2700      	movs	r7, #0
 8005ed6:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8005eda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ede:	f040 809b 	bne.w	8006018 <__kernel_rem_pio2f+0x310>
 8005ee2:	1e74      	subs	r4, r6, #1
 8005ee4:	46a4      	mov	ip, r4
 8005ee6:	2000      	movs	r0, #0
 8005ee8:	45d4      	cmp	ip, sl
 8005eea:	da4a      	bge.n	8005f82 <__kernel_rem_pio2f+0x27a>
 8005eec:	2800      	cmp	r0, #0
 8005eee:	d07a      	beq.n	8005fe6 <__kernel_rem_pio2f+0x2de>
 8005ef0:	ab08      	add	r3, sp, #32
 8005ef2:	3d08      	subs	r5, #8
 8005ef4:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 8081 	beq.w	8006000 <__kernel_rem_pio2f+0x2f8>
 8005efe:	4628      	mov	r0, r5
 8005f00:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005f04:	00a5      	lsls	r5, r4, #2
 8005f06:	f000 fa07 	bl	8006318 <scalbnf>
 8005f0a:	aa44      	add	r2, sp, #272	; 0x110
 8005f0c:	1d2b      	adds	r3, r5, #4
 8005f0e:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8006010 <__kernel_rem_pio2f+0x308>
 8005f12:	18d1      	adds	r1, r2, r3
 8005f14:	4622      	mov	r2, r4
 8005f16:	2a00      	cmp	r2, #0
 8005f18:	f280 80ae 	bge.w	8006078 <__kernel_rem_pio2f+0x370>
 8005f1c:	4622      	mov	r2, r4
 8005f1e:	2a00      	cmp	r2, #0
 8005f20:	f2c0 80cc 	blt.w	80060bc <__kernel_rem_pio2f+0x3b4>
 8005f24:	a944      	add	r1, sp, #272	; 0x110
 8005f26:	eb01 0682 	add.w	r6, r1, r2, lsl #2
 8005f2a:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8006008 <__kernel_rem_pio2f+0x300>
 8005f2e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8006014 <__kernel_rem_pio2f+0x30c>
 8005f32:	2000      	movs	r0, #0
 8005f34:	1aa1      	subs	r1, r4, r2
 8005f36:	e0b6      	b.n	80060a6 <__kernel_rem_pio2f+0x39e>
 8005f38:	2702      	movs	r7, #2
 8005f3a:	e78c      	b.n	8005e56 <__kernel_rem_pio2f+0x14e>
 8005f3c:	6820      	ldr	r0, [r4, #0]
 8005f3e:	b94b      	cbnz	r3, 8005f54 <__kernel_rem_pio2f+0x24c>
 8005f40:	b118      	cbz	r0, 8005f4a <__kernel_rem_pio2f+0x242>
 8005f42:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8005f46:	6020      	str	r0, [r4, #0]
 8005f48:	2001      	movs	r0, #1
 8005f4a:	f10e 0e01 	add.w	lr, lr, #1
 8005f4e:	3404      	adds	r4, #4
 8005f50:	4603      	mov	r3, r0
 8005f52:	e785      	b.n	8005e60 <__kernel_rem_pio2f+0x158>
 8005f54:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8005f58:	6020      	str	r0, [r4, #0]
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	e7f5      	b.n	8005f4a <__kernel_rem_pio2f+0x242>
 8005f5e:	1e74      	subs	r4, r6, #1
 8005f60:	a808      	add	r0, sp, #32
 8005f62:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8005f66:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8005f6a:	f10d 0c20 	add.w	ip, sp, #32
 8005f6e:	f84c 0024 	str.w	r0, [ip, r4, lsl #2]
 8005f72:	e77e      	b.n	8005e72 <__kernel_rem_pio2f+0x16a>
 8005f74:	1e74      	subs	r4, r6, #1
 8005f76:	a808      	add	r0, sp, #32
 8005f78:	f850 0024 	ldr.w	r0, [r0, r4, lsl #2]
 8005f7c:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8005f80:	e7f3      	b.n	8005f6a <__kernel_rem_pio2f+0x262>
 8005f82:	ab08      	add	r3, sp, #32
 8005f84:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8005f88:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005f8c:	4318      	orrs	r0, r3
 8005f8e:	e7ab      	b.n	8005ee8 <__kernel_rem_pio2f+0x1e0>
 8005f90:	f10c 0c01 	add.w	ip, ip, #1
 8005f94:	f850 4d04 	ldr.w	r4, [r0, #-4]!
 8005f98:	2c00      	cmp	r4, #0
 8005f9a:	d0f9      	beq.n	8005f90 <__kernel_rem_pio2f+0x288>
 8005f9c:	9b05      	ldr	r3, [sp, #20]
 8005f9e:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8005fa2:	eb0d 0003 	add.w	r0, sp, r3
 8005fa6:	9b01      	ldr	r3, [sp, #4]
 8005fa8:	18f4      	adds	r4, r6, r3
 8005faa:	ab1c      	add	r3, sp, #112	; 0x70
 8005fac:	1c77      	adds	r7, r6, #1
 8005fae:	384c      	subs	r0, #76	; 0x4c
 8005fb0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8005fb4:	4466      	add	r6, ip
 8005fb6:	42be      	cmp	r6, r7
 8005fb8:	f6ff af0b 	blt.w	8005dd2 <__kernel_rem_pio2f+0xca>
 8005fbc:	f85b 3027 	ldr.w	r3, [fp, r7, lsl #2]
 8005fc0:	f8dd e008 	ldr.w	lr, [sp, #8]
 8005fc4:	ee07 3a90 	vmov	s15, r3
 8005fc8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005fcc:	f04f 0c00 	mov.w	ip, #0
 8005fd0:	ece4 7a01 	vstmia	r4!, {s15}
 8005fd4:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8006014 <__kernel_rem_pio2f+0x30c>
 8005fd8:	46a1      	mov	r9, r4
 8005fda:	458c      	cmp	ip, r1
 8005fdc:	dd07      	ble.n	8005fee <__kernel_rem_pio2f+0x2e6>
 8005fde:	ece0 7a01 	vstmia	r0!, {s15}
 8005fe2:	3701      	adds	r7, #1
 8005fe4:	e7e7      	b.n	8005fb6 <__kernel_rem_pio2f+0x2ae>
 8005fe6:	9804      	ldr	r0, [sp, #16]
 8005fe8:	f04f 0c01 	mov.w	ip, #1
 8005fec:	e7d2      	b.n	8005f94 <__kernel_rem_pio2f+0x28c>
 8005fee:	ecfe 6a01 	vldmia	lr!, {s13}
 8005ff2:	ed39 7a01 	vldmdb	r9!, {s14}
 8005ff6:	f10c 0c01 	add.w	ip, ip, #1
 8005ffa:	eee6 7a87 	vfma.f32	s15, s13, s14
 8005ffe:	e7ec      	b.n	8005fda <__kernel_rem_pio2f+0x2d2>
 8006000:	3c01      	subs	r4, #1
 8006002:	e775      	b.n	8005ef0 <__kernel_rem_pio2f+0x1e8>
 8006004:	08006848 	.word	0x08006848
 8006008:	0800681c 	.word	0x0800681c
 800600c:	43800000 	.word	0x43800000
 8006010:	3b800000 	.word	0x3b800000
 8006014:	00000000 	.word	0x00000000
 8006018:	9b03      	ldr	r3, [sp, #12]
 800601a:	eeb0 0a48 	vmov.f32	s0, s16
 800601e:	1a98      	subs	r0, r3, r2
 8006020:	f000 f97a 	bl	8006318 <scalbnf>
 8006024:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 800600c <__kernel_rem_pio2f+0x304>
 8006028:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800602c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006030:	db19      	blt.n	8006066 <__kernel_rem_pio2f+0x35e>
 8006032:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8006010 <__kernel_rem_pio2f+0x308>
 8006036:	ee60 7a27 	vmul.f32	s15, s0, s15
 800603a:	aa08      	add	r2, sp, #32
 800603c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006040:	1c74      	adds	r4, r6, #1
 8006042:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006046:	3508      	adds	r5, #8
 8006048:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800604c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006050:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8006054:	ee10 3a10 	vmov	r3, s0
 8006058:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 800605c:	ee17 3a90 	vmov	r3, s15
 8006060:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8006064:	e74b      	b.n	8005efe <__kernel_rem_pio2f+0x1f6>
 8006066:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800606a:	aa08      	add	r2, sp, #32
 800606c:	ee10 3a10 	vmov	r3, s0
 8006070:	4634      	mov	r4, r6
 8006072:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8006076:	e742      	b.n	8005efe <__kernel_rem_pio2f+0x1f6>
 8006078:	a808      	add	r0, sp, #32
 800607a:	f850 0022 	ldr.w	r0, [r0, r2, lsl #2]
 800607e:	9001      	str	r0, [sp, #4]
 8006080:	ee07 0a90 	vmov	s15, r0
 8006084:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006088:	3a01      	subs	r2, #1
 800608a:	ee67 7a80 	vmul.f32	s15, s15, s0
 800608e:	ee20 0a07 	vmul.f32	s0, s0, s14
 8006092:	ed61 7a01 	vstmdb	r1!, {s15}
 8006096:	e73e      	b.n	8005f16 <__kernel_rem_pio2f+0x20e>
 8006098:	ecfc 6a01 	vldmia	ip!, {s13}
 800609c:	ecb6 7a01 	vldmia	r6!, {s14}
 80060a0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80060a4:	3001      	adds	r0, #1
 80060a6:	4550      	cmp	r0, sl
 80060a8:	dc01      	bgt.n	80060ae <__kernel_rem_pio2f+0x3a6>
 80060aa:	4288      	cmp	r0, r1
 80060ac:	ddf4      	ble.n	8006098 <__kernel_rem_pio2f+0x390>
 80060ae:	a858      	add	r0, sp, #352	; 0x160
 80060b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80060b4:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 80060b8:	3a01      	subs	r2, #1
 80060ba:	e730      	b.n	8005f1e <__kernel_rem_pio2f+0x216>
 80060bc:	9a66      	ldr	r2, [sp, #408]	; 0x198
 80060be:	2a02      	cmp	r2, #2
 80060c0:	dc09      	bgt.n	80060d6 <__kernel_rem_pio2f+0x3ce>
 80060c2:	2a00      	cmp	r2, #0
 80060c4:	dc2a      	bgt.n	800611c <__kernel_rem_pio2f+0x414>
 80060c6:	d043      	beq.n	8006150 <__kernel_rem_pio2f+0x448>
 80060c8:	f009 0007 	and.w	r0, r9, #7
 80060cc:	b059      	add	sp, #356	; 0x164
 80060ce:	ecbd 8b04 	vpop	{d8-d9}
 80060d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060d6:	9b66      	ldr	r3, [sp, #408]	; 0x198
 80060d8:	2b03      	cmp	r3, #3
 80060da:	d1f5      	bne.n	80060c8 <__kernel_rem_pio2f+0x3c0>
 80060dc:	ab30      	add	r3, sp, #192	; 0xc0
 80060de:	442b      	add	r3, r5
 80060e0:	461a      	mov	r2, r3
 80060e2:	4619      	mov	r1, r3
 80060e4:	4620      	mov	r0, r4
 80060e6:	2800      	cmp	r0, #0
 80060e8:	f1a1 0104 	sub.w	r1, r1, #4
 80060ec:	dc51      	bgt.n	8006192 <__kernel_rem_pio2f+0x48a>
 80060ee:	4621      	mov	r1, r4
 80060f0:	2901      	cmp	r1, #1
 80060f2:	f1a2 0204 	sub.w	r2, r2, #4
 80060f6:	dc5c      	bgt.n	80061b2 <__kernel_rem_pio2f+0x4aa>
 80060f8:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8006014 <__kernel_rem_pio2f+0x30c>
 80060fc:	3304      	adds	r3, #4
 80060fe:	2c01      	cmp	r4, #1
 8006100:	dc67      	bgt.n	80061d2 <__kernel_rem_pio2f+0x4ca>
 8006102:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8006106:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 800610a:	2f00      	cmp	r7, #0
 800610c:	d167      	bne.n	80061de <__kernel_rem_pio2f+0x4d6>
 800610e:	edc8 6a00 	vstr	s13, [r8]
 8006112:	ed88 7a01 	vstr	s14, [r8, #4]
 8006116:	edc8 7a02 	vstr	s15, [r8, #8]
 800611a:	e7d5      	b.n	80060c8 <__kernel_rem_pio2f+0x3c0>
 800611c:	aa30      	add	r2, sp, #192	; 0xc0
 800611e:	ed1f 7a43 	vldr	s14, [pc, #-268]	; 8006014 <__kernel_rem_pio2f+0x30c>
 8006122:	4413      	add	r3, r2
 8006124:	4622      	mov	r2, r4
 8006126:	2a00      	cmp	r2, #0
 8006128:	da24      	bge.n	8006174 <__kernel_rem_pio2f+0x46c>
 800612a:	b34f      	cbz	r7, 8006180 <__kernel_rem_pio2f+0x478>
 800612c:	eef1 7a47 	vneg.f32	s15, s14
 8006130:	edc8 7a00 	vstr	s15, [r8]
 8006134:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8006138:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800613c:	aa31      	add	r2, sp, #196	; 0xc4
 800613e:	2301      	movs	r3, #1
 8006140:	429c      	cmp	r4, r3
 8006142:	da20      	bge.n	8006186 <__kernel_rem_pio2f+0x47e>
 8006144:	b10f      	cbz	r7, 800614a <__kernel_rem_pio2f+0x442>
 8006146:	eef1 7a67 	vneg.f32	s15, s15
 800614a:	edc8 7a01 	vstr	s15, [r8, #4]
 800614e:	e7bb      	b.n	80060c8 <__kernel_rem_pio2f+0x3c0>
 8006150:	aa30      	add	r2, sp, #192	; 0xc0
 8006152:	ed5f 7a50 	vldr	s15, [pc, #-320]	; 8006014 <__kernel_rem_pio2f+0x30c>
 8006156:	4413      	add	r3, r2
 8006158:	2c00      	cmp	r4, #0
 800615a:	da05      	bge.n	8006168 <__kernel_rem_pio2f+0x460>
 800615c:	b10f      	cbz	r7, 8006162 <__kernel_rem_pio2f+0x45a>
 800615e:	eef1 7a67 	vneg.f32	s15, s15
 8006162:	edc8 7a00 	vstr	s15, [r8]
 8006166:	e7af      	b.n	80060c8 <__kernel_rem_pio2f+0x3c0>
 8006168:	ed33 7a01 	vldmdb	r3!, {s14}
 800616c:	3c01      	subs	r4, #1
 800616e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006172:	e7f1      	b.n	8006158 <__kernel_rem_pio2f+0x450>
 8006174:	ed73 7a01 	vldmdb	r3!, {s15}
 8006178:	3a01      	subs	r2, #1
 800617a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800617e:	e7d2      	b.n	8006126 <__kernel_rem_pio2f+0x41e>
 8006180:	eef0 7a47 	vmov.f32	s15, s14
 8006184:	e7d4      	b.n	8006130 <__kernel_rem_pio2f+0x428>
 8006186:	ecb2 7a01 	vldmia	r2!, {s14}
 800618a:	3301      	adds	r3, #1
 800618c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8006190:	e7d6      	b.n	8006140 <__kernel_rem_pio2f+0x438>
 8006192:	edd1 7a00 	vldr	s15, [r1]
 8006196:	edd1 6a01 	vldr	s13, [r1, #4]
 800619a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800619e:	3801      	subs	r0, #1
 80061a0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80061a4:	ed81 7a00 	vstr	s14, [r1]
 80061a8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ac:	edc1 7a01 	vstr	s15, [r1, #4]
 80061b0:	e799      	b.n	80060e6 <__kernel_rem_pio2f+0x3de>
 80061b2:	edd2 7a00 	vldr	s15, [r2]
 80061b6:	edd2 6a01 	vldr	s13, [r2, #4]
 80061ba:	ee37 7aa6 	vadd.f32	s14, s15, s13
 80061be:	3901      	subs	r1, #1
 80061c0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80061c4:	ed82 7a00 	vstr	s14, [r2]
 80061c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061cc:	edc2 7a01 	vstr	s15, [r2, #4]
 80061d0:	e78e      	b.n	80060f0 <__kernel_rem_pio2f+0x3e8>
 80061d2:	ed33 7a01 	vldmdb	r3!, {s14}
 80061d6:	3c01      	subs	r4, #1
 80061d8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80061dc:	e78f      	b.n	80060fe <__kernel_rem_pio2f+0x3f6>
 80061de:	eef1 6a66 	vneg.f32	s13, s13
 80061e2:	eeb1 7a47 	vneg.f32	s14, s14
 80061e6:	edc8 6a00 	vstr	s13, [r8]
 80061ea:	ed88 7a01 	vstr	s14, [r8, #4]
 80061ee:	eef1 7a67 	vneg.f32	s15, s15
 80061f2:	e790      	b.n	8006116 <__kernel_rem_pio2f+0x40e>

080061f4 <__kernel_sinf>:
 80061f4:	ee10 3a10 	vmov	r3, s0
 80061f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061fc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8006200:	da04      	bge.n	800620c <__kernel_sinf+0x18>
 8006202:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 8006206:	ee17 3a90 	vmov	r3, s15
 800620a:	b35b      	cbz	r3, 8006264 <__kernel_sinf+0x70>
 800620c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8006210:	eddf 7a15 	vldr	s15, [pc, #84]	; 8006268 <__kernel_sinf+0x74>
 8006214:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800626c <__kernel_sinf+0x78>
 8006218:	eea7 6a27 	vfma.f32	s12, s14, s15
 800621c:	eddf 7a14 	vldr	s15, [pc, #80]	; 8006270 <__kernel_sinf+0x7c>
 8006220:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006224:	ed9f 6a13 	vldr	s12, [pc, #76]	; 8006274 <__kernel_sinf+0x80>
 8006228:	eea7 6a87 	vfma.f32	s12, s15, s14
 800622c:	eddf 7a12 	vldr	s15, [pc, #72]	; 8006278 <__kernel_sinf+0x84>
 8006230:	ee60 6a07 	vmul.f32	s13, s0, s14
 8006234:	eee6 7a07 	vfma.f32	s15, s12, s14
 8006238:	b930      	cbnz	r0, 8006248 <__kernel_sinf+0x54>
 800623a:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800627c <__kernel_sinf+0x88>
 800623e:	eea7 6a27 	vfma.f32	s12, s14, s15
 8006242:	eea6 0a26 	vfma.f32	s0, s12, s13
 8006246:	4770      	bx	lr
 8006248:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800624c:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 8006250:	eee0 7a86 	vfma.f32	s15, s1, s12
 8006254:	eed7 0a87 	vfnms.f32	s1, s15, s14
 8006258:	eddf 7a09 	vldr	s15, [pc, #36]	; 8006280 <__kernel_sinf+0x8c>
 800625c:	eee6 0aa7 	vfma.f32	s1, s13, s15
 8006260:	ee30 0a60 	vsub.f32	s0, s0, s1
 8006264:	4770      	bx	lr
 8006266:	bf00      	nop
 8006268:	2f2ec9d3 	.word	0x2f2ec9d3
 800626c:	b2d72f34 	.word	0xb2d72f34
 8006270:	3638ef1b 	.word	0x3638ef1b
 8006274:	b9500d01 	.word	0xb9500d01
 8006278:	3c088889 	.word	0x3c088889
 800627c:	be2aaaab 	.word	0xbe2aaaab
 8006280:	3e2aaaab 	.word	0x3e2aaaab

08006284 <fabsf>:
 8006284:	ee10 3a10 	vmov	r3, s0
 8006288:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800628c:	ee00 3a10 	vmov	s0, r3
 8006290:	4770      	bx	lr
	...

08006294 <floorf>:
 8006294:	ee10 3a10 	vmov	r3, s0
 8006298:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800629c:	3a7f      	subs	r2, #127	; 0x7f
 800629e:	2a16      	cmp	r2, #22
 80062a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80062a4:	dc2a      	bgt.n	80062fc <floorf+0x68>
 80062a6:	2a00      	cmp	r2, #0
 80062a8:	da11      	bge.n	80062ce <floorf+0x3a>
 80062aa:	eddf 7a18 	vldr	s15, [pc, #96]	; 800630c <floorf+0x78>
 80062ae:	ee30 0a27 	vadd.f32	s0, s0, s15
 80062b2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80062b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062ba:	dd05      	ble.n	80062c8 <floorf+0x34>
 80062bc:	2b00      	cmp	r3, #0
 80062be:	da23      	bge.n	8006308 <floorf+0x74>
 80062c0:	4a13      	ldr	r2, [pc, #76]	; (8006310 <floorf+0x7c>)
 80062c2:	2900      	cmp	r1, #0
 80062c4:	bf18      	it	ne
 80062c6:	4613      	movne	r3, r2
 80062c8:	ee00 3a10 	vmov	s0, r3
 80062cc:	4770      	bx	lr
 80062ce:	4911      	ldr	r1, [pc, #68]	; (8006314 <floorf+0x80>)
 80062d0:	4111      	asrs	r1, r2
 80062d2:	420b      	tst	r3, r1
 80062d4:	d0fa      	beq.n	80062cc <floorf+0x38>
 80062d6:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800630c <floorf+0x78>
 80062da:	ee30 0a27 	vadd.f32	s0, s0, s15
 80062de:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80062e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80062e6:	ddef      	ble.n	80062c8 <floorf+0x34>
 80062e8:	2b00      	cmp	r3, #0
 80062ea:	bfbe      	ittt	lt
 80062ec:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80062f0:	fa40 f202 	asrlt.w	r2, r0, r2
 80062f4:	189b      	addlt	r3, r3, r2
 80062f6:	ea23 0301 	bic.w	r3, r3, r1
 80062fa:	e7e5      	b.n	80062c8 <floorf+0x34>
 80062fc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8006300:	d3e4      	bcc.n	80062cc <floorf+0x38>
 8006302:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006306:	4770      	bx	lr
 8006308:	2300      	movs	r3, #0
 800630a:	e7dd      	b.n	80062c8 <floorf+0x34>
 800630c:	7149f2ca 	.word	0x7149f2ca
 8006310:	bf800000 	.word	0xbf800000
 8006314:	007fffff 	.word	0x007fffff

08006318 <scalbnf>:
 8006318:	ee10 3a10 	vmov	r3, s0
 800631c:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8006320:	d025      	beq.n	800636e <scalbnf+0x56>
 8006322:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006326:	d302      	bcc.n	800632e <scalbnf+0x16>
 8006328:	ee30 0a00 	vadd.f32	s0, s0, s0
 800632c:	4770      	bx	lr
 800632e:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8006332:	d122      	bne.n	800637a <scalbnf+0x62>
 8006334:	4b2a      	ldr	r3, [pc, #168]	; (80063e0 <scalbnf+0xc8>)
 8006336:	eddf 7a2b 	vldr	s15, [pc, #172]	; 80063e4 <scalbnf+0xcc>
 800633a:	4298      	cmp	r0, r3
 800633c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006340:	db16      	blt.n	8006370 <scalbnf+0x58>
 8006342:	ee10 3a10 	vmov	r3, s0
 8006346:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800634a:	3a19      	subs	r2, #25
 800634c:	4402      	add	r2, r0
 800634e:	2afe      	cmp	r2, #254	; 0xfe
 8006350:	dd15      	ble.n	800637e <scalbnf+0x66>
 8006352:	ee10 3a10 	vmov	r3, s0
 8006356:	eddf 7a24 	vldr	s15, [pc, #144]	; 80063e8 <scalbnf+0xd0>
 800635a:	eddf 6a24 	vldr	s13, [pc, #144]	; 80063ec <scalbnf+0xd4>
 800635e:	2b00      	cmp	r3, #0
 8006360:	eeb0 7a67 	vmov.f32	s14, s15
 8006364:	bfb8      	it	lt
 8006366:	eef0 7a66 	vmovlt.f32	s15, s13
 800636a:	ee27 0a27 	vmul.f32	s0, s14, s15
 800636e:	4770      	bx	lr
 8006370:	eddf 7a1f 	vldr	s15, [pc, #124]	; 80063f0 <scalbnf+0xd8>
 8006374:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006378:	4770      	bx	lr
 800637a:	0dd2      	lsrs	r2, r2, #23
 800637c:	e7e6      	b.n	800634c <scalbnf+0x34>
 800637e:	2a00      	cmp	r2, #0
 8006380:	dd06      	ble.n	8006390 <scalbnf+0x78>
 8006382:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006386:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800638a:	ee00 3a10 	vmov	s0, r3
 800638e:	4770      	bx	lr
 8006390:	f112 0f16 	cmn.w	r2, #22
 8006394:	da1a      	bge.n	80063cc <scalbnf+0xb4>
 8006396:	f24c 3350 	movw	r3, #50000	; 0xc350
 800639a:	4298      	cmp	r0, r3
 800639c:	ee10 3a10 	vmov	r3, s0
 80063a0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80063a4:	dd0a      	ble.n	80063bc <scalbnf+0xa4>
 80063a6:	ed9f 0a10 	vldr	s0, [pc, #64]	; 80063e8 <scalbnf+0xd0>
 80063aa:	ed9f 7a10 	vldr	s14, [pc, #64]	; 80063ec <scalbnf+0xd4>
 80063ae:	eef0 7a40 	vmov.f32	s15, s0
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	bf18      	it	ne
 80063b6:	eeb0 0a47 	vmovne.f32	s0, s14
 80063ba:	e7db      	b.n	8006374 <scalbnf+0x5c>
 80063bc:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 80063f0 <scalbnf+0xd8>
 80063c0:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 80063f4 <scalbnf+0xdc>
 80063c4:	eef0 7a40 	vmov.f32	s15, s0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	e7f3      	b.n	80063b4 <scalbnf+0x9c>
 80063cc:	3219      	adds	r2, #25
 80063ce:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80063d2:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80063d6:	eddf 7a08 	vldr	s15, [pc, #32]	; 80063f8 <scalbnf+0xe0>
 80063da:	ee07 3a10 	vmov	s14, r3
 80063de:	e7c4      	b.n	800636a <scalbnf+0x52>
 80063e0:	ffff3cb0 	.word	0xffff3cb0
 80063e4:	4c000000 	.word	0x4c000000
 80063e8:	7149f2ca 	.word	0x7149f2ca
 80063ec:	f149f2ca 	.word	0xf149f2ca
 80063f0:	0da24260 	.word	0x0da24260
 80063f4:	8da24260 	.word	0x8da24260
 80063f8:	33000000 	.word	0x33000000

080063fc <__libc_init_array>:
 80063fc:	b570      	push	{r4, r5, r6, lr}
 80063fe:	4d0d      	ldr	r5, [pc, #52]	; (8006434 <__libc_init_array+0x38>)
 8006400:	4c0d      	ldr	r4, [pc, #52]	; (8006438 <__libc_init_array+0x3c>)
 8006402:	1b64      	subs	r4, r4, r5
 8006404:	10a4      	asrs	r4, r4, #2
 8006406:	2600      	movs	r6, #0
 8006408:	42a6      	cmp	r6, r4
 800640a:	d109      	bne.n	8006420 <__libc_init_array+0x24>
 800640c:	4d0b      	ldr	r5, [pc, #44]	; (800643c <__libc_init_array+0x40>)
 800640e:	4c0c      	ldr	r4, [pc, #48]	; (8006440 <__libc_init_array+0x44>)
 8006410:	f000 f820 	bl	8006454 <_init>
 8006414:	1b64      	subs	r4, r4, r5
 8006416:	10a4      	asrs	r4, r4, #2
 8006418:	2600      	movs	r6, #0
 800641a:	42a6      	cmp	r6, r4
 800641c:	d105      	bne.n	800642a <__libc_init_array+0x2e>
 800641e:	bd70      	pop	{r4, r5, r6, pc}
 8006420:	f855 3b04 	ldr.w	r3, [r5], #4
 8006424:	4798      	blx	r3
 8006426:	3601      	adds	r6, #1
 8006428:	e7ee      	b.n	8006408 <__libc_init_array+0xc>
 800642a:	f855 3b04 	ldr.w	r3, [r5], #4
 800642e:	4798      	blx	r3
 8006430:	3601      	adds	r6, #1
 8006432:	e7f2      	b.n	800641a <__libc_init_array+0x1e>
 8006434:	0800685c 	.word	0x0800685c
 8006438:	0800685c 	.word	0x0800685c
 800643c:	0800685c 	.word	0x0800685c
 8006440:	08006864 	.word	0x08006864

08006444 <memset>:
 8006444:	4402      	add	r2, r0
 8006446:	4603      	mov	r3, r0
 8006448:	4293      	cmp	r3, r2
 800644a:	d100      	bne.n	800644e <memset+0xa>
 800644c:	4770      	bx	lr
 800644e:	f803 1b01 	strb.w	r1, [r3], #1
 8006452:	e7f9      	b.n	8006448 <memset+0x4>

08006454 <_init>:
 8006454:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006456:	bf00      	nop
 8006458:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800645a:	bc08      	pop	{r3}
 800645c:	469e      	mov	lr, r3
 800645e:	4770      	bx	lr

08006460 <_fini>:
 8006460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006462:	bf00      	nop
 8006464:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006466:	bc08      	pop	{r3}
 8006468:	469e      	mov	lr, r3
 800646a:	4770      	bx	lr
